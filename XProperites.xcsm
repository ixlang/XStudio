
class XProperites : QDialog {
    QPushButton btnClose, btnCfg;
    Project _project;
    Configure _curconfig;
    QTreeWidget _listview;
    ProjectPropInterface _prop;
    String argsPage = nilptr;
    QPropertyBrowser _propTable = new QPropertyBrowser();
    Vector<JsonObject> _propItems = new Vector<JsonObject>();
    static QRect rect = nilptr;
    Map<String, QPropertyBrowser.QtVariantProperty> currentProps = new Map<String, QPropertyBrowser.QtVariantProperty>();
    QComboBox listConfigures ;
    
    public XProperites(Project pr, String args){
        _project = pr;
        argsPage = args;
    }
     
    public onTreeViewItemEvent listlistener = new onTreeViewItemEvent(){
        void onItemClicked(@NotNilptr QTreeWidget list,long item, int column)override{
            long i = list.getItemTag(item, 0);
            XProperites.this.saveProp();
            XProperites.this._propTable.clear();
            currentProps.clear();
            XProperites.this.loadFeature((JsonObject)XProperites.this._propItems.get(i).child());
        }
    };
    
    public String getLanguage(){
        return _project.getLanguage();
    }
    
    public String readSlnPropFile(@NotNilptr String file){
        FileInputStream fis = nilptr;
        try{
            fis = new FileInputStream(file);
        }catch(Exception e){
            _system_.consoleWrite("canot read file " + file);
        }
        
        if (fis != nilptr){
            byte []data = fis.read();
            return new String(data);
        }
        
        return nilptr;
    }
    
    public bool showAllConfigures(){
        QDialog newDlg = new QDialog();
        
        if (newDlg.load(UIManager.getUIData(__xPackageResource("ui/configure.ui"))) == false){
            return false;
        }
        
        ConfigMgr cfglist = new ConfigMgr();
        cfglist.proWnd = this;
		cfglist._curproject = _project;
        cfglist.attach(newDlg);
		
        return true;
    }
    
    public void refreshConfigures(){
		int i = 0;
		String []configName = new String[_project.configures.size()];
        for (Map.Iterator<String, Configure> iter = _project.configures.iterator();iter.hasNext();iter.next()){
            configName[i++]  = iter.getKey();
        }
        listConfigures.clear();
        listConfigures.addItems(configName);
    }
    
    public void loadConfigure(){
        String []configName = new String[_project.configures.size()];
        int i = 0;
        
        _curconfig = _project.getCurrentConfig();
        
        for (Map.Iterator<String, Configure> iter = _project.configures.iterator();iter.hasNext();iter.next()){
            configName[i++]  = iter.getKey();
            if (_curconfig == nilptr){
                _curconfig = iter.getValue();
            }
        }
        
        listConfigures.addItems(configName);
        listConfigures.setText(_curconfig.getName());
        
        listConfigures.setOnComboBoxEventListener(
			new onComboBoxEventListener(){
				void onItemSelected(QObject obj, int id){
                    if (_project != nilptr){
						String cname = listConfigures.getCurrentText();
                        if (cname.length() > 0){
							Configure cfg_ = _project.getConfigure(listConfigures.getCurrentText());
							if (cfg_ != nilptr){
								updateProp(cfg_);
							}else{
								QMessageBox.Critical("错误", "找不到此配置", QMessageBox.Ok, QMessageBox.Ok);
							}
                        }
                    }
				}
			}
        );
    }
    


    public bool loadProperites(String defaultFeature){
        _prop = ProjectPropManager.getForProject(getLanguage());
        
        if (_prop != nilptr){
            JsonObject _root = _prop.getProperitiesConfigure();
            if (_root != nilptr){
                loadProperites((JsonObject)_root.child(), defaultFeature);
                return true;
            }
        }else{
            QMessageBox.Critical("错误", "不支持的项目类型.\n请注意: 没有为该类型项目提供配置文件.", QMessageBox.Ok, QMessageBox.Ok);
        }
        return false;
    }
    
    public void onAttach(){
        _listview = (QTreeWidget)attachByName(new QTreeWidget(), "listProp");
        listConfigures = (QComboBox)attachByName(new QComboBox(), "configures");
        
        _propTable.create(this);
        _propTable.move(170, 40);
        _propTable.resize(500, 410);
        
        _propTable.setLables("项","值");
        _propTable.enableAdjust(true);
        _propTable.setHeaderWidths(200, 200);
        
        String [] columns = {"选项"};
        _listview.setColumns(columns);
        _listview.setOnTreeViewItemEvent(listlistener);
        loadConfigure();
        if (loadProperites(argsPage) == false){
            close();
            return ;
        }
        
		btnClose = (QPushButton)attachByName(new QPushButton(), "btnClose");
		btnCfg = (QPushButton)attachByName(new QPushButton(), "btnCfg");
        btnCfg.setOnClickListener(
        new onClickListener(){
            void onClick(QObject obj, bool checked)override{
                showAllConfigures();
            }
        });
        
        btnClose.setOnClickListener(
        new onClickListener(){
            void onClick(QObject obj, bool checked)override{
                XProperites.this.saveProp();
                if (_prop != nilptr){
                    _prop.onProjectSettingChange(_project);
                }
                XProperites.this.close();
            }
        });
        
		QLabel labTips = (QLabel)attachByName(new QLabel(), "labTips");

        setOnLayoutEventListener(new onLayoutEventListener(){
                void onResize(QObject obj, int w, int h, int oldw, int oldh)override {
					_listview.resize(141, h - 50);
					btnClose.move(w - 100, h - 40);
					labTips.move(170, h - 40);
					//_propTable.move(170, 40);
					_propTable.resize(w - 200, h - 90);
                }
        });

        setWindowTitle(_project.getName() + " - 属性");
        setWindowIcon("./res/toolbar/prop.png");
        if (rect != nilptr){
            move(rect.left,rect.top);
            resize(rect.right,rect.bottom);
        }
        setModal(true);
        show();
    }
    
    public bool onClose(){
        rect = new QRect(x(), y(), width(), height());
		_project = nilptr;
        return true;
    }
    
    public void loadFeature(@NotNilptr JsonObject confi){
    
        QPropertyBrowser.QtVariantPropertyManager variantManager = new QPropertyBrowser.QtVariantPropertyManager(_propTable);
        while(confi != nilptr){
            String cfgName = confi.getName();
            String type = confi.getString("type");
            if (cfgName != nilptr && type != nilptr){
                if (type.equals("string")){
                    loadString(variantManager, cfgName, confi);
                }else
                if (type.equals("stringlist")){
                    loadStringList(variantManager, cfgName, confi);
                }else
                if (type.equals("options")){
                    loadOptions(variantManager, cfgName, confi);
                }else
                if (type.equals("bool")){
                    loadBoolean(variantManager, cfgName, confi);
                }else
                if (type.equals("text")){
                    loadTextItem(variantManager, cfgName, confi);
                }else
                if (type.equals("params")){
                    loadTextparams(variantManager, cfgName, confi);
                }else
                if (type.equals("fileout")){
                    loadSavePath(variantManager, cfgName, confi);
                }else
                if (type.equals("filein")){
                    loadOpenPath(variantManager, cfgName, confi);
                }else
                if (type.equals("folder")){
                    loadPath(variantManager, cfgName, confi);
                }
            }
            confi = (JsonObject)confi.next();
        }
        _propTable.setFactoryForManager(variantManager, new QPropertyBrowser.QtVariantEditorFactory(_propTable));
        _propTable.setPropertiesWithoutValueMarked(true);
        _propTable.setRootIsDecorated(false);
    
    }
    
    public void loadProperites(@NotNilptr JsonObject root, String defaultFeature){

        JsonObject defobj = nilptr;
        
		while(root != nilptr){
			String featName = root.getName();
			
			JsonObject confi = (JsonObject)root.child();
			long litem = _listview.addItem(nilptr, featName);
			_listview.setItemTag(litem, 0, _propItems.size());
			_propItems.add((JsonObject)root.clone());
			if (defobj == nilptr){
				defobj = confi;
			}
            if (defaultFeature != nilptr){
				if (defaultFeature.equals(featName)){
					defobj = confi;
                }
            }
			root = (JsonObject)root.next();
		}
        
        if (defobj != nilptr){
			loadFeature(defobj);
        }
    }
  
    public void loadString(@NotNilptr QPropertyBrowser.QtVariantPropertyManager manager,@NotNilptr  String name,@NotNilptr  JsonObject root){
        String [] kv = name.split(':');
        QPropertyBrowser.QtVariantProperty item = (QPropertyBrowser.QtVariantProperty)manager.addProperty(new QPropertyBrowser.QtVariantProperty(),QVariant.String, kv[0]);
        _propTable.addProperty(item);
        item.setValue(_prop.getValue(_project, _curconfig, kv[1]));
        currentProps.put(kv[1], item);
    }
    
    
    
    public void loadOptions(@NotNilptr QPropertyBrowser.QtVariantPropertyManager manager,@NotNilptr  String name,@NotNilptr  JsonObject root){
        String [] kv = name.split(':');
        QPropertyBrowser.QtVariantProperty item = (QPropertyBrowser.QtVariantProperty)manager.addEnumProperty(new QPropertyBrowser.QtVariantProperty(), kv[0]);
        JsonArray list = root.getArray("list");
        
        if (list == nilptr){
            return ;
        }
        item.setFlags(1);
        
        String selvalue = _prop.getValue(_project, _curconfig, kv[1]);
        
        if (selvalue != nilptr){
            int count = list.length();
            String addition = nilptr;
            
            if (selvalue.length() == 0 || selvalue.equals("Not Set") || selvalue.equals("未设置")){
                selvalue = "0";
            }else{
                bool bfound = false;
                String ends = "(" + selvalue + ")";
                for (int i = 0; i < list.length(); i++){
                    String szItem = list.getString(i);
                    if (szItem != nilptr){
                        if (szItem.endsWith(ends) || szItem.equals(selvalue)){
                            selvalue = "" + i;
                            bfound = true;
                            break;
                        }
                    }
                }
                if (!bfound){
                    count++;
                    addition = ends;
                    selvalue = "" + list.length();
                }
            }
            
            String [] options = new String[count];
            for (int i = 0;i < list.length(); i++){
                options[i] = list.getString(i);
            }
            
            if (addition != nilptr){
                options[count - 1] = "未知" + addition;
            }
            
            item.setAttributeEnumNames(options);
            item.setValue(selvalue);
            _propTable.addProperty(item);
            currentProps.put(kv[1], item);
        }
    }
    
    public void loadBoolean(@NotNilptr QPropertyBrowser.QtVariantPropertyManager manager,@NotNilptr  String name,@NotNilptr  JsonObject root){
        String [] kv = name.split(':');
        QPropertyBrowser.QtVariantProperty item = (QPropertyBrowser.QtVariantProperty)manager.addEnumProperty(new QPropertyBrowser.QtVariantProperty(), kv[0]);
  
        item.setFlags(1);
        
        String selvalue = _prop.getValue(_project, _curconfig, kv[1]);
        
        if (selvalue != nilptr){
            if (selvalue.equals("True")){
                selvalue = "1";
            }else{
                selvalue = "0";
            }
        }   
        
        String [] options = {"否(False)", "是(True)"};

        
        item.setAttributeEnumNames(options);
        item.setValue(selvalue);
        _propTable.addProperty(item);
        currentProps.put(kv[1], item);
    
    }
    
    public void loadStringList(@NotNilptr QPropertyBrowser.QtVariantPropertyManager manager,@NotNilptr  String name,@NotNilptr  JsonObject root){
        String [] kv = name.split(':');
        QPropertyBrowser.QtVariantProperty item = (QPropertyBrowser.QtVariantProperty)manager.addEnumProperty(new QPropertyBrowser.QtVariantProperty(), kv[0]);
        JsonArray list = root.getArray("list");
        
        if (list != nilptr){
            String selvalue = _prop.getValue(_project, _curconfig, kv[1]);
            
            if (selvalue != nilptr){
                int count = list.length();
                String addition = nilptr;
                if (selvalue.isDigit() == false){
                    bool bfound = false;
                    for (int i = 0; i < list.length(); i++){
                        String strText = list.getString(i);
                        if (strText != nilptr && strText.equals(selvalue)){
                            selvalue = "" + i;
                            bfound = true;
                            break;
                        }
                    }
                    if (!bfound){
                        count++;
                        addition = selvalue;
                        selvalue = "" + list.length();
                    }
                }
                
                String [] options = new String[count];
                for (int i = 0;i < list.length(); i++){
                    options[i] = list.getString(i);
                }
                
                if (addition != nilptr){
                    options[count - 1] = addition + "(未安装)";
                }
                
                item.setAttributeEnumNames(options);
                item.setValue(selvalue);
            }
        }
        _propTable.addProperty(item);
        currentProps.put(kv[1], item);
    }
    
    public void loadPath(@NotNilptr QPropertyBrowser.QtVariantPropertyManager manager,@NotNilptr  String name, @NotNilptr JsonObject root){
        String [] kv = name.split(':');
        QPropertyBrowser.QtVariantProperty item = (QPropertyBrowser.QtVariantProperty)manager.addEnumProperty(new QPropertyBrowser.QtVariantProperty(), kv[0]);
        String defaultValue = _prop.getValue(_project, _curconfig, kv[1]);
        
        String [] options = new String[2];
        options[0] = defaultValue;
        options[1] = "<浏览...>";
        item.setAttributeEnumNames(options);
        
        manager.setPropertyEventListener(item,
        new QPropertyBrowser.PropertyManager.onPropertyEventListener(){
            void onVariantPropertyValueChanged(long prop, int dataType, String stringValue)override{
                if (stringValue != nilptr){
                    if (stringValue.parseInt() != 0){
                        item.setValue("0");
                        String newValue = QFileDialog.getFolderPath("选择目录",options[0],nilptr,XProperites.this);
                        if (newValue != nilptr){
                            _prop.setValue(_project,_curconfig, kv[1], newValue);
                            options[0] = newValue;
                            item.setAttributeEnumNames(options);
                        }
                        item.setValue("0");
                    }
                }
            }
        });
        _propTable.addProperty(item);
        currentProps.put(kv[1], item);
    }
    
    public void loadSavePath(@NotNilptr QPropertyBrowser.QtVariantPropertyManager manager,@NotNilptr  String name,@NotNilptr  JsonObject root){
        String [] kv = name.split(':');
        QPropertyBrowser.QtVariantProperty item = (QPropertyBrowser.QtVariantProperty)manager.addEnumProperty(new QPropertyBrowser.QtVariantProperty(), kv[0]);
        String defaultValue = _prop.getValue(_project, _curconfig, kv[1]);
        
        String [] options = new String[2];
        options[0] = defaultValue;
        options[1] = "<浏览...>";
        item.setAttributeEnumNames(options);
        
        manager.setPropertyEventListener(item,
        new QPropertyBrowser.PropertyManager.onPropertyEventListener(){
            void onVariantPropertyValueChanged(long prop, int dataType, String stringValue)override{
                if (stringValue != nilptr){
                    if (stringValue.parseInt() != 0){
                        item.setValue(defaultValue);
                        String newValue = QFileDialog.getFolderPath("浏览 - " + kv[0],options[0],nilptr,XProperites.this);
                        if (newValue != nilptr){
                            _prop.setValue(_project,_curconfig, kv[1], newValue);
                            options[0] = newValue;
                            item.setAttributeEnumNames(options);
                        }
                        item.setValue("0");
                    }
                }
            }
        });
        _propTable.addProperty(item);
        currentProps.put(kv[1], item);
    }
    
    public void loadOpenPath(@NotNilptr QPropertyBrowser.QtVariantPropertyManager manager, @NotNilptr String name, @NotNilptr JsonObject root){
        String [] kv = name.split(':');
        QPropertyBrowser.QtVariantProperty item = (QPropertyBrowser.QtVariantProperty)manager.addEnumProperty(new QPropertyBrowser.QtVariantProperty(), kv[0]);
        String defaultValue = _prop.getValue(_project, _curconfig, kv[1]);
        
        String [] options = new String[2];
        options[0] = defaultValue;
        options[1] = "<浏览...>";
        item.setAttributeEnumNames(options);
        
        manager.setPropertyEventListener(item,
        new QPropertyBrowser.PropertyManager.onPropertyEventListener(){
            void onVariantPropertyValueChanged(long prop, int dataType, String stringValue)override{
                if (stringValue != nilptr){
                    if (stringValue.parseInt() != 0){
                        item.setValue(defaultValue);
                        String newValue = QFileDialog.getFolderPath("浏览 - " + kv[0],options[0],nilptr,XProperites.this);
                        if (newValue != nilptr){
                            _prop.setValue(_project,_curconfig, kv[1], newValue);
                            options[0] = newValue;
                            item.setAttributeEnumNames(options);
                        }
                        item.setValue("0");
                    }
                }
            }
        });
        _propTable.addProperty(item);
        currentProps.put(kv[1], item);
    }
    
    
    public void loadTextparams(@NotNilptr QPropertyBrowser.QtVariantPropertyManager manager,@NotNilptr  String name, @NotNilptr JsonObject root){
        String [] kv = name.split(':');
        
        QPropertyBrowser.QtVariantProperty item = (QPropertyBrowser.QtVariantProperty)manager.addEnumProperty(new QPropertyBrowser.QtVariantProperty(), kv[0]);
        
        item.setFlags(2);
               
        String defaultValue = _prop.getValue(_project, _curconfig, kv[1]);
        
        String simpleValue = "", detailValue = "";
        try{
            JsonArray jarv = new JsonArray(defaultValue);
            for (int i = 0, c = jarv.length(); i < c; i++){
                String value = jarv.getString(i);
                if (detailValue.length() > 0){
                    detailValue = detailValue + "\n" + value;
                    simpleValue = simpleValue + ";" + value;
                }else{
                    detailValue = value;
                    simpleValue = value;
                }
            }
        }catch(Exception e){
            
        }
        
        String [] options = new String[2];
        options[0] = simpleValue;
        options[1] = "<编辑...>";
        
        item.setTagObject(defaultValue);
        item.setAttributeEnumNames(options);
        
        manager.setPropertyEventListener(item,
        new QPropertyBrowser.PropertyManager.onPropertyEventListener(){
            void onVariantPropertyValueChanged(long prop, int dataType, String stringValue)override{
                if (stringValue != nilptr){
                    if (stringValue.parseInt() != 0){
                    
                        TextDetail td = nilptr;
                        td = new TextDetail(new TextDetail.closeListener() {
                            void onClose(@NotNilptr String text, bool updated) {
                                if (updated){
                                    detailValue = text.trim(true);
                                    String [] newValue = detailValue.split('\n');
                                    JsonArray jset = new JsonArray();
                                    for (int i = 0; i < newValue.length; i++){
                                        jset.put(newValue[i]);
                                    }
                                    defaultValue = jset.toString(true);
                                    item.setTagObject(defaultValue);
                                    _prop.setValue(_project,_curconfig, kv[1], defaultValue);
                                    simpleValue = text.trim(true).replace("\n", ";");
                                    options[0] = simpleValue;
                                    item.setAttributeEnumNames(options);
                                }
                                item.setValue("0");
                            }

                            void onCreate() { 
                                td.centerScreen();
                            }
                        });
                        td.create("编辑 - " + kv[0], detailValue, XProperites.this, true);
                    }
                }
            }
        });
        _propTable.addProperty(item);
        currentProps.put(kv[1], item);
    }
    
    public void loadTextItem(@NotNilptr QPropertyBrowser.QtVariantPropertyManager manager,@NotNilptr  String name,@NotNilptr  JsonObject root){
        String [] kv = name.split(':');
        QPropertyBrowser.QtVariantProperty item = (QPropertyBrowser.QtVariantProperty)manager.addEnumProperty(new QPropertyBrowser.QtVariantProperty(), kv[0]);
        String defaultValue = _prop.getValue(_project, _curconfig, kv[1]);
        
        String [] options = new String[2];
        options[0] = defaultValue;
        options[1] = "<编辑...>";
        item.setAttributeEnumNames(options);
        
        manager.setPropertyEventListener(item,
        new QPropertyBrowser.PropertyManager.onPropertyEventListener(){
            void onVariantPropertyValueChanged(long prop, int dataType, String stringValue)override{
                if (stringValue != nilptr){
                    if (stringValue.parseInt() != 0){
                    
                        TextDetail td = nilptr;
                        td = new TextDetail(new TextDetail.closeListener() {
                            void onClose(@NotNilptr String text, bool updated) {
                                if (updated){
                                    String newValue = text.trim(true);
                                    _prop.setValue(_project,_curconfig, kv[1], newValue);
                                    options[0] = newValue;
                                    item.setAttributeEnumNames(options);
                                }
                                item.setValue("0");
                            }

                            void onCreate() {
                                td.centerScreen();
                            }
                        });
                        
                        td.create("编辑 - " + kv[0], options[0], XProperites.this, true);
                        
                    }
                }
            }
        });
        _propTable.addProperty(item);
        currentProps.put(kv[1], item);
    }
    
    public void saveProp(){
        Map.Iterator<String, QPropertyBrowser.QtVariantProperty> iter = currentProps.iterator();
        for (; iter.hasNext(); iter.next()){
        
            QPropertyBrowser.QtVariantProperty item = iter.getValue();
            String key = iter.getKey();
            if (key != nilptr && item != nilptr){
                String value = item.getValue();
                if (value != nilptr){
                    if (item.getFlags() == 2){
                        value = (String)item.getTagObject();
                    }else
                    if (item.getFlags() == 1){
                        if (value.equals("未设置") == false && value.equals("Not Set") == false){
                            int lp = value.indexOf('('), rp = value.lastIndexOf(')');
                            if (lp != -1 && rp != -1){
                                value = value.substring(lp + 1,rp);
                            }
                        }else{
                            value = "";
                        }
                    }else{
                        while (value.endsWith("(未安装)")){
                            value = value.substring(0, value.length() - "(未安装)".length());
                        } 
                    }
                    
                    if (false == _prop.setValue(_project, _curconfig, key, value)){
                        QMessageBox.Critical("错误", key + "字段更改失败.", QMessageBox.Ok, QMessageBox.Ok);
                    }
                }
            }
        }
    }
    
    public void updateProp(@NotNilptr Configure _cfg){
		long item = _listview.getSelItem();
		long i = _listview.getItemTag(item, 0);
		saveProp();
		_propTable.clear();
		currentProps.clear();
        _curconfig = _cfg;
		loadFeature((JsonObject)XProperites.this._propItems.get(i).child());
    }
};