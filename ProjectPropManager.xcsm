

class DebuggeeManager{
    Map<String, ProjectPropInterface> debuggees = new Map<String, ProjectPropInterface>();
    public Vector<String > namelist = new Vector<String >();
    
    public ProjectPropInterface getDefault(){
        if (debuggees.size() > 0){
            return debuggees.iterator().getValue();
        }
        return nilptr;
    }
    
    public ProjectPropInterface get(String name){
        try{
            return debuggees.get(name);
        }catch(Exception e){
            
        }
        return nilptr;
    }
    
    public void add(String key, ProjectPropInterface pi){
        if (key == nilptr || debuggees.containsKey(key)){
            return ;
        }
        namelist.add(key);
        debuggees.put(key ,pi);
    }
};
    
class ProjectPropManager{
     
    static Map<String, ProjectPropInterface> _props = new Map<String, ProjectPropInterface>();
    static CPlusplusProp cppp = new CPlusplusProp();
    public static bool registryAllProp(){
        _props.put("xlang", new XlangProjectProp());
        _props.put("C/C++", cppp);
        _props.put("C", cppp);
        return true;
    }
     
    public static ProjectPropInterface getForProject(String projLnaguageConf){
		try{
			return _props.get(projLnaguageConf);
		}catch(Exception e){
		}
        return nilptr;
    }
    
    public static bool registryProp(@NotNilptr String name, ProjectPropInterface prop){
        if (name.equals("C/C++")){
            cppp.setBridge(prop);
        }else{
            _props.put(name, prop);
        }
        return true;
    }
    

    
    public @NotNilptr  static DebuggeeManager getDebuggeeManager(){
        DebuggeeManager dc = new DebuggeeManager();
        
        Map.Iterator<String, ProjectPropInterface> iter = _props.iterator();
        while (iter.hasNext()){
            ProjectPropInterface pi = iter.getValue();
            if (pi != nilptr){
                dc.add(pi.getDebuggeeDescription(), pi);
            }
            iter.next();
        }
        return dc;
    }
    
    public @NotNilptr  static String getAllExtensionFilter(){
        String output = "";
        
        Map.Iterator<String, ProjectPropInterface> iter = _props.iterator();
        while (iter.hasNext()){
            ProjectPropInterface pi = iter.getValue();
            if (pi != nilptr){
                String szf = pi.getFileExtensionFilter();
                if (szf != nilptr){
                    szf = szf.trim(true);
                }
                if (szf != nilptr && szf.length() > 0){
                    if (output.length() > 0){
                        if (output.endsWith(";;")){
                            output = output + szf;
                        }else{
                            output = output + ";;" + szf;
                        }
                    }else{
                        output = szf;
                    }
                }
            }
            iter.next();
        }
        return output;
    }
};