
class XWorkspace : QMdiArea
{
    public QMainWindow mainWindow;
    XWndSln slnView;

    static Thread _debugThread;
    Builder _builder = new Builder();
    Project currentProject;
    Thread _autoComp_thread;
    public QFileSystemWatcher qfsw = new QFileSystemWatcher();
    Thread _run_thread;
    XStackInfor stackWnd;
    XIntelliSense.XIntelliResult  [] autocomp;
    public static const long AUTODOMPEVENTID = 1;
    public XDebuggee debuggee = new XDebuggee(this);
    public static XWorkspace workspace;
    QComboBox cfgSel = new QComboBox();
    bool bExternModifyAutoload = false;
    public Map<String, DiagnosisInformation[]> _diagnlist = new Map<String, DiagnosisInformation[]>();
    
    public DiagnosisInformation[] getDiagnosisInformation(String file){
        synchronized (_diagnlist) {
            try{
                return _diagnlist.get(file);
            }catch(Exception e){
                
            }
        }
        return nilptr;
    }
    public IXIntelliSense.IntelliClient inteliclient = new IXIntelliSense.IntelliClient (){
        void diagnosis(String file, DiagnosisInformation[] diags){
            synchronized (_diagnlist) {
            	_diagnlist.put(file,diags);
                DocumentView.notifyDiagnosis(file);
            }
            
        }
        void showMessage(String message){
            
        }
        void notify(String , String){
            
        }
    };
    static ActionRecorder ar = new ActionRecorder();

    static String strAppTitle = "XStudio " + Utils.getVersion() + " build:" + Utils.getAppBuildVersion() + " (" + _system_.getAppVersion() + ")";
    
    onDragListener draglistener = new onDragListener()
    {
        bool onDragEnter(QObject obj, int l,int t,int r,int b) {
            return true;
        }
        bool onDragMove(QObject obj,int l,int t,int r,int b) {
            return true;
        }
        bool onDragLeave(QObject obj,int l,int t,int r,int b) {
            return true;
        }
        void onDrop(@NotNilptr QObject obj,@NotNilptr  Object [] object) {
            if (object.length > 0) {
                try {
                    for (int i =0; i < object.length; i++) {
                        String file = (String)object[0];
                        if (file != nilptr){
                            String ext = file.findExtension();
                            if (ext.equalsIgnoreCase(".xprj")) {
                                loadProject(file);
                            } else {
                                openTextFile(file);
                            }
                        }
                    }

                } catch(Exception e) {

                }
            }
        }
    };

    public WorkspaceController getController()
    {
        return _controller;
    }

    public WorkspaceController _controller = new WorkspaceController()
    {
        public TextEditorController findTextEditor(@NotNilptr String path, bool openIfNotFound) override{
            DocumentView editor = DocumentView.findDocumentWindow(XWorkspace.this,path,openIfNotFound);
            if (editor != nilptr) {
                if (editor.instanceOf(XSourceEditor)){
                    return ((XSourceEditor)editor).getController();
                }
            }
            return nilptr;
        }

        public TextEditorController openTextEditor(@NotNilptr String path)override {
            DocumentView editor = DocumentView.findDocumentWindow(XWorkspace.this,path, true);
            if (editor != nilptr) {
                setActiveSubWindow(editor);
                if (editor.instanceOf(XSourceEditor)){
                    return ((XSourceEditor)editor).getController();
                }
            }
            return nilptr;
        }

        public bool installXep(@NotNilptr String path)override{
            return installCompilerExtension(path);
        }
        
        public TextEditorController createTextEditor()override {
            DocumentView editor = (DocumentView)createSubWnd(true);
            if (editor != nilptr) {
                if (editor.instanceOf(XSourceEditor)){
                    return ((XSourceEditor)editor).getController();
                }
            }
            return nilptr;
        }

        public bool saveFile(@NotNilptr String path)override {
            return DocumentView.findSaveFile(path);
        }

        public bool toggleBreakpointAtLine(@NotNilptr String path, long line, bool bSet)override {
            DocumentView.toggleBreakPointOnFile(XWorkspace.this,path, line, bSet);
            return true;
        }

        public void createDownloadTask(String key, String url, String local, long totalsize, DownloadListener ls, Object tag)override{
            DownloadCenter.createDownload(key,url,local,totalsize,ls,tag);
        }
        
        public int getDownloadTaskProgress(String key)override{
            return DownloadCenter.getTaskProgress(key);
        }
        
        public bool hasDownloadTask(String key)override{
            return DownloadCenter.hasDownloadTask(key);
        }
        
        public void cancelDownloadTask(String key)override{
            DownloadCenter.cancelDownloadTask(key);
        }
        
        public void output(String text, int id) override{
            XWndOutput.Output(text, id);
        }
        public void setStatus(String text)override {
            XStudioApp.statusBar.showStatusMessage(text);
        }

        public int registryOutput(String icon){
            return XWndOutput.registryOutput(icon);
        }
        
        public TextEditorController currentTextEditor() override{
            DocumentView wnd = currentDocumentView();
            if (wnd != nilptr && wnd.instanceOf(XSourceEditor)) {
                return ((XSourceEditor)wnd).getController();
            }
            return nilptr;
        }

        public void setModifyMonitorAutoLoad()override {
            bExternModifyAutoload = true;
        }

        public void restoreModifyMonitorAutoLoad() override{
            bExternModifyAutoload = false;
        }

        public bool addMenu(int mainid, String name,@NotNilptr  String text, String icon,String shortcut, IXPlugin plugin) override{
            return XStudioApp._theApp.menuMgr.addMenu(mainid, name, text, icon, shortcut, plugin);
        }

        public void RunOnUi(UIRunnable r) override{
            runOnUi( new Runnable() {
                void run() {
                    r.run();
                }
            });
        }
        
        public bool createRemoteDebug(String ip, int port)override{
            if (_debugThread != nilptr) {
                return false;
            }
            return connectRemoteDebug(ip, port);
        }
        public bool run()override{
            return Run();
        }
        public bool stopRun()override{
            XWorkspace.this.stopRun();
            return true;
        }
        

        public BuildListener.BuildState buildCurrentProject(BuildListener lis)override{
            return XWorkspace.this.build(lis);
        }
        
        public QMainWindow getMainWindow(){
            return mainWindow;
        }
        
        public IProject getCurrentProject(){
            return currentProject;
        }
        
        public void showStatusMessage(String text){
            StatusBarMgr.showStatusMessage(text);
        }
        public void showWaitProgress(String text){
            StatusBarMgr.showWaitProgress(text);
        }
        public void showProgress(String text, int value){
            StatusBarMgr.showProgress(text,value);
        }
        public void updateProgress(String text, int value){
            StatusBarMgr.updateProgress(text,value);
        }
        public void hideProgress(String text){
            StatusBarMgr.hideProgress(text);
        }
        public void requestReconfigureSystem(){
            XStudioApp._theApp.reconfig();
        }
        
        
        public static class SourceContentImpl : SourceContent{
            String txtContent = nilptr;
            String charset = nilptr;
            String path = nilptr;
            bool bEditing = false;
            
            public SourceContentImpl(@NotNilptr DocumentView wnd){
                if (wnd != nilptr && wnd.instanceOf(XSourceEditor)){
                    XSourceEditor xwnd = (XSourceEditor)wnd;
                    txtContent = xwnd.getTextContent();
                    charset = xwnd.defaultCharset;
                    path = xwnd.getFilePath();
                    bEditing = true;
                }
            }
            
            public SourceContentImpl(@NotNilptr String file){
                txtContent = readFileUTF8(file);
                path = file;
                if (txtContent == nilptr){
                    throw new IllegalArgumentException();
                }
            }
            
            public String readFileUTF8(@NotNilptr String file){
                long hfile = _system_.openFile(file,"r");
                if (hfile != 0 ){
                    long fl = _system_.fileLength(hfile);
                    byte [] data = new byte [fl];
                    _system_.readFile(hfile,data,0,fl);
                    _system_.closeFile(hfile);
                    
                    charset = DocumentView.getCharsetCache(file);
                    
                    if (charset == nilptr){
                        charset = String.detectCharset(data,0,fl);
                    }
                    if (charset == nilptr){
                        return new String(data);
                    }
                    switch(charset){
                        case "ASCII":
                        case "UTF-8":
                        case "UTF8":
                        return new String(data);
                        break;
                        
                        default:
                        return new String(data, 0, fl, charset);
                        break;
                    }
                }
                return nilptr;
            }
            
            public String getContent()override{
                return txtContent;
            }
            
            public String getPath()override{
                return path;
            }
            
            public bool isEditing()override{
                return bEditing;
            }
            
            public String getCharset()override{
                return charset;
            }
            
            public bool updateContent(String content)override{
                bool success =false;
                if (bEditing){
                    DocumentView wnd = DocumentView.findFileWindow(path);
                    if (wnd != nilptr) {
                        if (wnd.instanceOf(XSourceEditor)){
                            ((XSourceEditor)wnd).setText(content);
                            wnd.setModified(true);
                            success = true;
                        }
                    }
                }
                
                if (success == false){
                    Backuper fb = new Backuper(path);
                    long hfile = _system_.openFile(path,"w");
                    if (hfile != 0 ){
                        byte [] data = content.getBytes();
                        if (data != nilptr){                            
                            _system_.writeFile(hfile,data,0,data.length);
                            _system_.closeFile(hfile);
                            success = true;
                            
                        }
                    }
                    if (success == false){
                        fb.restore();
                    }else{
                        fb.complete();
                    }
                }
                return success;
            }
        };
        
        public SourceContent getSourceContent(@NotNilptr String sourcefile)override{
            String _content = nilptr;
            DocumentView wnd = DocumentView.findFileWindow(sourcefile);
            if (wnd != nilptr) {
                 if (wnd.instanceOf(XSourceEditor)){
                    return new SourceContentImpl((XSourceEditor)wnd);
                 }
            }else{
                try{
                    return new SourceContentImpl(sourcefile);
                }catch(Exception e){
                    
                }
            }
            return nilptr;
        }
        
        
    };

    public void setupOnDrag(@NotNilptr QWidget w)
    {
        w.setAcceptDrops(true);
        w.setOnDragListener(draglistener);
    }

    Object xintellisencelock = new Object(), debugThreadLock = new Object(), runThreadLock = new Object();
    public XWorkspace(long handle)
    {
        super(handle);
        workspace = this;
    }

    public void setSlnView(XWndSln wndsln)
    {
        if (wndsln == nilptr){
            return;
        }
        slnView = wndsln;
        wndsln.workspace = this;
    }

    public QMdiSubWindow createSubWnd(bool bshow)
    {
        XSourceEditor wnd = (XSourceEditor)DocumentView.createView(this, nilptr);
        if (wnd.create(this)) {
            if (bshow) {
                wnd.show();
            }
            updateDocumentStatus();
            return wnd;
        }
        return nilptr;
    }

    public XIndexWindow indexPage = nilptr;

    public static void Caution()
    {
        workspace.caution();
    }

    public void toback()
    {
        ar.undo();
    }

    public void tofront()
    {
        ar.redo();
    }

    public static void recordAction(String file, int pos)
    {
        ar.addAction(file, pos);
    }

    public void caution()
    {
        mainWindow.raise();
        mainWindow.setActive(true);
    }

    public void closeIndexPage()
    {
        XIndexWindow p = indexPage;
        indexPage = nilptr;
        
        if (p != nilptr) {
            p.close();
        }
    }
    public void openIndexPage()
    {
        if (indexPage == nilptr) {
            indexPage = new XIndexWindow();
            if (indexPage.create(this) == false) {
                return ;
            }
            setupOnDrag(indexPage);
            setupOnDrag(indexPage.indexPage);
        }
        indexPage.show();
    }

    public static void showDocks(Object state)
    {
        bool []bs = (bool[])state;
        int i = 0;
        XStudioApp._theApp.wndclass.setVisible(bs[i++]);
        XStudioApp._theApp.wndsln.setVisible(bs[i++]);
        XStudioApp._theApp.wndOutput.setVisible(bs[i++]);
        XStudioApp._theApp.wndInfor.setVisible(bs[i++]);
        XStudioApp._theApp.wndStack.setVisible(bs[i++]);
        XStudioApp._theApp.autoWndInfo.setVisible(bs[i++]);
        XStudioApp._theApp.memlookupWnd.setVisible(bs[i++]);
        XStudioApp._theApp.watchWndInfo.setVisible(bs[i++]);
        XStudioApp._theApp.bpWndInfo.setVisible(bs[i++]);
        XStudioApp._theApp.findWnd.setVisible(bs[i++]);
        XStudioApp._theApp.memoryWnd.setVisible(bs[i++]);
        XStudioApp._theApp.logcatWnd.setVisible(bs[i++]);
        XStudioApp._theApp.xDumpWnd.setVisible(bs[i++]);
        XStudioApp._theApp.finddlg.setVisible(bs[i++]);
        PluginsController.showPluginsDocks(true);
    }

    public static Object hideDocks()
    {
        bool []bs = new bool[14];
        int i = 0;

        bs[i++] = XStudioApp._theApp.wndclass.isVisible();
        bs[i++] = XStudioApp._theApp.wndsln.isVisible();
        bs[i++] = XStudioApp._theApp.wndOutput.isVisible();
        bs[i++] = XStudioApp._theApp.wndInfor.isVisible();
        bs[i++] = XStudioApp._theApp.wndStack.isVisible();
        bs[i++] = XStudioApp._theApp.memlookupWnd.isVisible();
        bs[i++] = XStudioApp._theApp.autoWndInfo.isVisible();
        bs[i++] = XStudioApp._theApp.watchWndInfo.isVisible();
        bs[i++] = XStudioApp._theApp.bpWndInfo.isVisible();
        bs[i++] = XStudioApp._theApp.findWnd.isVisible();
        bs[i++] = XStudioApp._theApp.memoryWnd.isVisible();
        bs[i++] = XStudioApp._theApp.logcatWnd.isVisible();
        bs[i++] = XStudioApp._theApp.xDumpWnd.isVisible();
        bs[i++] = XStudioApp._theApp.finddlg.isVisible();
        
        XStudioApp._theApp.wndclass.setVisible(false);
        XStudioApp._theApp.wndsln.setVisible(false);
        XStudioApp._theApp.wndOutput.setVisible(false);
        XStudioApp._theApp.wndInfor.setVisible(false);
        XStudioApp._theApp.wndStack.setVisible(false);
        XStudioApp._theApp.autoWndInfo.setVisible(false);
        XStudioApp._theApp.watchWndInfo.setVisible(false);
        XStudioApp._theApp.bpWndInfo.setVisible(false);
        XStudioApp._theApp.findWnd.setVisible(false);
        XStudioApp._theApp.memoryWnd.setVisible(false);
        XStudioApp._theApp.logcatWnd.setVisible(false);
        XStudioApp._theApp.xDumpWnd.setVisible(false);
        XStudioApp._theApp.memlookupWnd.setVisible(false);
        XStudioApp._theApp.finddlg.setVisible(false);
        PluginsController.showPluginsDocks(false);
        return bs;
    }

    public void thread_updateWindowTitle(int status)
    {
        runOnUi(new Runnable() {
            void run()override {
                updateWindowTitle(status);
            }
        });
    }

    public void updateWindowTitle(int status)
    {
        String txtDebug = "";
        if (status == 1) {
            txtDebug = " - 调试";
        } else if (status == 2) {
            txtDebug = " - 运行";
        } else if (status == 3) {
            txtDebug = " - 远程调试";
        }
        Project _project = currentProject;
        if (_project != nilptr) {
            mainWindow.setWindowTitle(_project.getName() + "[" + _project.getLanguage() +  "]" + txtDebug + " - " + strAppTitle);
        } else {
            mainWindow.setWindowTitle(strAppTitle + txtDebug);
        }

    }
    public Project loadProject(@NotNilptr String file)
    {
        lastBuildSuccess = false;
        if (currentProject != nilptr) {
            QMessageBox.Critical("注意", "当前工作空间已经打开一个项目, 请先关闭已有项目", QMessageBox.Ok, QMessageBox.Ok);
            return nilptr;
        }
        Project project = new Project();
        if (project.loadWorkspace(file, false)) {
            Recently.putRecent(project.getName(), file);
            setCurrentProject(project);
            XWndClass.prepare(project);
            updateWindowTitle(0);
            
            XMenuManager.setProjectLoaded(true);
            closeIndexPage();

            String text = project.getComment();
            if (text != nilptr && text.length() > 0) {
                showComment();
            }
            Utils.chechUpdate(1);
            return project;
        } else {
            QMessageBox.Critical("失败", "不是有效的项目文件:" + file, QMessageBox.Ok, QMessageBox.Ok);
        }
        return nilptr;
    }

    public WordRecognizer getWordRecognizer(String filePath){
        Project proj_c = currentProject;
        if (proj_c != nilptr){
            IXIntelliSense ixs = proj_c.getIntelliSense();
            if (ixs != nilptr){
                return ixs.getWordRecognizer(filePath);
            }
        }
        return nilptr;
    }
    
    public bool openTextFile(@NotNilptr String file)
    {
        return XSourceEditor.openForFile(this, file);
    }
    public bool openTextFileInfo(@NotNilptr String file, int line,int column)
    {
        return XSourceEditor.openForFileInfo(this, file, line, column,nilptr, nilptr);
    }
    public bool closeFor(String file)
    {
        if (file != nilptr){
            return DocumentView.closeForFile(file);
        }
        
        return false;
    }

    public TextEditorPlugin getEditorPlugin()
    {
        Project curproj = currentProject;
        if (curproj != nilptr) {
            IXPlugin plugin = curproj.getProjectPlugin();
            if (plugin != nilptr) {
                return plugin.getTextEditorPlugin();
            }
        }
        return nilptr;
    }

    public IXPlugin getCurrentProjectPlugin()
    {
        Project curproj = currentProject;
        if (curproj != nilptr) {
            return curproj.getProjectPlugin();
        }
        return nilptr;
    }

    public ProjectPropInterface getCurrentProjectProp()
    {
        Project curproj = currentProject;
        if (curproj != nilptr) {
            return curproj.getPropInterface();
        }
        return nilptr;
    }
    
    public void setCurrentProject(Project project)
    {
        if (project != nilptr){
            currentProject = project;
            
            slnView.loadProject(project);

            Map.Iterator<String, Configure> iterator =
                project.configures.iterator();

            cfgSel.clear();

            String [] items = new String[project.configures.size()];
            int pos = 0;
            while (iterator.hasNext()) {
                Configure cfg_ = iterator.getValue();
                if (cfg_ != nilptr){
                    items[pos++] = cfg_.getName();
                }
                iterator.next();
            }

            cfgSel.addItems(items);
        }
    }

    public void refreshConfigures()
    {
        cfgSel.clear();
        Map.Iterator<String, Configure> iterator =
            currentProject.configures.iterator();

        String [] items = new String[currentProject.configures.size()];
        int pos = 0;
        while (iterator.hasNext()) {
            Configure cfg_ = iterator.getValue();
            if (cfg_ != nilptr){
                items[pos++] = cfg_.getName();
            }
            iterator.next();
        }

        cfgSel.addItems(items);
    }

    public bool requestQuit()
    {
        bool bclose = true;
        if (currentProject != nilptr) {
            if (currentProject.isModified()) {
                int rt = QMessageBox.Question("提示","项目[" + currentProject.getName() + "]已发生更改, 是否保存?",  QMessageBox.Cancel | QMessageBox.No | QMessageBox.Save, QMessageBox.Save);
                if (rt == QMessageBox.Save) {
                    saveProject();
                    bclose = true;
                } else if (rt == QMessageBox.No) {
                    bclose = true;
                } else if (rt == QMessageBox.Cancel) {
                    bclose = false;
                }
            }
            if (bclose) {
                bclose = closeProject();
            }
        }
        
        if (bclose){
            if (DownloadCenter.hasDownload()){
                int rt = QMessageBox.Question("提示","有下载任务在进行中,是否继续退出?",  QMessageBox.Yes | QMessageBox.No , QMessageBox.No);
                if (rt == QMessageBox.Yes){
                    DownloadCenter.stopAlldownload();
                }else{
                    bclose = false;
                    StatusBarMgr.showDLMgr();
                }
            }
        }
        return bclose;
    }
    
    public void findReference(){
        
    }
    
    public void renameObject(){
        
    }
    
    public void openOutput()
    {
        if (currentProject != nilptr) {
            List<IProjectPlugin> ips = PluginsController.getProjectPluginList();
            
            String uri = nilptr;
            
            if (ips != nilptr){
                List.Iterator<IProjectPlugin> iip = ips.iterator();
                while (iip.hasNext()){
                    IProjectPlugin ip = iip.next();
                    uri = ip.getTargetPath(currentProject);
                    if (uri != nilptr){
                        break;
                    }
                }
            }
            
            if (uri == nilptr){
                uri = currentProject.getOutputDir();
            }else{
                uri = uri.findVolumePath();
            }
            
            if (uri != nilptr) {
                QCore.openLocal(String.formatPath(uri,false));
            }
        }
    }
    public bool showProperites(String args)
    {
        if (currentProject != nilptr) {
            QDialog newDlg = new QDialog();
            if (newDlg.load(UIManager.getUIData(__xPackageResource("ui/properites.ui"))) == false) {
                return false;
            }
            XProperites wizard = new XProperites(currentProject, args);
            wizard.attach(newDlg);
            return true;
        }
        return false;
    }

    public void sendFeedback()
    {
        TextDetail td = nilptr;
        td = new TextDetail(new TextDetail.closeListener() {
            void onClose(@NotNilptr String text, bool updated) {
                String content = text.trim(true);
                if (content.length() > 0) {
                    byte[] data = content.getBytes();
                    content = Base64.encodeToString(data, 0, data.length, false);
                    content = "$(" + (content.replace("+", ".").replace("/", "_")) + ")";
                    String fburl = String.format("http://112.124.120.113:8080/dcbinterface/api/xsendfeedback?os=%d&content=%s", _system_.getPlatformId(), content);

                    new Thread() {
                        void run()override {
                            HttpRequest req = new HttpRequest();
                            req.get(fburl, 10000, false);
                        }
                    } .start();
                }
            }

            void onCreate() {
                td.centerScreen();
            }
        });

        td.create("发送反馈 - 写下内容后关闭此窗口即可(1000字以内)", "", nilptr, false);
    }

    public void showComment()
    {
        if (currentProject != nilptr) {
            String szComment = currentProject.getComment();

            TextDetail td = nilptr;
            td = new TextDetail(new TextDetail.closeListener() {
                void onClose(@NotNilptr String text, bool updated) {
                    if (currentProject != nilptr && updated) {
                        currentProject.setComment(text);
                    }
                }

                void onCreate() {
                    QPoint pt = mainWindow.mapToGlobal(mainWindow.width() - 400, mainWindow.height() - 300);
                    td.move(pt.x - 10, pt.y - 25);
                }
            });

            td.create(currentProject.getName() + " - 项目注释", szComment, nilptr, false);

        }
    }

    public static void setProjectBuilding(bool bb){
        workspace.cfgSel.setEnabled(!bb);
        XMenuManager.setProjectBuilding(bb);
    }
    
    public bool showSetting()
    {
        QDialog newDlg = new QDialog();
        if (newDlg.load(UIManager.getUIData(__xPackageResource("ui/setting.ui"))) == false) {
            return false;
        }
        Setting wizard = new Setting();
        wizard.attach(newDlg);
        return true;
    }

    public static bool isDebugging()
    {
        return _debugThread != nilptr;
    }

    public bool debugPrepare(Stream stream)
    {
        synchronized(debugThreadLock) {
            if (_debugThread == nilptr) {
                XWorkspace.updateDebugStatus(true);
                /*if (false == debuggee.createDebugServer(_builder, iprop)) {
                    _builder.OutputText("\n无法创建调试端口!\n", 1);
                } else*/ {
                    _debugThread = new Thread() {
                        void run() {
                            debuggee.debug_start(stream);
                            XWorkspace.updateDebugStatus(false);
                            synchronized(debugThreadLock) {
                                _debugThread = nilptr;
                            }
                        }
                    };
                }
                return true;
            }
        }
        return false;
    }

    public void debugClose()
    { 
        synchronized(debugThreadLock) {
            if (_debugThread != nilptr) {
                debuggee.debugClose();
            }
            XWorkspace.updateDebugStatus(false);
            _debugThread = nilptr;
        }
    }

    public bool debug()
    {
        synchronized(debugThreadLock) {
            if (_debugThread != nilptr) {
                _debugThread.start();
                return true;
            }
        }
        return false;
    }

    public void setStackView(XStackInfor view)
    {
        stackWnd = view;
    }

    public void doOpen()
    {
        String file = Recently.getLastPath();
        file = QFileDialog.getOpenFileName("打开文件", file, getAllFilter(), this);
        openFile(file);
    }

    public static String getAllFilter(){
        String szf = "X 项目(*.xprj);;Make File(makefile);;";
        String sztail = "html 网页(*.htm *.html);;纯文本文件 (*.txt);;其他文件 (*.* *)";
        
        String szplugin = ProjectPropManager.getAllExtensionFilter();
        return szf + szplugin + sztail;
    }

    public void openFile(String file)
    {
        if (file != nilptr && file.length() > 0) {
            String exts = file.findExtension();

            if (exts.equals(".xprj") == false) {
                openTextFile(file);
            } else {
                loadProject(file);
            }
            updateDocumentStatus();
        }
    }

    public bool createProject()
    {
        /*Project project = new Project();
        project.createProject("helloworld");*/

        QDialog newDlg = new QDialog();
        if (newDlg.load(UIManager.getUIData(__xPackageResource("ui/newproj.ui"))) == false) {
            return false;
        }
        WizardDialog wizard = new WizardDialog(this);
        wizard.attach(newDlg);
        return true;
    }

    public void gotoDef()
    {
        DocumentView wnd = currentDocumentView();
        if (wnd != nilptr) {
            wnd.gotoCursordef();
        }
    }

    public void closeCurrentDocument()
    {
        DocumentView wnd = currentDocumentView();
        if (wnd != nilptr) {
            wnd.close();
        }
    }

   public  QWidget currentSubWindow()override
    {
        QWidget win = super.currentSubWindow();
        if (win == indexPage || win == nilptr) {
            return nilptr;
        }
        return win;
    }
    
    public static DocumentView CurrentDocumentView(){
        return workspace.currentDocumentView();
    }
    
    public static XSourceEditor CurrentSourceEditorView(){
        return workspace.currentSourceEditorView();
    }
    
    public  XSourceEditor currentSourceEditorView()
    {
        try {
            return (XSourceEditor)(currentSubWindow());
        } catch(Exception e) {

        }
        return nilptr;
    }
    
    public  DocumentView currentDocumentView()
    {
        try {
            return (DocumentView)(currentSubWindow());
        } catch(Exception e) {

        }
        return nilptr;
    }
    
    public void saveFile()
    {
        try {
            DocumentView wnd = currentDocumentView();
            if (wnd != nilptr) {
                wnd.saveFile();
            }
        } catch(Exception e) {

        }
    }

    public void saveFileAs()
    {
        DocumentView wnd = currentDocumentView();
        if (wnd != nilptr) {
            wnd.saveFileAs();
        }
    }
    public void saveProject()
    {
        currentProject.save();
    }

    public void updateDocumentStatus()
    {
        Object win = currentSubWindow();
        XMenuManager.setDocumentOpened(win != nilptr && win != indexPage);
    }
    public bool isCurrentProjectEmpty()
    {
        return currentProject == nilptr;
    }
    public String currentProjectName()
    {
        if (currentProject != nilptr) {
            return currentProject.getName();
        }
        return nilptr;
    }
    public String currentProjectDir()
    {
        if (currentProject != nilptr) {
            return currentProject.getProjectDir();
        }
        return nilptr;
    }
    public bool closeProject()
    {
        if (currentProject != nilptr) {
            IXIntelliSense xintels = currentProject.getIntelliSense();
            if (xintels != nilptr) {
                xintels.close();
            }

            int c = currentProject.getSourceFileCount();
            for (int i =0; i < c; i++) {
                if (DocumentView.editorMgr.size() == 0){
                    break;
                }
                closeFor(currentProject.getSourcePath(i));
            }

            if (isDebugging()) {
                int rt = QMessageBox.Question("注意", "调试器正在运行, 是否关闭调试器并退出?", QMessageBox.Ok | QMessageBox.Cancel, QMessageBox.Cancel);
                if (rt == QMessageBox.Cancel) {
                    return false;
                }
            }

            stopRun();
            cfgSel.clear();
            slnView.clear();
            _builder.clearAll(false);
            XWndClass.wndClass.clear();
            currentProject.close();
            currentProject = nilptr;
            updateWindowTitle(0);
            XMenuManager.setProjectLoaded(false);
            ar.clear();

            if (Setting.welcomeOnClose()){
                openIndexPage();
            }
            return true;
        } else {
            QMessageBox.Critical("注意", "当前工作空间没有打开一个项目", QMessageBox.Ok, QMessageBox.Ok);
        }
        return true;
    }

    public void openExtMgr(){
        QDialog newDlg = new QDialog();
        if (newDlg.load(UIManager.getUIData(__xPackageResource("ui/extmgr.ui"))) == false) {
            return ;
        }
        ExtensionManager extmgrwin = new ExtensionManager();
        extmgrwin._workspace = this;
        extmgrwin.attach(newDlg);

    }
    
    public bool showAllWindows()
    {
        QDialog newDlg = new QDialog();
        if (newDlg.load(UIManager.getUIData(__xPackageResource("ui/windows.ui"))) == false) {
            return false;
        }
        Windows winlist = new Windows();
        winlist._workspace = this;
        winlist.attach(newDlg);

        return true;
    }

    public bool saveAllFile()
    {
        bool bSaveModified = false;
        setIntelliSensePaused(true, false);
        if (currentProject != nilptr) {
            bSaveModified = currentProject.isModified();
            if (bSaveModified) {
                currentProject.save();
            }
            for (int i =0, c = currentProject.getSourceFileCount(); i < c; i++) {
                String file = currentProject.getSourcePath(i);
                
                if (file != nilptr ) {
                    DocumentView wnd =  DocumentView.findDocumentWindow(nilptr, file, false);
                    if (wnd != nilptr) {
                        //wnd.resetErrorPoint();
                        
                        if (wnd.isModified()) {
                            if (  wnd.saveFile()){
                                XStudioApp.statusBar.showStatusMessage(file + "已保存.");
                                bSaveModified = true;
                            }
                        }
                    }
                }
            }
        }
        setIntelliSensePaused(false, !bSaveModified);
        return bSaveModified;
    }

    public void cleanup()
    {
        if (currentProject != nilptr) {
            cleanup_project(_builder);
        }
    }

    bool lastBuildSuccess = false;

    public void buildStop(){
        Project pj = currentProject;
        if (pj != nilptr){
            pj.buildStop(_builder);
        }
    }
    public BuildListener.BuildState build(BuildListener lis)
    {
        if (currentProject != nilptr) {
            bool bNeedCompile = false;
            String target = currentProject.getOutputTarget();
            if (target != nilptr){
                if (Setting.isAutoSave()) {
                    bNeedCompile = saveAllFile();
                    if (bNeedCompile == false) {
                        if ((XPlatform.existsSystemFile(target) == false) || currentProject.detectSourcesModified()) {
                            bNeedCompile = true;
                        }
                    }
                } else {
                    bNeedCompile = true;
                }

                if (bNeedCompile || (lastBuildSuccess == false)) {
                    build_project(_builder, new BuildListener() {
                        void onBuild(bool b) {
                            lastBuildSuccess = b;
                            if (lis != nilptr){
                                lis.onBuild(b);
                            }
                        }
                    }, nilptr);
                    return BuildListener.BuildState.BuildPending;
                } else {
                    _builder.OutputText(target + "\n自上次编译以来没有检测到任何改动,请使用[清理]命令后重新编译.\n", 0);
                }
            }
            return BuildListener.BuildState.BuildSkip;
        }else{
            return BuildListener.BuildState.BuildFailed;
        }
    }

    /*void updateMd5(){
    	Project cpj = currentProject;
    	if (cpj != nilptr){
    		cpj.updateMd5s();
        }
    }*/

    public void generateMake()
    {
        Project _project = getCurrentProject();

        if (_project != nilptr) {

            String file = String.formatPath(_project.getProjectDir().appendPath("Makefile"), false);

            if (_system_.fileExists(file)) {
                if (QMessageBox.Warning("注意","文件" + file + "已存在,将覆盖现有文件,是否继续?",QMessageBox.Yes | QMessageBox.Cancel,QMessageBox.Cancel) == QMessageBox.Cancel) {
                    return ;
                }
            }

            ProjectPropInterface iface = _project.getPropInterface();
            
            if (iface != nilptr){
                String filecontent = iface.generateMake(_project,_project.getCurrentConfig());
                if (filecontent != nilptr){
                    String template;

                    try {
                        FileOutputStream fos = new FileOutputStream(file);
                        byte [] data = filecontent.getBytes();
                        fos.write(data);
                        fos.close();
                    } catch(Exception e) {
                        QMessageBox.Critical("错误","无法写入文件:" + file,QMessageBox.Ok,QMessageBox.Ok);
                    }
                    XWndOutput.Output("\n已生成:" + file + "\n", 0);
                }else{
                    XWndOutput.Output("\n不能生成:" + file + "\n", 0);
                }
                
            }
        }
    }

    public void installPlugin(){
        String []files = QFileDialog.getOpenFileNames("浏览文件", nilptr,  "XStudio 插件(*.xsp)", this);
        if (files != nilptr && files.length > 0) {
            closeIndexPage();
            int succcnt = 0;
            for (int i = 0; i < files.length; i++) {
                String file = String.formatPath(files[i], false);
                _builder.OutputText("安装:" + file + " ...\n", 0);
                if (installPlugin(file)){
                    succcnt++;
                }
            }
            _builder.OutputText("已安装:" + succcnt + "插件\n", 0);
            PluginsController.initPlugins(XStudioApp._theApp._xstudio_controller);
        }
    }
    
    public void installCompileExt()
    {
        String []files = QFileDialog.getOpenFileNames("浏览文件", nilptr,  "xlang 编译器扩展包(*.xep)", this);
        if (files != nilptr && files.length > 0) {
            closeIndexPage();
            for (int i = 0; i < files.length; i++) {
                String file = String.formatPath(files[i], false);
                _builder.OutputText("安装:" + file + " ...\n", 0);
                installCompilerExtension(file);
            }
            _builder.OutputText("已安装:" + files.length + "个编译扩展包\n", 0);
        }
    }

    public bool writeCompileConfig(String content)
    {
        String file = _system_.getAppDirectory();
        file = file.appendPath("config").appendPath("xlang.ext");

        JsonObject root;

        try {
            FileInputStream fis = new FileInputStream(file);
            byte[] data = fis.read();
            fis.close();
            root = new JsonObject(new String(data));
        } catch(Exception e) {
            root = new JsonObject();
        }

        try {
            JsonObject extroot = new JsonObject(content);
            JsonArray xcross = extroot.getArray("xcross");
            JsonArray archs = extroot.getArray("arch");

            if (xcross != nilptr && archs != nilptr) {
                if (root.has("项目属性")) {
                    JsonObject projroot = (JsonObject)root.get("项目属性");
                    if (projroot != nilptr){
                        JsonObject xcross_root = (JsonObject)projroot.get("目标操作系统:ostype");
                        JsonObject arch_root = (JsonObject)projroot.get("处理器架构:wtype");
                        
                        if (xcross_root != nilptr){
                            JsonArray xlist = (JsonArray)xcross_root.get("list");
                            if (xlist != nilptr){
                                for (int i = 0, c = xcross.length(); i < c; i++) {
                                    xlist.put(xcross.getString(i));
                                }
                            }
                        }
                        if (arch_root != nilptr){
                            JsonArray alist = (JsonArray)arch_root.get("list");
                            if (alist != nilptr){
                                for (int i = 0, c = archs.length(); i < c; i++) {
                                    alist.put(archs.getString(i));
                                }
                            }
                        }
                    }
                } else {

                    JsonObject proj_root = new JsonObject();

                    JsonObject xcross_root = new JsonObject();
                    xcross_root.put("type", "stringlist");

                    xcross_root.put("list", xcross.clone());


                    JsonObject arch_root = new JsonObject();
                    arch_root.put("type", "stringlist");
                    arch_root.put("list", archs.clone());

                    proj_root.put("目标操作系统:ostype", xcross_root);
                    proj_root.put("处理器架构:wtype", arch_root);

                    root.put("项目属性", proj_root);
                }

                FileOutputStream fos = new FileOutputStream(file);

                fos.write(root.toString(true).getBytes());
                
                fos.close();
                _builder.OutputText("安装扩展: 操作系统支持:" + xcross.toString(false) + ", 架构支持:" + archs.toString(false) + "\n", 0);
                return true;
            }
        } catch(Exception e) {

        }
        return false;
    }

    public bool installCompilerExtension(@NotNilptr String zfile)
    {

        FileInputStream fis;
        String dir = _system_.getAppDirectory().appendPath("bin");

        try {
            fis = new FileInputStream(zfile);
        } catch(Exception e) {
            return false;
        }

        bool bSuccess = true;
        ZipArchive zs = new ZipArchive();
        if (zs.open(fis)) {
            int c = zs.getEntriesCount();
            for (int i =0; i < c; i ++) {
                ZipEntry entry = zs.getEntry(i);
                if (bSuccess == false) {
                    break;
                }
                
                if (entry != nilptr){
                    String entryName = entry.getName();

                    String path = String.formatPath(dir.appendPath(entryName), false);

                    if (entry.isDirectory() == false) {
                        ZipFile file = entry.getFile();

                        byte []buf = new byte[1024];
                        int rd = 0;
                        if (file.open()) {
                            if (entryName.equals("config")) {
                                String content = "";
                                while ((rd = file.read(buf, 0, 1024)) != 0) {
                                    content = content + new String(buf, 0, rd);
                                }
                                writeCompileConfig(content);
                            } else {
                                long filehandler = _system_.openFile(path, "w");
                                if (filehandler != 0) {
                                    while ((rd = file.read(buf, 0, 1024)) != 0) {
                                        _system_.writeFile(filehandler, buf, 0, rd);
                                    }
                                    _system_.closeFile(filehandler);
                                } else {
                                    bSuccess = false;
                                }
                            }
                            file.close();
                        } else {
                            bSuccess = false;
                        }
                    } else {
                        _system_.mkdir(path);
                    }
                }
            }
            zs.close();
        } else {
            bSuccess = false;
        }
        fis.close();
        return bSuccess;
    }

    public static bool mkdirs(String path){
        if (path == nilptr){
            return false;
        }
        if (XPlatform.existsSystemFile(path) == false){
            if (XPlatform.mkdir(path) == false){
                mkdirs(path.findVolumePath());
                return XPlatform.mkdir(path);
            }
        }
        return true;
    }
    
    public bool installPlugin(@NotNilptr String zfile)
    {
        String plugins_path = nilptr;
        
        FileInputStream fis;
        String dir = _system_.getAppDirectory().appendPath("plugins");

        try {
            fis = new FileInputStream(zfile);
        } catch(Exception e) {
            return false;
        }

        bool bSuccess = true;
        ZipArchive zs = new ZipArchive();
        if (zs.open(fis)) {
            int c = zs.getEntriesCount();
            for (int i =0; i < c; i ++) {
                ZipEntry entry = zs.getEntry(i);
                if (bSuccess == false) {
                    break;
                }
                if (entry != nilptr){
                    String entryName = entry.getName();

                    String path = String.formatPath(dir.appendPath(entryName), false);

                    if (entry.isDirectory() == false) {
                        ZipFile file = entry.getFile();

                        byte []buf = new byte[1024];
                        int rd = 0;
                        if (file.open()) {
                            if (entryName.lower().endsWith(".slx")){
                                plugins_path = path;
                            }
                            
                            String vpath = path.findVolumePath();
                            
                            if (vpath.length() > 0){ 
                                mkdirs(vpath);
                            }
                            
                            long filehandler = _system_.openFile(path, "w");
                            if (filehandler != 0) {
                                while ((rd = file.read(buf, 0, 1024)) != 0) {
                                    _system_.writeFile(filehandler, buf, 0, rd);
                                }
                                _system_.closeFile(filehandler);
                            } else {
                                bSuccess = false;
                            }
                            
                            file.close();
                        } else {
                            bSuccess = false;
                        }
                    } else {
                        _system_.mkdir(path);
                    }
                }
            }
            zs.close();
        } else {
            bSuccess = false;
        }
        fis.close();
        
        if (bSuccess && plugins_path != nilptr){
            loadPlugin(plugins_path);
        }
        
        return bSuccess;
    }
    
    public void loadPlugin(String path){
        try {
            _system_.loadLibrary(path);
        } catch(Exception e) {

        }
    }
    
    public void  generateSource()
    {
        if (currentProject != nilptr) {
            String path = QFileDialog.getFolderPath("选择输出目录", currentProjectDir(), nilptr, this);

            if (path != nilptr && path.length() > 0) {
                XlangProjectProp.BuildParams params = new XlangProjectProp.BuildParams();
                params.forgs = true;
                params.output_source = path;
                if (QMessageBox.Question("注意", "该目录下与生成目标同名的文件将会被覆写!", QMessageBox.Ok | QMessageBox.Cancel, QMessageBox.Cancel) == QMessageBox.Ok) {
                    if (currentProject != nilptr) {
                        saveAllFile();
                        build_project(_builder, nilptr, params);
                    } else {
                        QMessageBox.Critical("错误", "当前工作空间未载入一个项目.", QMessageBox.Ok, QMessageBox.Ok);
                    }
                }
            }
        }
    }

    public void build_project(IBuilder _builder, BuildListener l, XlangProjectProp.BuildParams params)
    {
        if (currentProject != nilptr) {
            
            if (isDebugging() || _run_thread != nilptr) {
                int rt = QMessageBox.Question("注意", "程序正在运行, 是否关闭并继续?", QMessageBox.Ok | QMessageBox.Cancel, QMessageBox.Cancel);
                if (rt == QMessageBox.Cancel) {
                    lastBuildSuccess = false;
                    return ;
                }
                stopRun();
            }
            currentProject.build(_builder, l, params);
        }
    }

    public void cleanup_project(IBuilder _builder)
    {
        if (currentProject != nilptr) {
            if (isDebugging() || _run_thread != nilptr) {
                int rt = QMessageBox.Question("注意", "程序正在运行, 是否关闭并继续?", QMessageBox.Ok | QMessageBox.Cancel, QMessageBox.Cancel);
                if (rt == QMessageBox.Cancel) {
                    return ;
                }
                stopRun();
            }
            currentProject.cleanup(_builder);
        }
    }

    public void createConfigToolbar()
    {
        QToolBar qtb = (QToolBar)mainWindow.attachByName(new QToolBar(), "toolBar_3");
        
        if (qtb != nilptr){
            QAction actiondebug = (QAction)mainWindow.findByName("actiondebug");

            cfgSel.create();

            if (actiondebug != nilptr) {
                qtb.insertWidget(actiondebug, cfgSel);
            } else {
                qtb.addWidget(cfgSel);
            }

            cfgSel.setOnComboBoxEventListener(
            new onComboBoxEventListener() {
                void onItemSelected(QObject obj, int id) {
                    if (currentProject != nilptr) {
                        String selcfgname = cfgSel.getCurrentText();
                        if (selcfgname.length() > 0){
                            currentProject.setCurrentConfigure(selcfgname, true);
                        }
                    }
                }
            }
            );
        }
    }


    public void notifyFileChange(@NotNilptr String path)
    {
        runOnUi(new Runnable() {
            void run()override {
                DocumentView.notifyFileChange(XWorkspace. this, path, bExternModifyAutoload);
            }
        });
    }

    public void setMainWindow(QMainWindow w)
    {
        mainWindow = w;
        createConfigToolbar();
        qfsw.create(this);
        qfsw.setOnFileSystemChangeListener(
        new onFileSystemChangeListener() {
            void onFileChanged(QObject,@NotNilptr String path) {
                _system_.sleep(20);
                notifyFileChange(path);
            }

            void onDirChange(QObject,@NotNilptr String path) {

            }
        });
        updateWindowTitle(0);
    }

    public void toggleBreakpoint()
    {
        DocumentView wnd = currentDocumentView();
        if (wnd != nilptr) {
            wnd.toggleBreakpoint();
        }
    }
    public void UnDo()
    {
        DocumentView wnd = currentDocumentView();
        if (wnd != nilptr) {
            wnd.UnDo();
        }
    }

    public void ReDo()
    {
        DocumentView wnd = currentDocumentView();
        if (wnd != nilptr) {
            wnd.ReDo();
        }
    }

    public void insertNewLine()
    {
        DocumentView wnd = currentDocumentView();
        if (wnd != nilptr) {
            wnd.insertNewLine();
        }
    }
    
    public void appendNewLine()
    {
        DocumentView wnd = currentDocumentView();
        if (wnd != nilptr) {
            wnd.appendNewLine();
        }
    }

    public void convertCharset(){
        DocumentView wnd = currentDocumentView();
        if (wnd != nilptr) {
            wnd.convertCharset();
        }
    }
    
    public void UpdateCodepage(){
        DocumentView wnd = currentDocumentView();
        if (wnd != nilptr) {
            wnd.UpdateCodepage();
        }
    }
    
    public void Copy()
    {
        if (XWndOutput.inFocus()){
            XWndOutput.outputWnd.Copy();
            return;
        }
        DocumentView wnd = currentDocumentView();
        if (wnd != nilptr) {
            wnd.Copy();
        }
    }

    public void Paste()
    {
        DocumentView wnd = currentDocumentView();
        if (wnd != nilptr) {
            wnd.Paste();
        }
    }

    public void Cut()
    {
        DocumentView wnd = currentDocumentView();
        if (wnd != nilptr) {
            wnd.Cut();
        }
    }

    public void Delete()
    {
        DocumentView wnd = currentDocumentView();
        if (wnd != nilptr) {
            wnd.Delete();
        }
    }

    public void DeleteCurLine()
    {
        DocumentView wnd = currentDocumentView();
        if (wnd != nilptr) {
            wnd.DeleteCurLine();
        }
    }

    public Project getCurrentProject()
    {
        return currentProject;
    }

    public void findAgain()
    {
        if (XFindDlg.bFindAll == false) {
            XFindDlg._finddlg.findNext();
        } else {
            XFindresWnd.findWnd.nextFind();
        }
    }

    public void gotoLine()
    {
        InputDialog.requestInput(new InputDialog.onInputListener() {
            bool onInputOk(@NotNilptr String text)override {
                if (text.length() == 0 || text.isDigit() == false) {
                    QMessageBox.Critical("错误", "输入了不正确的行号", QMessageBox.Ok, QMessageBox.Ok);
                    return false;
                }
                int line = text.parseInt();
                DocumentView wnd = (DocumentView)XWorkspace.this.currentSubWindow();

                if (wnd == nilptr) {
                    QMessageBox.Critical("提示", "当前没有正在编辑的文件", QMessageBox.Ok, QMessageBox.Ok);
                    return true;
                }

                wnd.goto(line - 1, 1);
                return true;
            }
            bool onInputCancel()override {
                return true;
            }
            String getTitle()override {
                return "转到行";
            }
            String getTips()override {
                return "输入行号:";
            }
            String getDefault()override {
                return "";
            }
        });
    }

    public void FindReplace()
    {
        QMainWindow mwin = mainWindow;
        XFindDlg findDlg = XFindDlg._finddlg;
        findDlg.show();
        findDlg.raise();
        String text = nilptr;
        DocumentView wnd = currentDocumentView();
        if (wnd != nilptr) {
            text = wnd.getSelectedText();
        }
        findDlg.setDefaultFindText(text);
    }

    public void stopRun()
    {
        synchronized(runThreadLock) {
            if (_run_thread != nilptr) {
                XWorkspace.this.currentProject.stopRun();
            } else if (isDebugging()) {
            
                int rt = QMessageBox.Question("提示","是否终止运行调试客户端程序?, 点 [No] 仅分离调试器, 客户端程序将继续运行.",  QMessageBox.Yes | QMessageBox.No , QMessageBox.Yes);
                
                if (rt == QMessageBox.Yes){
                    debuggee.dbgSendExit();
                    _system_.sleep(50);
                }
                debuggee.close();
            }
        }
    }

    public void savesaTempWithDescr(String tempName)
    {
        if (currentProject != nilptr) {
            InputDialog.requestInput(new InputDialog.onInputListener() {
                bool onInputOk(@NotNilptr String text)override {
                    bool b = currentProject.saveAsTemplate(tempName, text);
                    ProgressView pv = ProgressView.showWait(-1);
                    if (pv != nilptr){
                        pv.centerScreen();
                        pv.showResult(true,b);
                        pv.setTitleText(b ? "已存为模板" : "保存失败");
                        pv.dismissAfter(1000);
                    }
                    return true;
                }
                bool onInputCancel()override {
                    return true;
                }
                String getTitle()override {
                    return "输入";
                }
                String getTips()override {
                    return "输入模板描述:";
                }
                String getDefault()override {
                    return currentProject.getName();
                }
            });
        }
    }

    public void saveProjectAsTemplate()
    {

        if (currentProject != nilptr) {
            InputDialog.requestInput(new InputDialog.onInputListener() {
                bool onInputOk(@NotNilptr String text)override {
                    if (text.length() == 0) {
                        QMessageBox.Critical("错误", "项目名称不合法", QMessageBox.Ok, QMessageBox.Ok);
                        return false;
                    }
                    savesaTempWithDescr(text);
                    return true;
                }
                bool onInputCancel()override {
                    return true;
                }
                String getTitle()override {
                    return "输入";
                }
                String getTips()override {
                    return "输入模板名称:";
                }
                String getDefault()override {
                    return currentProject.getName();
                }
            });
        }
    }
    
    
    public bool connectRemoteDebug(String url, int port)
    {
        synchronized(debugThreadLock) {
            if (_debugThread == nilptr) {
                closeIndexPage();
                XWorkspace.updateDebugStatus(true);

                _debugThread = new Thread() {
                    void run() {
                        thread_updateWindowTitle(3);
                        
                        if (false == debuggee.connect(_builder, url, port)) {
                            _builder.OutputText("\n无法连接到远程调试端口!\n", 1);
                        }

                        XWorkspace.updateDebugStatus(false);
                        synchronized(debugThreadLock) {
                            _debugThread = nilptr;
                        }
                        thread_updateWindowTitle(0);
                    }
                };
                _debugThread.start();
                return true;
            }
        }
        return false;
    }


    public bool requestDebug(Stream stream)
    {
        synchronized(debugThreadLock) {
            if (_debugThread == nilptr) {
                runOnUi(new Runnable(){
                    void run()override{
                        closeIndexPage();
                    }
                });
                
                XWorkspace.updateDebugStatus(true);

                _debugThread = new Thread() {
                    void run() {
                        thread_updateWindowTitle(3);
                        
                        if (false == debuggee.debug_start(stream)) {
                            _builder.OutputText("\n无法调试!\n", 1);
                        }

                        XWorkspace.updateDebugStatus(false);
                        synchronized(debugThreadLock) {
                            _debugThread = nilptr;
                        }
                        thread_updateWindowTitle(0);
                    }
                };
                _debugThread.start();
                return true;
            }
        }
        return false;
    }
    
    public InputDialog.onInputListener remotedbglistener = new InputDialog.onInputListener()
    {
        String defaultaddress = "127.0.0.1:23326";
        bool onInputOk(@NotNilptr String text)override {
            int spf = text.indexOf(':');
            if (spf < 1) {
                QMessageBox.Critical("错误", "输入了不正确的地址", QMessageBox.Ok, QMessageBox.Ok);
                return false;
            }

            String ip = text.substring(0, spf);
            int port = text.substring(spf + 1, text.length()).parseInt();

            if (port <=0 || port >= 65535) {
                QMessageBox.Critical("提示", "端口范围错误0~65535", QMessageBox.Ok, QMessageBox.Ok);
                return false;
            }
            defaultaddress = text;
            connectRemoteDebug(ip, port);
            return true;
        }
        bool onInputCancel()override {
            return true;
        }
        String getTitle()override {
            return "TCP/IP 远程调试";
        }
        String getTips()override {
            return "输入目标地址:(格式 IP:PORT)";
        }
        String getDefault()override {
            return defaultaddress;
        }
    };
    
    public void remoteDebug()
    {
        if (_debugThread != nilptr) {
            QMessageBox.Critical("注意", "调试器正忙, 请稍候再试", QMessageBox.Ok, QMessageBox.Ok);
            return ;
        }

        InputDialog.requestInput(remotedbglistener);
    }


    public void attachDebug ()
    {
        if (_debugThread != nilptr) {
            QMessageBox.Critical("注意", "调试器正忙, 请稍候再试", QMessageBox.Ok, QMessageBox.Ok);
            return ;
        }
        
        DebuggeeManager dc = ProjectPropManager.getDebuggeeManager();
        String [] langs = dc.namelist.toArray(new String[0]);
        if (langs.length == 0){
            QMessageBox.Critical("注意", "没有安装可用于调试的扩展组件 .", QMessageBox.Ok, QMessageBox.Ok);
            return ;
        }
        ProjectPropInterface ppi = nilptr;
        
        if (langs.length > 1){
            String sellang = nilptr;
            int res = MultiSelectDialog.requestSelect(new InputDialog.onInputListener(){
                bool onInputOk(@NotNilptr String text)override{ return true;}
                bool onInputCancel()override{ 
                    return true;
                }
                
                bool onSelectOk(int id){
                    try{
                        sellang = langs[id];
                        return true;
                    }catch(Exception e){
                        
                    }
                    return false;
                }
                
                String getTitle()override{return "有多个类型的调试器供选择";}
                String getTips()override{return "选择调试器";}
                
                String getDefault()override{
                    return "0";
                }
                
            },langs);
            if (sellang != nilptr){
                 ppi =  dc.get(sellang);
            }
        }else{
            ppi = dc.getDefault();
        }
        if (ppi != nilptr){
            ppi.customDebug();
        }
    }
    
    public void prepareDebug()
    {
        BreakPointWnd.bpWnd.invalidAllBreakpoint();
        AutoWnd.clear();
        MemoryLookupWnd.reset();
        XStackInfor.reset();
    }

    public void runDebug()
    {
        synchronized(runThreadLock) {
            if (_run_thread == nilptr) {
                if (currentProject != nilptr) {
                    _run_thread = new Thread() {
                        void run() {
                            thread_updateWindowTitle(1);
                            if (PluginsController.callProjectPlugin(currentProject,4)){
                                XWorkspace.this.currentProject.debugRun(XWorkspace.this._builder);
                                PluginsController.callProjectPlugin(currentProject,5);
                            }
                            XWorkspace.this._run_thread = nilptr;
                            thread_updateWindowTitle(0);
                        }
                    };

                    _run_thread.start();
                }
            } else {
                debuggee.continuerun(ThreadManager.currentThreadId);
            }
        }
    }


    public void debugRun()
    {
        if (isDebugging()) {
            debuggee.continuerun(ThreadManager.currentThreadId);
        } else if (currentProject != nilptr) {
            if (_run_thread != nilptr){
                _builder.OutputText("调试器正忙, 请检查被调试进程及其子进程是否仍在运行...\n", 0);
                return;
            }
            String target = currentProject.getOutputTarget();
            if (target != nilptr){
                _builder.OutputText("正在检测代码改动...\n", 0);
                if (_run_thread == nilptr && (lastBuildSuccess == false || saveAllFile() || (XPlatform.existsSystemFile(target) == false) || currentProject.detectSourcesModified() )) {
                    build_project(_builder, new BuildListener() {
                        void onBuild(bool b) {
                            lastBuildSuccess = b;
                            if (b) {
                                runDebug();
                            }
                        }
                    }, nilptr);
                } else {
                    if (lastBuildSuccess) {
                        runDebug();
                    }
                }
            }
        }
    }

    public void runApp()
    {
        synchronized(runThreadLock) {
            if (_run_thread == nilptr) {
                if (currentProject != nilptr) {
                    _run_thread = new Thread() {
                        void run() {
                            thread_updateWindowTitle(2);
                            XWorkspace.updateRunStatus(true);
                            if (PluginsController.callProjectPlugin(currentProject,2)){
                                XWorkspace.this.currentProject.Run(XWorkspace.this._builder);
                                PluginsController.callProjectPlugin(currentProject,3);
                            }
                            XWorkspace.this._run_thread = nilptr;
                            XWorkspace.updateRunStatus(false);
                            thread_updateWindowTitle(0);
                        }
                    };
                    _run_thread.start();
                }
            }
        }
    }

    public bool Run()
    {
        if (currentProject != nilptr) {
            String target = currentProject.getOutputTarget();
            if (target != nilptr){
                _builder.OutputText("正在检测代码改动...\n", 0);
                if (_run_thread == nilptr && (lastBuildSuccess == false || saveAllFile() || (XPlatform.existsSystemFile(target) == false) || currentProject.detectSourcesModified() )) {
                    build_project(_builder, new BuildListener() {
                        void onBuild(bool b) {
                            lastBuildSuccess = b;
                            if (b) {
                                runApp();
                            }
                        }
                    }, nilptr);
                } else {
                    if (lastBuildSuccess) {
                        runApp();
                    }
                }
                return true;
            }
        }
        return false;
    }

    public static const int NOTIFY_DEBUG_START = 0x100;
    public static const int NOTIFY_DEBUG_STOP = 0x101;
    public static const int NOTIFY_DEBUG_ENABLECONTROL = 0x102;
    public static const int NOTIFY_DEBUG_DISABLECONTROL = 0x103;
    public static const int NOTIFY_DEBUG_NOTSUPPORT = 0x104;
    public static const int NOTIFY_RUN_START = 0x105;
    public static const int NOTIFY_RUN_STOP = 0x106;
    public static const int NOTIFY_DEBUG_EXENOTEXISTS = 0x107;

    public static void setNofity(long cmd)
    {
        workspace.Notify(cmd);
    }

    public void refreshDebugControl(bool bp)
    {
        setNofity(bp ? NOTIFY_DEBUG_ENABLECONTROL : NOTIFY_DEBUG_DISABLECONTROL);
    }

    public void notSupportDebug()
    {
        setNofity(NOTIFY_DEBUG_NOTSUPPORT);
    }
    public void executeNotExists()
    {
        setNofity(NOTIFY_DEBUG_EXENOTEXISTS);
    }
    public void setDebugControlEnable(bool bp)
    {
        XMenuManager.refreshDebugControl(bp);
    }
    public static void updateDebugStatus(bool start)
    {
        setNofity(start ? NOTIFY_DEBUG_START : NOTIFY_DEBUG_STOP);
    }
    public static void updateRunStatus(bool start)
    {
        setNofity(start ? NOTIFY_RUN_START : NOTIFY_RUN_STOP);
    }
    public void onNotification(long id)
    {
        switch(id) {
        case NOTIFY_DEBUG_START:
            XMenuManager.refreshDebugMenu(true);
            break;

        case NOTIFY_RUN_START:
            XMenuManager.refreshRunMenu(true);
            break;

        case NOTIFY_RUN_STOP:
            if (currentProject != nilptr) {
                XMenuManager.refreshRunMenu(false);
            } else {
                XMenuManager.disableDebugMenu();
            }
            break;

        case NOTIFY_DEBUG_STOP:
            if (currentProject != nilptr) {
                XMenuManager.refreshDebugMenu(false);
            } else {
                XMenuManager.disableDebugMenu();
            }
            AutoWnd.clear();
            MemoryLookupWnd.reset();
            XStackInfor.reset();
            break;

        case NOTIFY_DEBUG_ENABLECONTROL:
            setDebugControlEnable(true);
            break;

        case NOTIFY_DEBUG_DISABLECONTROL:
            setDebugControlEnable(false);
            break;

        case NOTIFY_DEBUG_NOTSUPPORT:
            QMessageBox.Critical("注意", "目标程序不支持调试,请在[项目]->[属性]->[编译选项]中开启调试后重新编译", QMessageBox.Ok, QMessageBox.Ok);
            break;

        case NOTIFY_DEBUG_EXENOTEXISTS:
            QMessageBox.Critical("注意", "目标程序不存在,无法启动调试运行,请尝试重新生成", QMessageBox.Ok, QMessageBox.Ok);
            break;
        }
    }

    public void test()
    {
        /*ReportEngine engine = new ReportEngine();
        if (engine.create()){
            
            engine.registryDataSource("master",new ReportEngine.ICallbackDatasource(){
            
                Object getCallbackData(ReportEngine.DataType dataType,int index, String columnName)override{
                    switch(dataType){
                        case ReportEngine.DataType.IsEmpty:
                            return false;
                        break;
                        case ReportEngine.DataType.HasNext:
                            return true;
                        break;
                        case ReportEngine.DataType.ColumnHeaderData:
                            return "" + (index + 1);
                        break;
                        case ReportEngine.DataType.ColumnData:
                            return "dasdas";
                        break;
                        case ReportEngine.DataType.ColumnCount:
                            return 3;
                        break;
                        case ReportEngine.DataType.RowCount:
                            return 20;
                        break;
                    }
                    return nilptr;
                }
                
                bool changePos(ReportEngine.ChangePosType type)override{
                    return true;
                }
                
            });
            
            engine.loadFromFile("D:\\szxxy.lrxml");
            engine.previewReport(ReportEngine.PreviewHint.ShowAllPreviewBars);
        }*/
    }

    public void matchbrace()
    {
        DocumentView wnd = currentDocumentView();
        if (wnd != nilptr) {
            wnd.matchBrace();
        }
    }
    public void overrideFunction()
    {
        DocumentView wnd = currentDocumentView();
        if (wnd != nilptr) {
            wnd.overrideObject();
        }
    }

    public XIntelliSense.XIntelliResult [] XISQueryM(String sourcePath,int line)
    {
        synchronized(this) {
            if (currentProject != nilptr) {
                IXIntelliSense inters = currentProject.getIntelliSense() ;
                if (inters != nilptr) {
                    return inters.getDomain(sourcePath, line);
                }
            }
        }
        return nilptr;
    }

    public XIntelliSense.XIntelliResult [] XISQuery(String sourcePath, int line, int column,String keyWord)
    {
        synchronized(this) {
            if (currentProject != nilptr) {
                IXIntelliSense inters = currentProject.getIntelliSense() ;
                if (inters != nilptr) {
                    return inters.getSpecialObjects(sourcePath, line, column, keyWord);
                }
            }
        }
        return nilptr;
    }

    public void showXintellisenceComplete()
    {
        runOnUi(new Runnable() {
            void run()override {
                if (Setting.isIntellisense()) {
                    XStudioApp.statusBar.showStatusMessage("XIntelliSense 结束.");
                } else {
                    XStudioApp.statusBar.showStatusMessage("XIntelliSense 未启用.");
                }
            }
        });
    }
    
    class InteliSenseTask{
        public DocumentView editor;
        public String originalName;
        public String content;
        public long position;
        public int line;
        public int column;
        public InteliSenseTask(){
            
        }
        public InteliSenseTask(DocumentView d, String o, String c, long p, int l, int co){
            editor = d;
            originalName = o;
            content = c;
            position = p;
            line = l;
            column = co;
        }
    };
    
    List<InteliSenseTask> __inteliSenseList = new List<InteliSenseTask>();
    
    
    public void InteliSenseProc(Project project){
        InteliSenseTask task = nilptr;
        synchronized(xintellisencelock) {
            if (__inteliSenseList.size() > 0){
                task = __inteliSenseList.pollLast();  
                __inteliSenseList.clear();
            }
        }
        
        while (task != nilptr){
            DocumentView view = task.editor;
            XIntelliSense.XIntelliResult [] result = XWorkspace.this.getXIntelliSense(project, task.originalName, task.content, task.position, task.line, task.column);
            task = nilptr;
            
            synchronized(xintellisencelock) {
                if (__inteliSenseList.size() > 0){
                    task = __inteliSenseList.pollLast();  
                    __inteliSenseList.clear();
                }
            }
            
            if (task == nilptr){
                XWorkspace.this.autocomp = result;
                view.setIntellisense(XWorkspace.this.autocomp);
                showXintellisenceComplete();
            }
        }
        
        synchronized(xintellisencelock) {
            XWorkspace.this._autoComp_thread = nilptr;
        }
    }
    
    public bool XIntelliSense(DocumentView editor, String originalName,String content,long position, int line, int column)
    {
        XStudioApp.statusBar.showStatusMessage("正在运行 XIntelliSense...");
        synchronized(xintellisencelock) {
            __inteliSenseList.add(new InteliSenseTask(editor, originalName, content, position, line, column));
            Project project = currentProject;
            if ((_autoComp_thread == nilptr) && (project != nilptr)) {
                updateAllOpenedFile(project, originalName);
                _autoComp_thread = new Thread() {
                    void run()override {
                        InteliSenseProc(project);
                    }
                };
                _autoComp_thread.start();
            }
        }
        //XStudioApp.statusBar.showStatusMessage("XIntelliSense 失败");
        return true;
    }


    public void addObject(int id)
    {
        Project project = currentProject;
        
        if (project != nilptr ){
            bool bCallPlugin = true;
            
            if (id == 0) {
                ProjectPropInterface ppi = project.getPropInterface();
                String filter = nilptr;
                if (ppi != nilptr){
                    filter = ppi.getFileExtensionFilter();
                }
                
                if (filter != nilptr){
                    String []files = QFileDialog.getOpenFileNames("添加已有文件", nilptr,  filter + "html 网页(*.htm *.html);;纯文本文件 (*.txt);;其他文件 (*.* *)", this);
                    
                    if (files != nilptr && files.length > 0) {
                        for (int i =0; i < files.length; i++) {
                            String file = String.formatPath(files[i], false);
                            currentProject.addSource(file);
                            _builder.OutputText("添加:" + file + "\n", 0);
                        }
                        _builder.OutputText("已添加:" + files.length + "个文件\n", 0);
                    }
                    bCallPlugin = false;
                }
            } else 
            if (project.getLanguage().equals("xlang")){
                AddObjectDlg.requestAddObject(currentProject, id);
                bCallPlugin = false;
            }
            
            if (bCallPlugin)
            {
                IXPlugin xplugins = project.getProjectPlugin();
                if (xplugins != nilptr){
                    xplugins.onMenuTrigged(id == 0 ? "SYS_ADDFILE" : "SYS_ADDOBJECT");
                }
            }
        }
    }

    public bool XIntelliSenseL(DocumentView editor, String originalName, String content, int line, int column)
    {
        synchronized(xintellisencelock) {
            if (_autoComp_thread == nilptr) {
                _autoComp_thread = new Thread() {
                    void run()override {
                        XWorkspace.this.autocomp = XWorkspace.this.getXIntelliSenseL(originalName, content, line, column);
                        editor.setIntellisense(XWorkspace.this.autocomp);
                        XWorkspace.this._autoComp_thread = nilptr;
                        showXintellisenceComplete();
                    }
                };
                _autoComp_thread.start();
                return true;
            }
        }
        //XStudioApp.statusBar.showStatusMessage("XIntelliSense 失败");
        return false;
    }

    public bool hoverDocument(DocumentView editor, String originalName,String content, int pos, int line, int column)
    {
        synchronized(xintellisencelock) {
            if (_autoComp_thread == nilptr) {
                _autoComp_thread = new Thread() {
                    void run()override {
                        String infor = XWorkspace.this.getInformation(originalName, content, pos, line, column);
                        editor.showHoverInformation(infor, pos);
                        XWorkspace.this._autoComp_thread = nilptr;
                    }
                };
                _autoComp_thread.start();
                return true;
            }
        }
        //XStudioApp.statusBar.showStatusMessage("XIntelliSense 失败");
        return false;
    }
    public bool XIntelliSenseFile(DocumentView editor, String originalName, String content)
    {
        synchronized(xintellisencelock) {
            if (_autoComp_thread == nilptr) {
                _autoComp_thread = new Thread() {
                    void run()override {
                        XIntelliSense.XIntelliResult  []  fileSymbols = XWorkspace.this.getXIntelliSenseFile(originalName, content);
                        if (fileSymbols != nilptr){
                            editor.setFileSymbols(fileSymbols);
                        }
                        XWorkspace.this._autoComp_thread = nilptr;
                    }
                };
                _autoComp_thread.start();
                return true;
            }
        }
        //XStudioApp.statusBar.showStatusMessage("XIntelliSense 失败");
        return false;
    }
    
    Map<String, String > source_update_list = new Map<String, String > ();

    public bool XIntelliSense()
    {
        if (currentProject != nilptr) {
            XStudioApp.statusBar.showStatusMessage("正在运行 XIntelliSense...");
            synchronized(xintellisencelock) {
                if (_autoComp_thread == nilptr) {
                    _autoComp_thread = new Thread() {
                        void run()override {
                            if (XWorkspace.this.currentProject != nilptr) {
                                synchronized(source_update_list) {
                                    IXIntelliSense smap = currentProject.getIntelliSense();
                                    if (smap != nilptr){
                                        Map.Iterator<String, String > iter = source_update_list.iterator();
                                        while (iter.hasNext()) {
                                            synchronized (_diagnlist) {
                                            	_diagnlist.remove(iter.getKey());
                                            }
                                            smap.update(iter.getKey(), iter.getValue());
                                            iter.next();
                                        }
                                    }
                                    source_update_list.clear();
                                }
                                XWorkspace.this.currentProject.updateXintelliSense();
                                XWndClass.postNotify(AUTODOMPEVENTID);
                            }
                            XWorkspace.this._autoComp_thread = nilptr;
                            showXintellisenceComplete();
                        }
                    };
                    _autoComp_thread.start();
                    return true;
                }
            }
            //XStudioApp.statusBar.showStatusMessage("XIntelliSense 失败");
        }
        return false;
    }

    static bool bXIntelliSensePaused = false;

    public static void setIntelliSensePaused(bool bxp, bool dontrun)
    {
        bXIntelliSensePaused = bxp;
        if (dontrun == false && bxp == false) {
            workspace.XIntelliSense();
        }
    }

    public bool UpdateIntelliSense(String originalName, String content)
    {
        if (currentProject != nilptr) {
            synchronized(source_update_list) {
                source_update_list.put(originalName,content);
            }
            if (bXIntelliSensePaused == false) {
                XIntelliSense();
            }
        }
        return true;
    }

    public void updateAllOpenedFile(Project project, String except)
    {
        if (project != nilptr) {
            IXIntelliSense  _intelliSense = project.getIntelliSense();
            if (_intelliSense != nilptr) {
                int c = project.getSourceFileCount();
                for (int i = 0; i < c; i++) {
                    String _sourcePath = project.getSourcePath(i);
                    if (_sourcePath != nilptr && _sourcePath.equals(except) == false) {
                        DocumentView wnd = DocumentView.findFileWindow(_sourcePath);
                        if (wnd != nilptr && wnd.instanceOf(XSourceEditor)) {
                            String _content = ((XSourceEditor)wnd).getTextContent();
                            _intelliSense.update(_sourcePath, _content);
                        }
                    }
                }
            }
        }
    }

    public XIntelliSense.XIntelliResult [] getXIntelliSense(Project project, String sourcePath,String content,long position, int line, int column)
    {
        if (project != nilptr) {
            IXIntelliSense  _intelliSense = project.getIntelliSense();
            if (_intelliSense != nilptr) {
                return _intelliSense.getCompletion(sourcePath, content, position,  line,  column);
            }
        }
        return nilptr;
    }

    public XIntelliSense.XIntelliResult [] getXIntelliSenseL(String sourcePath,String content,int line, int column)
    {
        if (currentProject != nilptr) {
            IXIntelliSense  _intelliSense = currentProject.getIntelliSense();
            if (_intelliSense != nilptr) {
                return _intelliSense.getObjectList(sourcePath, content, line, column);
            }
        }
        return nilptr;
    }
    
    public String getInformation(String sourcePath,String content,int pos, int line, int column)
    {
        if (currentProject != nilptr) {
            IXIntelliSense  _intelliSense = currentProject.getIntelliSense();
            if (_intelliSense != nilptr) {
                return _intelliSense.getInformation(sourcePath, content, pos, line, column);
            }
        }
        return nilptr;
    }
    
    public XIntelliSense.XIntelliResult [] getXIntelliSenseFile(String sourcePath,String content)
    {
        if (currentProject != nilptr) {
            IXIntelliSense  _intelliSense = currentProject.getIntelliSense();
            if (_intelliSense != nilptr) {
                return _intelliSense.getObjectListInFile(sourcePath, content);
            }
        }
        return nilptr;
    }
    
    public static void runAsAdministrator()
    {
        String filepath = _system_.getAppDirectory().appendPath("xdbg.server");

        try {
            FileOutputStream fos = new FileOutputStream(filepath);
            Project project = workspace.getCurrentProject();
            
            if (project != nilptr){
                byte[] data  = ("uacdebug\n" + project.getPath()).getBytes();
                fos.write(data, 0, data.length);
                fos.close();

                String path = _system_.getAppDirectory().appendPath("xdbg_uac.exe");
                XStudioApp.lastTask = path;
                workspace.mainWindow.close();
                XStudioApp.lastTask = nilptr;
            }
        } catch(Exception e) {
            QMessageBox.Critical("失败", "无法写入调试文件:" + filepath + "请确认目录可写.", QMessageBox.Ok, QMessageBox.Ok);
        }
    }
    
    public void setUpper(){
        DocumentView wnd = currentDocumentView();
        if (wnd != nilptr) {
            wnd.setUpper();
        }
    }
    
    public void setLower(){
        DocumentView wnd = currentDocumentView();
        if (wnd != nilptr) {
            wnd.setLower();
        }
    }
    
    public void CursorUp(){
        DocumentView wnd = currentDocumentView();
        if (wnd != nilptr) {
            wnd.CursorUp();
        }
    }

    public void CursorLeft(){
        DocumentView wnd = currentDocumentView();
        if (wnd != nilptr) {
            wnd.CursorLeft();
        }
    }
    
    public void CursorRight(){
        DocumentView wnd = currentDocumentView();
        if (wnd != nilptr) {
            wnd.CursorRight();
        }
    }

    public void CursorDown(){
        DocumentView wnd = currentDocumentView();
        if (wnd != nilptr) {
            wnd.CursorDown();
        }
    }
 
    public void CursorLineBegin(){
        DocumentView wnd = currentDocumentView();
        if (wnd != nilptr) {
            wnd.CursorLineBegin();
        }
    } 
 
    public void CursorLineEnd(){
        DocumentView wnd = currentDocumentView();
        if (wnd != nilptr) {
            wnd.CursorLineEnd();
        }
    }

    public void CursorPrevPage(){
        DocumentView wnd = currentDocumentView();
        if (wnd != nilptr) {
            wnd.CursorPrevPage();
        }
    }

    public void CursorNextPage(){
        DocumentView wnd = currentDocumentView();
        if (wnd != nilptr) {
            wnd.CursorNextPage();
        }
    }

    public void CursortoTop(){
        DocumentView wnd = currentDocumentView();
        if (wnd != nilptr) {
            wnd.CursortoTop();
        }
    }

    public void CursortoBottom(){
        DocumentView wnd = currentDocumentView();
        if (wnd != nilptr) {
            wnd.CursortoBottom();
        }
    }
    
    
    public void doPrint(){
        DocumentView wnd = currentDocumentView();
        if (wnd != nilptr) {
            wnd.doPrint();
        }
    }
    
    public void deploy(){
        Project project = currentProject;
        if (project != nilptr) {
            project.deploy();
        }
    }
    
    
    public void updateAllDocumentErrorPoint(){
        DocumentView wnd = currentDocumentView();
        if (wnd != nilptr){
            wnd.updateInformationPoint();
        }
    }
    
    public void deployto(){
        Project project = currentProject;
        if (project != nilptr) {
        
            String deploy_path = QFileDialog.getFolderPath("选择部署目录", nilptr, nilptr, XWorkspace.workspace);
            if (deploy_path == nilptr || deploy_path .length() == 0){ 
                return ;
            }
            
            bool bNeedCompile = false;
            String target = project.getOutputTarget();
    
            if (target != nilptr){
                if (Setting.isAutoSave()) {
                    bNeedCompile = saveAllFile();
                    if (bNeedCompile == false) {
                        if ((XPlatform.existsSystemFile(target) == false) || project.detectSourcesModified()) {
                            bNeedCompile = true;
                        }
                    }
                } else {
                    bNeedCompile = true;
                }

                bool build_success = false;
                
                if (bNeedCompile || (lastBuildSuccess == false)) {
                    build_project(_builder, new BuildListener() {
                        void onBuild(bool b) {
                            lastBuildSuccess = b;
                            if (b){
                                runOnUi(new Runnable(){
                                    void run()override{
                                        _builder.OutputText("\n开始部署..\n", 0);
                                        String deploy_target = String.formatPath(deploy_path.appendPath(project.getOutputName()), false);
                                        bool bcopyed = XlangProjectProp.copyFile(target, deploy_target);
                                        _builder.OutputText("\n拷贝文件:" + target + "..." + bcopyed + "\n", 0);
                                        project.deployto(deploy_path);
                                        _builder.OutputText("\已部署到位置:" + deploy_path + "\n", 0);
                                    }
                                });
                            }
                        }
                    }, nilptr);
                } else {
                    _builder.OutputText(target + "\n自上次编译以来没有检测到任何改动,请使用[清理]命令后重新编译.\n", 0);
                    _builder.OutputText("\n开始部署..\n", 0);
                    String deploy_target = String.formatPath(deploy_path.appendPath(project.getOutputName()), false);
                    bool bcopyed = XlangProjectProp.copyFile(target, deploy_target);
                    _builder.OutputText("\n拷贝文件:" + target + "..." + bcopyed + "\n", 0);
                    project.deployto(deploy_path);
                    _builder.OutputText("\已部署到位置:" + deploy_path + "\n", 0);
                }
                
            }
        }
    }
};

