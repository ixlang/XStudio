//xlang Source, Name:AddObject.xcsm 
//Date: Sat Sep 02:51:03 2018 

//xlang Source, Name:gotoline.xcsm 
//Date: Sun Sep 19:06:03 2018 

class AddObjectDlg : QDialog {

	int addType = 0;
    QPushButton btnOk, btnCancel;
    QLineEdit edtName, edtFile;
	QCheckBox chkCls, chkInterface, chkPackage;
    QTreeWidget _treeview;
    Project currentProject;
    
    long root_item;
    
    String prefix = "";
    
    static class ItemLoader{
		public long loaditem;
		public JsonArray object;
		public ItemLoader(long i, JsonArray o){
			loaditem = i;
			object = o;
		}
	};
    
    Map<long, ItemLoader> expand_data = new Map<long, ItemLoader>();
    
    onClickListener checkListener = new onClickListener(){
        void onClick(QObject obj, bool checked)override{
        
				prefix = "";
        
				if (checked){
					bool bcs = obj == chkCls;
                    bool bit = obj == chkInterface;
                    bool bpg = obj == chkPackage;
                    
                    if (bcs){
						prefix = "class";
                    }
                    if (bit){
						prefix = "interface";
                    }
                    if (bpg){
						prefix = "package";
                    }
                    
					chkCls.setCheck(bcs);
                    chkInterface.setCheck(bit);
                    chkPackage.setCheck(bpg);
                    
                    if (obj == chkPackage){
						setChildrenUnChecked(root_item);
                    }
                    
                    _treeview.setEnabled(obj != chkPackage);
				}
            }
        };
        
    public void onAttach()override{ 
    
        setWindowFlags(Constant.CustomizeWindowHint | Constant.WindowCloseButtonHint);
        
        //setFixedSize(width(), height());
        
        btnOk = (QPushButton)attachByName(new QPushButton(), "btnOk");
        btnCancel = (QPushButton)attachByName(new QPushButton(), "btnCancel");
        
        edtName = (QLineEdit)attachByName(new QLineEdit(), "edtName");
        edtFile = (QLineEdit)attachByName(new QLineEdit(), "edtFile");
        
        chkCls = (QCheckBox)attachByName(new QCheckBox(), "chkCls");
        chkInterface = (QCheckBox)attachByName(new QCheckBox(), "chkInterface");
        chkPackage = (QCheckBox)attachByName(new QCheckBox(), "chkPackage");
        
        switch(addType){
			case 1:
            prefix = "class";
            chkCls.setCheck(true);
            break;
            case 2:
            prefix = "interface";
            chkInterface.setCheck(true);
            break;
            case 3:
            prefix = "package";
            chkPackage.setCheck(true);
            break;
        }
        chkCls.setOnClickListener(checkListener);
        chkInterface.setOnClickListener(checkListener);
        chkPackage.setOnClickListener(checkListener);
        //checkListener
        _treeview = (QTreeWidget)attachByName(new QTreeWidget(), "baseTree");
        
        if (currentProject == nilptr){
			close();
			QMessageBox.Critical("注意", "当前没有载入项目", QMessageBox.Ok, QMessageBox.Ok);
            return ;
        }
        btnOk.setOnClickListener(
        new onClickListener(){
            void onClick(QObject obj, bool checked)override{
				if (prefix.length() == 0){
					QMessageBox.Critical("注意", "没有选择创建的类型", QMessageBox.Ok, QMessageBox.Ok);
                    return ;
                }
				String name = edtName.getText();
                if (name.length() == 0){
					QMessageBox.Critical("注意", "输入了不正确的类名", QMessageBox.Ok, QMessageBox.Ok);
                    return ;
                }
                if (Pattern.test(name, "^[A-Za-z0-9_]+$", Pattern.NOTEMPTY, true) == false){
					QMessageBox.Critical("注意", "输入了不正确的类名", QMessageBox.Ok, QMessageBox.Ok);
                    return ;
				}
                
				String sourceFile = currentProject.generateFullPath(edtFile.getText());
                
                if (XPlatform.existsSystemFile(sourceFile)){
 					QMessageBox.Critical("注意", "文件已存在", QMessageBox.Ok, QMessageBox.Ok);
                    return ;
                }
                
                
                
                byte [] data = nilptr;
                try{
					String content = generateChildren(root_item, nilptr);
					if (content != nilptr){
						data = content.getBytes();
                    }
                }catch(Exception E){
                    return ;
                }
                
                FileOutputStream fos = nilptr;
                
                try{
					fos = new FileOutputStream(sourceFile);

                    String date = String.formatDate("%c", _system_.currentTimeMillis()); 
					fos.write(("//xlang Source, Name:" + edtFile.getText() + " \n" + "//Date: " + date + " \n\n").getBytes());
                    if (data == nilptr){
						data = (prefix + " " + name + "{\n\n};").getBytes();
                    }
                    
					fos.write(data);
                    
                    fos.close();
                    
                    if (currentProject.addSource(sourceFile)){
						XWorkspace.workspace.openTextFile(sourceFile);
                    }
                }catch(Exception E){
                    if (fos != nilptr){
                        fos.close();
                    }
                    XPlatform.deleteFile(sourceFile);
                 	QMessageBox.Critical("注意", "无法建立文件:" + sourceFile, QMessageBox.Ok, QMessageBox.Ok);
                    return ;
                }
                
                close();
            }
        });
        
        btnCancel.setOnClickListener(
        new onClickListener(){
            void onClick(QObject obj, bool checked)override{
				close();
            }
        });
         
		setWindowTitle("添加对象");

        setModal(true);
        
        show();
        
        edtName.setFocus();
        
		JsonArray template_class = (JsonArray)currentProject.xintelliSenseMap.get("template_class");
		JsonArray template_instance = (JsonArray)currentProject.xintelliSenseMap.get("template_instance");
		JsonArray heap = (JsonArray)currentProject.xintelliSenseMap.get("heap");
        
        root_item = _treeview.addItem(nilptr, "基类型");
        loadObject(root_item, template_class);
        loadObject(root_item, template_instance);
        loadObject(root_item, heap);
        
        edtName.setOnEditEventListener(new onEditEventListener(){
            void onTextChanged(QObject, @NotNilptr String text)override{
				edtFile.setText(text + ".x");
            }
        });
        
		_treeview.setOnTreeViewItemEvent(new onTreeViewItemEvent(){
			void onItemExpanded(QTreeWidget,long iitem)override{
				expandLoad(iitem);
			}
            
            void onItemChanged(QTreeWidget, long item,int column)override{
				long parentitem = _treeview.getParentItem(item);
                bool checked = _treeview.isItemCheck(item, 0);
                if (checked){

					if (parentitem == root_item){
						checkCheck(item);
					}
                        
					while(parentitem != 0){
						_treeview.setItemCheck(parentitem, 0, checked);

						long parent = _treeview.getParentItem(parentitem);
						if (parent == root_item){
							checkCheck(parentitem);
						}
						parentitem = parent;
					}

                }else{
					setChildrenUnChecked(item);
                }
            }
		});
        
        
         /*setOnLayoutEventListener(new onLayoutEventListener(){
			void onResize(QObject obj, int w, int h, int oldw, int oldh)override {
				_treeview.resize(w - 40, h-  210);
                
                edtName.resize(w - 90, 20);
                edtFile.resize(w - 90, 20);
                
				btnOk.move(w - 190, h - 35);
				btnCancel.move(w - 100, h - 35);
			}
        });*/
        setWindowIcon("./res/toolbar/interfacefun.png");
    }
    
    public void setChildrenUnChecked(long item){
		_treeview.setItemCheck(item, 0, false);
		long []children = _treeview.getItemChildren(item);
        if (children != nilptr){
            for (int i =0; i < children.length; i++){
                setChildrenUnChecked(children[i]);
            }
        }
    }
    
    public void checkCheck(long item){
		long []children = _treeview.getItemChildren(root_item);
        if (children != nilptr){
            for (int i =0; i < children.length; i++){
                if (children[i] != item){
                    setChildrenUnChecked(children[i]);
                }
            }
        }
    }
    
    public void expandLoad(long item){
		ItemLoader loader = nilptr; 
        
        try{
			loader = expand_data.get(item);
        }catch(Exception e){
        
        }
        
		if (loader != nilptr){
			int count = loader.object.length();
            if (count > 0){
				long parentItem = _treeview.getParentItem(loader.loaditem);
				loadObject(parentItem, loader.object);
            }
            expand_data.remove(item);
            _treeview.removeItem(loader.loaditem);
		}
	}
    
    public long insertLoad(long item){
		return _treeview.insertItem(item, nilptr, "加载中...");
	}
    
    public static const  int 
			TYPE_CLASS = 0x100, 
			TYPE_INTERFACE = 0x10, 
			TYPE_FUNCTION = 0x1, 
			TYPE_SUBCLASS = 0x2, 
			TYPE_TEMPLATE = 4;
    
    public void loadObject(long root, JsonArray objs){
        if (objs == nilptr || root == 0){
            return ;
        }
		for (int i =0, c = objs.length(); i < c; i++){
			JsonObject obj = (JsonObject)objs.get(i);
            
            if (obj != nilptr){
                int type = obj.getInt("type");
                long item = 0;
                
                if (type == 34){
                    item = _treeview.insertItem(root, "res/toolbar/template.png", obj.getString("name"));
                    _treeview.setItemTag(item, 0, TYPE_CLASS | TYPE_TEMPLATE);
                }else
                if (type == 31){
                    int tag = TYPE_CLASS;
                    
                    if (obj.has("template")){
                        item = _treeview.insertItem(root, "res/toolbar/tempinstance.png", obj.getString("name"));
                    }else
                    if (obj.has("interface")){
                        item = _treeview.insertItem(root, "res/toolbar/interface.png", obj.getString("name")); 
                        tag |= TYPE_INTERFACE;
                        
                    }else{
                        item = _treeview.insertItem(root, "res/toolbar/class.png", obj.getString("name"));
                    }
                    
                    JsonArray dynamic_method = (JsonArray)obj.get("method");
                    
                    if (dynamic_method != nilptr && dynamic_method.length() > 0){
                        long method = _treeview.insertItem(item, "res/toolbar/function.png", "可重载方法");
                        _treeview.setItemTag(method, 0, TYPE_FUNCTION);
                        expand_data.put(method, new ItemLoader(insertLoad(method),  dynamic_method));
                    }
                    
                    JsonArray static_sub_class = (JsonArray)obj.get("static_properites");
                    if (static_sub_class != nilptr && static_sub_class.length() > 0){
                        long static_prop = _treeview.insertItem(item, "res/toolbar/static.png", "可继承成员类");
                        _treeview.setItemTag(static_prop, 0, TYPE_SUBCLASS);
                        expand_data.put(static_prop,new ItemLoader(insertLoad(static_prop),   static_sub_class));
                    }
                    
                    _treeview.setItemTag(item, 0, tag);
                }else
                if (type == 23){
                    if (obj.has("interface")){
                        item = _treeview.insertItem(root, "res/toolbar/interfacefun.png", obj.getString("name"));
                    }else
                    if (root != root_item){
                        item = _treeview.insertItem(root, "res/toolbar/function.png", obj.getString("name"));
                    }
                }
                
                if (item != 0){
                    _treeview.modifyItemFlags(item, QTreeWidget.ItemIsUserCheckable, 0);
                    _treeview.setItemCheck(item, 0, false);
                }
            }
		}
	}
    
    public static void requestAddObject(Project project, int type){
		QDialog newDlg = new QDialog();
        if (newDlg.load(UIManager.getUIData(__xPackageResource("ui/addobj.ui"))) == false){
            return ;
        }
        AddObjectDlg wizard = new AddObjectDlg();	
        wizard.addType = type;
        wizard.currentProject = project;
        
        wizard.attach(newDlg);
    }
        
    public String generateChildren(long item, String parentClass){
		String text = nilptr;
        int tag = _treeview.getItemTag(item, 0);
        if ((tag & TYPE_CLASS) == TYPE_CLASS){
			if (item != root_item){
				text = _treeview.getItemText(item, 0);
				if (parentClass != nilptr){
					text = parentClass + "." + text;
				}
			}
        }else{
			text = parentClass;
        }
        
        long []children = _treeview.getItemChildren(item);
        if (children == nilptr){
            return nilptr;
        }
        for (int i =0; i < children.length; i++){
			bool checked = _treeview.isItemCheck(children[i], 0);
			if (checked){
				tag = _treeview.getItemTag(children[i], 0);
                if (tag == TYPE_FUNCTION){
					String headStr = prefix + " " + edtName.getText() ;
                    if (text != nilptr){
						headStr = headStr + " : " + text + "{\n";
                    }else{
						headStr = headStr + "{\n";
                    }
                    if (prefix.equals("interface") == false){
						String className = _treeview.getItemText(item, 0);
						String szbody = generateOverride(children[i], className);
						headStr = headStr + szbody + "\n};";
                    }else{
						headStr = headStr + "\n\n\n};";
                    }
                    return headStr;
                }else{
					if (prefix.equals("interface") && (tag & TYPE_INTERFACE) == 0){
						QMessageBox.Critical("注意", "接口只能继承接口", QMessageBox.Ok, QMessageBox.Ok);
                        throw new Exception("接口只能继承接口");
                        return nilptr;
                    }
       
					String finastr = generateChildren(children[i], text);
                    
                    if (finastr == nilptr){
						if ((tag & TYPE_CLASS) != 0){
							text = _treeview.getItemText(children[i], 0);
							if (parentClass != nilptr){
								text = parentClass + "." + text;
							}
							String headStr = prefix + " " + edtName.getText() ;
							if (text.length() > 0){
								headStr = headStr + " : " + text + "{\n";
							}else{
								headStr = headStr + "{\n";
							}

							finastr = headStr + "\n\n\n};";
                        }
                    }
                    
                    return finastr;
                }
            }
        }
        
        return nilptr;
    }
    
    public String generateOverride(long item,@NotNilptr  String parentName){
		String bodyStr = "";
		String destName = edtName.getText() ;
        long []children = _treeview.getItemChildren(item);
        
        if (children != nilptr){
            for (int i =0; i < children.length; i++){
                bool checked = _treeview.isItemCheck(children[i], 0);
                if (checked){
                    String text = _treeview.getItemText(children[i], 0);
                    if (text.startWith(parentName + "(")){
                        text = destName + text.substring(parentName.length(), text.length());
                        text = "	" + text + " {//构造\n		//TODO:	\n	\n	}\n\n";
                    }else{
                        text = "	" + text + " override {\n		//TODO:	\n	\n	}\n\n";
                    }
                    bodyStr = bodyStr + text;
                }
            }
        }
        return bodyStr;
    }
};