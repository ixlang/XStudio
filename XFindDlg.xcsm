
class XFindDlg : QDialog
{
    QPushButton btnClose, btnFind, btnFindAgain, benFindall, btnReplace, btnReplaceAll;
    XWorkspace _workspace;
    public static bool bFindAll = false;
    QComboBox editFind, editRep, filetype, findscope;

    QCheckBox casematch, wholeword, regex, forward, warp;

    public static bool findinOutput = false;

    static Map<String,int>
    findhistory = new Map<String,int>(),
    replacehistory = new Map<String,int>(),
    filepattern = new Map<String,int>();

    public XFindDlg(XWorkspace _w)
    {
        _workspace = _w;
    }

    public void setDefaultFindText(String text)
    {
        editFind.setText(text);
    }

    public void flushHistory(@NotNilptr Map<String,int> his, @NotNilptr QComboBox comb)
    {
        String [] items = new String[his.size()];
        Map.Iterator<String,int> iter = his.iterator();
        int i = 0;
        while (iter.hasNext()) {
            items[i++] = iter.getKey();
            iter.next();
        }
        comb.clear();
        comb.addItems(items);
    }
    public void addFindHistory(String text)
    {
        findhistory.put(text, 0);
        flushHistory(findhistory, editFind);
        editFind.setText(text);
    }

    public void addReplaceHistory(String text)
    {
        replacehistory.put(text, 0);
        flushHistory(replacehistory, editRep);
        editRep.setText(text);
    }

    public void addFilePattertHistory(String text)
    {
        filepattern.put(text, 0);
        flushHistory(filepattern, filetype);
        filetype.setText(text);
    }

    public static int s_scope = 0;
    public static bool s_case = false;
    public static bool s_whole = false;
    public static bool s_regex = false;
    public static bool s_forward = false;
    public static bool s_warp = true;

    public void saveStatus()
    {
        s_scope = findscope.getCurrentIndex();
        s_case = casematch.getCheck();
        s_whole = wholeword.getCheck();
        s_regex = regex.getCheck();
        s_forward = forward.getCheck();
        s_warp = warp.getCheck();
    }

    public void loadStatus()
    {
        findscope.setCurrentIndex(s_scope);
        casematch.setCheck(s_case);
        wholeword.setCheck(s_whole);
        regex.setCheck(s_regex);
        forward.setCheck(s_forward);
        warp.setCheck(s_warp);
    }

    public void onAttach()
    {
        setWindowFlags(Constant.CustomizeWindowHint | Constant.WindowCloseButtonHint  | Constant.Dialog  | Constant.WindowTitleHint);
        setFixedSize(width(), height());
        editFind = (QComboBox)attachByName(new QComboBox(), "combFind");
        editRep = (QComboBox)attachByName(new QComboBox(), "combRep");
        filetype = (QComboBox)attachByName(new QComboBox(), "filetype");
        findscope = (QComboBox)attachByName(new QComboBox(), "findscope");

        casematch = (QCheckBox)attachByName(new QCheckBox(), "casematch");
        wholeword = (QCheckBox)attachByName(new QCheckBox(), "wholeword");
        regex = (QCheckBox)attachByName(new QCheckBox(), "regex");
        forward = (QCheckBox)attachByName(new QCheckBox(), "forward");
        warp = (QCheckBox)attachByName(new QCheckBox(), "warp");
        warp.setCheck(true);
        btnReplace = (QPushButton)attachByName(new QPushButton(), "btnReplace");
        btnReplaceAll = (QPushButton)attachByName(new QPushButton(), "btnReplaceAll");

        String [] items = {"当前文档", "打开的文件", "整个项目"};

        findscope.addItems(items);
        findscope.setCurrentIndex(0);
        btnClose = (QPushButton)attachByName(new QPushButton(), "btnClose");

        loadStatus();

        btnClose.setOnClickListener(
        new onClickListener() {
            void onClick(QObject obj, bool checked)override {
                XFindDlg.this.close();
            }
        });

        btnFind = (QPushButton)attachByName(new QPushButton(), "btnFind");
        btnFind.setOnClickListener(
        new onClickListener() {
            void onClick(QObject obj, bool checked)override {
                String str = editFind.getCurrentText();
                if (str.length() == 0) {
                    QMessageBox.Critical("提示", "请输入要查找的内容", QMessageBox.Ok, QMessageBox.Ok);
                    return ;
                }

                QScintilla sci = nilptr;

                if (findinOutput == false) {
                    XSourceEditor wnd = (XSourceEditor)_workspace.currentSubWindow();

                    if (wnd == nilptr) {
                        QMessageBox.Critical("提示", "当前没有正在编辑的文件", QMessageBox.Ok, QMessageBox.Ok);
                        return ;
                    }
                    sci = wnd._sci;
                } else {
                    sci = XWndOutput.outputWnd.getCurrentSci();
                }

                if (sci != nilptr) {
                    addFindHistory(str);

                    bool bfound = sci.findFirst(str, regex.getCheck(), casematch.getCheck(), wholeword.getCheck(), warp.getCheck(), !forward.getCheck(), -1, -1,false, false);
                    bFindAll = false;
                    if (bfound == false) {
                        StatusBarMgr.showStatusMessage("找不到指定文本.");
                    }
                }
            }
        });

        btnReplace.setOnClickListener(
        new onClickListener() {
            void onClick(QObject obj, bool checked)override {

                if (findinOutput) {
                    return ;
                }

                String str = editFind.getCurrentText();
                String replaceStr = editRep.getCurrentText();

                if (str.length() == 0) {
                    QMessageBox.Critical("提示", "请输入要查找的内容", QMessageBox.Ok, QMessageBox.Ok);
                    return ;
                }

                QScintilla sci = nilptr;

                if (findinOutput == false) {
                    XSourceEditor wnd = (XSourceEditor)_workspace.currentSubWindow();

                    if (wnd == nilptr) {
                        QMessageBox.Critical("提示", "当前没有正在编辑的文件", QMessageBox.Ok, QMessageBox.Ok);
                        return ;
                    }
                    sci = wnd._sci;
                }

                if (sci != nilptr) {
                    addFindHistory(str);
                    addReplaceHistory(replaceStr);
                    bool bfound = sci.replace(str, regex.getCheck(), casematch.getCheck(), wholeword.getCheck(), warp.getCheck(), !forward.getCheck(), -1, -1,false, false, replaceStr);
                    bFindAll = false;

                    if (bfound == false) {
                        StatusBarMgr.showStatusMessage("找不到指定文本.");
                    }
                }
            }
        });



        btnFindAgain= (QPushButton)attachByName(new QPushButton(), "btnFindAgain");
        btnFindAgain.setOnClickListener(
        new onClickListener() {
            void onClick(QObject obj, bool checked)override {
                QScintilla sci = nilptr;

                if (findinOutput == false) {
                    XSourceEditor wnd = (XSourceEditor)_workspace.currentSubWindow();

                    if (wnd == nilptr) {
                        QMessageBox.Critical("提示", "当前没有正在编辑的文件", QMessageBox.Ok, QMessageBox.Ok);
                        return ;
                    }
                    sci = wnd._sci;
                } else {
                    sci = XWndOutput.outputWnd.getCurrentSci();
                }

                if (sci != nilptr) {
                    bool bfound = sci.findNext();
                    if (bfound == false) {
                        StatusBarMgr.showStatusMessage("找不到指定文本.");
                    }
                }
            }
        });


        btnReplaceAll.setOnClickListener(
        new onClickListener() {
            void onClick(QObject obj, bool checked)override {

                int scope = findscope.getCurrentIndex();
                String replaceStr = editRep.getCurrentText();

                if (scope > 0) {
                    XFinder.FindResult result = findAll();
                    
                    
                    XFindresWnd.ShowResult(result);

                    if (result != nilptr && result.size() > 0) {

                        int rt = QMessageBox.Yes;

                        if (Setting.repallconfirm()) {
                            rt = QMessageBox.Question("提示","将在已打开的文档视图或者磁盘文件中替换整个项目中查找到的 " + result.size() + " 处内容,磁盘文件更改将无法撤消,确定继续?",  QMessageBox.Yes | QMessageBox.No, QMessageBox.No);
                        }

                        if (rt == QMessageBox.Yes) {
                            addReplaceHistory(replaceStr);
                            XFinder.replace(result, replaceStr);
                            StatusBarMgr.showStatusMessage("已替换 " + result.size() + "处.");
                        } else {
                            StatusBarMgr.showStatusMessage("已放弃替换");
                        }
                    }
                } else if (findinOutput == false) {

                    String str = editFind.getCurrentText();

                    if (str.length() == 0) {
                        QMessageBox.Critical("提示", "请输入要查找的内容", QMessageBox.Ok, QMessageBox.Ok);
                        return ;
                    }
                    XSourceEditor wnd = (XSourceEditor)_workspace.currentSubWindow();

                    if (wnd == nilptr) {
                        QMessageBox.Critical("提示", "当前没有正在编辑的文件", QMessageBox.Ok, QMessageBox.Ok);
                        return ;
                    }
                    wnd._sci.gotoPos(0);

                    addFindHistory(str);
                    addReplaceHistory(replaceStr);
                    
                    while (wnd._sci.replace(str, regex.getCheck(), casematch.getCheck(), wholeword.getCheck(), false, !forward.getCheck(), -1, -1,false, false, replaceStr)) {
                        wnd.setModified();
                    }
                }
            }
        });

        benFindall= (QPushButton)attachByName(new QPushButton(), "benFindall");
        benFindall.setOnClickListener(
        new onClickListener() {
            void onClick(QObject obj, bool checked)override {
                //Map<String,long> result, Project project, bool bcase, bool wholeWord, bool regex, String [] extsions, int scope, String findTxt
                int scope = findscope.getCurrentIndex();

                if (scope > 0) {
                    XFinder.FindResult result = findAll();
                    XFindresWnd.ShowResult(result);
                }
            }
        });
        setWindowTitle("查找替换");

        flushHistory(findhistory, editFind);
        flushHistory(replacehistory, editRep);
        flushHistory(filepattern, filetype);

        //setModal(true);
        setWindowIcon("./res/toolbar/find.png");
        show();
        editFind.setFocus();
    }

    public XFinder.FindResult findAll()
    {
        bFindAll = true;

        String str = editFind.getCurrentText();

        if (str.length() == 0) {
            QMessageBox.Critical("提示", "请输入要查找的内容", QMessageBox.Ok, QMessageBox.Ok);
            return nilptr;
        }

        String ft = filetype.getCurrentText();
        String []extions = ft.split(';');
        if (extions.length == 0) {
            extions = nilptr;
        }

        bool bregex = regex.getCheck();

        Pattern pattern = nilptr;

        if (bregex) {
            try {
                pattern = new Pattern(str);
            } catch(Exception e) {
                QMessageBox.Critical("提示", "正则表达式不正确", QMessageBox.Ok, QMessageBox.Ok);
                return nilptr;
            }
        }

        bool bcase = casematch.getCheck();
        bool bwholewd = wholeword.getCheck();

        addFindHistory(str);

        XFinder.FindResult result = new XFinder.FindResult();

        StatusBarMgr.showStatusMessage("正在查找...[匹配大小写=" + bcase + ",全字匹配=" + bwholewd+ ",正则表达式=" + bregex + " ]");

        XFinder.find(result, XWorkspace.workspace.getCurrentProject(), bcase, bwholewd, bregex, extions, findscope.getCurrentIndex(), str, pattern);


        StatusBarMgr.showStatusMessage("查找结束.[匹配大小写=" + bcase + ",全字匹配=" + bwholewd+ ",正则表达式=" + bregex + " ]");

        return result;
    }
    
    public void onFinish( int res)
    {
        saveStatus();
        XWorkspace.findDlg = nilptr;
    }
};