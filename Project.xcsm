
class Project : IProject
{
    static const int XPROJECT_VERSION = 1;

    public long viewItem, sourcesRoot, extendsRoot;
    public JsonObject xintelliSenseMap;
    JsonObject root;
    String projectName;
    String languageConf;
    String pluginsConf;
    public String projpath;
    public String projDir;
    ProjectPropInterface _propinterface;
    IXIntelliSense intelliSense;
    IXPlugin projectPlugin;
    Variables variables = new Variables();
    Configure currentConfig;
    Object buildlock = new Object();
    public Thread build_thread;
    bool bModified = false;
    

    public Configure getCurrentConfig()override{
        return currentConfig;
    }
    Map<String, Object> _tagList;
    public Map<String, Configure> configures = new Map<String, Configure>();

    public void setTag(String key, Object obj){
        _tagList.put(key, obj);
    }
    
    public Object getTag(String key){
        try{
            return _tagList.get("key");
        }catch(Exception e){
            
        }
        return nilptr;
    }
    
    public Variables  getVariables(){
        return variables;
    }
    
    public void close(){
        xintelliSenseMap = nilptr;
        root = nilptr;
    }
    public IXIntelliSense getIntelliSense(){
        return intelliSense;
    }
    
    public bool cloneConfigure(@NotNilptr String tempName,@NotNilptr  String newName) override
    {
        if (configures.containsKey(newName) == false) {
            Configure cfgs = getConfigure(tempName);
            if (cfgs != nilptr) {
                Configure newcfg = cfgs.clone(newName);
                if (newcfg != nilptr) {
                    configures.put(newName, newcfg);
                    bModified = true;
                    try {
                        ((JsonObject)root.get("configures")).put(newName, newcfg.root);
                    } catch(Exception e) {

                    }
                    return true;
                }
            }
        }
        return false;
    }

    public void removeConfigure(String tempName)override
    {
        configures.remove(tempName);
        try {
            ((JsonObject)root.get("configures")).remove(tempName);
        } catch(Exception e) {

        }
        bModified = true;
    }


    public bool detectSourcesModified()override
    {
        Configure configure = currentConfig;

        if (configure != nilptr) {
            String workDir = getProjectDir();
            if (workDir.length() > 0){
                JsonArray sources = getSources();
                if (sources != nilptr) {
                    for (int i = 0, c = sources.length(); i < c; i++) {
                        String srcname = sources.getString(i);
                        String fullsourcePath = String.formatPath(workDir.appendPath(srcname), false);
                        if (configure.isModified(fullsourcePath)) {
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    public void updateSourceModified()override{
        Configure configure = currentConfig;

        if (configure != nilptr) {
            String workDir = getProjectDir();
            if (workDir.length() > 0){
                JsonArray sources = getSources();
                if (sources != nilptr) {
                    for (int i = 0, c = sources.length(); i < c; i++) {
                        String srcname = sources.getString(i);
                        String fullsourcePath = String.formatPath(workDir.appendPath(srcname), false);
                        configure.isModified(fullsourcePath);
                    }
                }
            }
        }
    }
    /* void updateMd5s(){
    	Configure configure = currentConfig;

         if (configure != nilptr){
    		configure.updateMd5s();
         }
     }*/
    
    public void buildStop(IBuilder builder){
        ProjectPropInterface ppi = _propinterface;
        if (ppi != nilptr){
            ppi.stopBuild(builder);
        }
    }


    public bool setCurrentConfigure(@NotNilptr String configName, bool btips)override
    {
        if (configName.length() > 0) {
            try {
                Configure cfg = configures.get(configName);
                if (cfg != nilptr) {
                    currentConfig = cfg;
                    if (_propinterface != nilptr){
                        _propinterface.onProjectSettingChange(this);
                    }
                    return true;
                }
            } catch(Exception e) {
                if (btips) {
                    QMessageBox.Critical("错误", "找不到此配置", QMessageBox.Ok, QMessageBox.Ok);
                }
            }
        }
        return false;
    }

    public Configure getConfigure(@NotNilptr String name)override
    {
        if (name.length() > 0) {
            try {
                return configures.get(name);
            } catch(Exception e) {

            }
        }
        return nilptr;
    }

    public String getOutputDir()override
    {
        Configure _ccfig = getCurrentConfig();
        if (_ccfig != nilptr) {
            String out_path = _ccfig.getOption("outpath");
            out_path = String.formatPath(XEnvironment.MapVariable(this, _ccfig, out_path), false);
            return (out_path);
        }
        return nilptr;
    }

    public  String getOutputTarget()override
    {
        Configure _ccfig = getCurrentConfig();
        if (_ccfig != nilptr) {
            return String.formatPath(XEnvironment.MapVariable(this, _ccfig, _ccfig.getOption("outpath").appendPath(_ccfig.getOption("outname"))), false);
        }
        return nilptr;
    }

    public String getOutputName()override
    {
        Configure _ccfig = getCurrentConfig();
        if (_ccfig != nilptr) {
            return String.formatPath(XEnvironment.MapVariable(this, _ccfig, _ccfig.getOption("outname")), false);
        }
        return nilptr;
    }
    
    public bool setOption(@NotNilptr String key,@NotNilptr  String text)override
    {
        bModified = true;
        if (key.indexOf('.') == -1){
            root.remove(key);
            root.put(key, text);
            return true;
        }else{
            String [] sec = key.split('.');
            JsonObject parent = root;
            if (parent != nilptr){
                try{
                    for (int i = 0; i < sec.length && parent != nilptr; i++ ){
                        String _key = sec[i].trim(true);
                        
                        if (i + 1 == sec.length){
                            while (parent.has(_key)){
                                parent.remove(_key);
                            }
                            parent.put(_key, text);
                            return true;
                        }else{
                            JsonObject _parent = (JsonObject)parent.get(_key);
                            if (_parent == nilptr){
                                JsonObject _newnode = new JsonObject();
                                parent.put(_key, _newnode);
                                _parent = _newnode;
                            }
                            parent = _parent;
                        }
                    }
                }catch(Exception e){
                    
                }
            }
        }
        return false;
    }
    
    public bool importPackage(String packName, String ver)override
    {
        PackageManager pm = new PackageManager();
        if (pm.load()){
            PackageManager.PackageInfo pi = pm.findPackage(packName,ver);
            if (pi != nilptr){
                return importPkg(pi);
            }
        }
        return false;
    }

    public void deploy()override{
    	if (currentConfig != nilptr){
    		currentConfig.dodeploy(this);
        }
    }
    
    public void deployto(@NotNilptr String path)override{
    	if (currentConfig != nilptr){
    		currentConfig.dodeployto(this, path);
        }
    }
    
    public @NotNilptr  String getOption(@NotNilptr String key)override
    {
        String value = nilptr;
        
        if (key.indexOf('.') == -1){
            value = root.getString(key);
        }else{
            String [] sec = key.split('.');
            JsonObject parent = root;
            if (parent != nilptr){
                try{
                    for (int i = 0; i < sec.length && parent != nilptr; i++ ){
                        if (i + 1 == sec.length){
                            value = parent.getString(sec[i]);
                        }else{
                            parent = (JsonObject)parent.get(sec[i]);
                        }
                    }
                }catch(Exception e){
                    
                }
            }
        }
        
        if (value == nilptr) {
            return "";
        }
        
        return value;
    }

    public String readSlnFile(@NotNilptr String file)
    {
        FileInputStream fis = nilptr;
        try {
            fis = new FileInputStream(file);
        } catch(Exception e) {

        }
        if (fis != nilptr) {
            byte []data = fis.read();
            return new String(data);
        }

        return nilptr;
    }

    public void thread_build(Builder _builder, BuildListener l, XlangProjectProp. BuildParams params)
    {
        if (_propinterface != nilptr) {
            bool succ = true;
            
            if (PluginsController.callProjectPlugin(this,0)){
                succ = _propinterface.build(_builder, this, currentConfig, params);
                PluginsController.callProjectPlugin(this,1);
            }
            
            build_thread = nilptr;
            if (l != nilptr) {
                l.onBuild(succ);
            }
        } else {
            if (l != nilptr) {
                l.onBuild(false);
            }
        }
    }

    public void thread_cleanup(Builder _builder)
    {
        if (_propinterface != nilptr) {
            _propinterface.cleanup(_builder, this, currentConfig);
            build_thread = nilptr;
        }
    }

    public bool cleanup(@NotNilptr Builder _builder)
    {
        Builder.clearComm(true);

        synchronized(buildlock) {
            if (build_thread == nilptr) {
                StatusBarMgr.showWaitProgress("正在清理...");
                _builder.OutputText("[" + String.formatDate("%c", _system_.currentTimeMillis()) + "] 已启动清理...\n", 0);

                build_thread = new Thread() {
                    void run() {
                        thread_cleanup(_builder);
                        StatusBarMgr.hideProgress("清理完成");
                        _builder.OutputText("[" + String.formatDate("%c", _system_.currentTimeMillis()) + "] 清理完成.\n", 0);
                    }
                };
                build_thread.start();
            } else {
                return false;
            }
        }
        return true;
    }

    public bool build(@NotNilptr Builder _builder, BuildListener l, XlangProjectProp. BuildParams params)
    {

        synchronized(buildlock) {
            if (build_thread == nilptr) {

                Builder.clearComm(true);


                StatusBarMgr.showWaitProgress("正在编译...");
                _builder.OutputText("[" + String.formatDate("%c", _system_.currentTimeMillis()) + "] 已启动编译...\n", 0);
                XWorkspace.setProjectBuilding(true);
                build_thread = new Thread() {
                    void run() {
                        thread_build(_builder, l, params);
                        StatusBarMgr.hideProgress("编译完成");
                        updateSourceModified();
                        XWorkspace.workspace.runOnUi(new Runnable(){
                            void run(){
                                XWorkspace.setProjectBuilding(false);
                            }
                        });
                    }
                };
                build_thread.start();
            } else {
                if (l != nilptr) {
                    l.onBuild(false);
                }
                return false;
            }
        }
        return true;
    }

    public JsonArray getSources()override
    {
        return root.getArray("sources");
    }
    
    public String getComment()override
    {
        String text = root.getString("comment");
        if (text == nilptr) {
            text = "";
        }
        return text;
    }

    public JsonArray getExternLibs(Configure cfg){
        return _propinterface.getExternLibs(cfg);
    }
    
    public void setComment(String comment)override
    {
        bModified = true;
        if (comment == nilptr) {
            comment = "";
        }
        root.remove("comment");
        root.put("comment", comment);
    }

    public bool loadConfigure(@NotNilptr JsonObject configs)
    {
        JsonObject confi = (JsonObject)configs.child();

        while(confi != nilptr) {
            String cfgName = confi.getName();
            variables.setVariable("$(Configure)", cfgName);
            Configure cfg = new Configure(cfgName, confi);
            configures.put(cfgName, cfg);
            /*_system_.consoleWrite(cfgName + " load conf Ok\n");*/
            if (currentConfig == nilptr) {
                currentConfig = cfg;
            }
            confi = (JsonObject)confi.next();
        }

        return currentConfig != nilptr;
    }

    public bool loadProject(@NotNilptr JsonObject xworkspace, bool bconsole)
    {
        JsonObject proj = (JsonObject)xworkspace.child();
        if (proj != nilptr) {
            root = proj;
            projectName = proj.getName();
            languageConf = proj.getString("language");
            pluginsConf = proj.getString("plugins");
            if (false == loadConfigure((JsonObject)proj.get("configures"))) {
                if (bconsole == false) {
                    QMessageBox.Critical("错误", "找不到有效的项目配置.", QMessageBox.Ok, QMessageBox.Ok);
                } else {
                    _system_.consoleWrite(XPlatform.converToPlatformCharSet("找不到有效的配置") + "\n");
                }

                return false;
            }

            variables.setVariable("$(ProjectName)", projectName);
            variables.setVariable("$(ProjectLanguage)", languageConf);
            
            _propinterface = ProjectPropManager.getForProject(languageConf);
            
            if (_propinterface != nilptr){
                projectPlugin = _propinterface.getXPlugin();
            }
            
            if (projectPlugin == nilptr){
                if (pluginsConf != nilptr && pluginsConf.length() > 0){
                    projectPlugin = PluginsController.getPlugin(pluginsConf);
                }else{
                    projectPlugin = PluginsController.getPlugin(languageConf);
                }
            }
            
            if (_propinterface != nilptr) {
                return true;
            } else {
                if (bconsole == false) {
                    QMessageBox.Critical("错误", "不支持的项目类型.\n请注意: 没有为该类型项目提供配置文件.", QMessageBox.Ok, QMessageBox.Ok);
                } else {
                    _system_.consoleWrite(XPlatform.converToPlatformCharSet("不支持的项目类型.\n请注意: 没有为该类型项目提供配置文件:" + getLanguage()) + "\n");
                }
            }
        }
        return false;
    }
    public bool loadWorkspace(@NotNilptr String file, bool bconsole)
    {
        try {
            String content = readSlnFile(file);
            if (content != nilptr) {
                JsonObject _root = new JsonObject(content);
                loadProject(_root, bconsole);
                projpath = file;
                variables.setVariable("$(ProjectSlnFile)", file);
                projDir = String.formatPath(file.findVolumePath(), false);
                variables.setVariable("$(ProjectDir)", projDir);
                /*if (bconsole == false) {
                    reinitIntelliSense();
                }*/
                return true;
            }
        } catch(Exception e) {
            if (bconsole == false) {
                QMessageBox.Critical("错误", "加载项目时出现错误.", QMessageBox.Ok, QMessageBox.Ok);
            } else {
                _system_.consoleWrite(XPlatform.converToPlatformCharSet("加载项目时出现错误:" + file) + "\n");
            }
        }
        return false;
    }

    public bool createProject(@NotNilptr String name)
    {
        root = new JsonObject();
        root.put("version", XPROJECT_VERSION);
        root.put("name",name);
        root.put("language","xlang");

        Configure conf = new Configure();
        conf.createConfigure(name, root, "current");
        return true;
    }

    public @NotNilptr  String MapVariable(@NotNilptr String text)override
    {
        return XEnvironment.MapVariable(this, currentConfig ,text);
    }
    
    public @NotNilptr String getName()override
    {
        String pn = projectName;
        if (pn == nilptr){
            return "";
        }
        return pn;
    }

    public @NotNilptr String getLanguage()override
    {
        String pn = languageConf;
        if (pn == nilptr){
            return "unkonw";
        }
        return pn;
    }

    public bool addSource(@NotNilptr String filePath)override
    {
        String rfp = filePath.toRelativePath(getProjectDir(), false, false);
        /*_system_.consoleWrite(String.format(" %s toRelativePath %s = %s\n", filePath, getProjectDir(), rfp));*/
        if (rfp.length() == 0) {
            QMessageBox.Critical("注意", "无法将该文件转换为相对路径储存, 项目移植或者位置发生改动时将不能被正常编译!", QMessageBox.Ok, QMessageBox.Ok);
            rfp = filePath;
        }
        if (intelliSense != nilptr) {
            intelliSense.addSource(filePath);
        }
        if (root != nilptr) {
            JsonArray sources = root.getArray("sources");
            if (sources == nilptr) {
                sources = new JsonArray();
                root.put("sources", sources);
            }
            sources.put(rfp);
            bModified = true;
            XWndSln._slnView.updateAppendSource(this, 1);
            return true;
        }
        return false;
    }

    public String replaceSource(int index,@NotNilptr String filePath)override
    {
        String rfp = filePath.toRelativePath(getProjectDir(), false, false);
        /*_system_.consoleWrite(String.format(" %s toRelativePath %s = %s\n", filePath, getProjectDir(), rfp));*/
        if (rfp.length() == 0) {
            QMessageBox.Critical("注意", "无法将该文件转换为相对路径储存, 项目移植或者位置发生改动时将不能被正常编译!", QMessageBox.Ok, QMessageBox.Ok);
            rfp = filePath;
        }
        if (root != nilptr) {
            JsonArray sources = root.getArray("sources");
            if (sources == nilptr) {
                sources = new JsonArray();
                root.put("sources", sources);
            }
            //替换原有的
            sources.put(index, rfp);

            bModified = true;
            return rfp;
        }
        return nilptr;
    }

    public bool save()override
    {
        FileOutputStream fos = nilptr;
        try {
            fos = new FileOutputStream(projpath);
        } catch(Exception e) {

        }

        if (fos != nilptr) {
            JsonObject json = new JsonObject();
            json.put(projectName, root);
            byte []data = json.toString(true).getBytes();
            bModified = false;

            Map.Iterator<String, Configure> iter = configures.iterator();

            while (iter.hasNext()) {
                Configure cfg = iter.getValue();
                if (cfg != nilptr){
                    cfg.save();
                }
                iter.next();
            }
            return fos.write(data) == data.length;
        }

        return false;
    }

    public Project clone(String newName)
    {
        JsonObject json = new JsonObject();
        json.put(newName, root);
        String content = json.toString(true);

        Project newpj = new Project();
        newpj.root = new JsonObject(content);
        return newpj;
    }

    public bool saveAsTemplate(String templateName, String descr)
    {
        Map<String, String> dirs = new Map<String, String>();
        Vector<String> predir = new Vector<String>();

        String slash = String.formatPath("/", false);

        for (int i = 0, c = getSourceFileCount(); i < c; i ++) {
            String source = String.formatPath(getSourcePath(i), false);
            String filerelaPath = source.toRelativePath(projDir, false, true);
            String[] sp = filerelaPath.split(slash);

            String dir = "";

            if (sp.length > 0) {
                for (int x = 0; x < sp.length - 1; x++) {
                    if (sp[x].equals("..")) {
                        return false;
                    }
                    if (sp[x].equals(".")) {
                        continue;
                    } else {
                        if (dir.length() > 0) {
                            dir.appendPath(sp[x]);
                        } else {
                            dir = sp[x];
                        }
                    }
                    if (dirs.containsKey(dir) == false) {
                        dirs.put(dir, nilptr);
                        predir.add(dir);
                    }
                }

            }

            if (filerelaPath.lower().endWith(".xprj") == false) {
                dirs.put(source, filerelaPath);
            }

        }
        String newid = "" + Math.random() + "-" + _system_.currentTimeMillis() ;
        String tempfile = "./config/" + newid + ".utemp";

        String temppath = XPlatform.getAppDirectory().appendPath(tempfile);

        try {
            FileOutputStream fis = new FileOutputStream(temppath);
            ZipArchive zs = new ZipArchive();

            if (zs.create(fis)) {

                for (int i = 0, c = predir.size(); i < c; i++) {
                    zs.createEntry(new ZipFile(predir.get(i), nilptr, true, _system_.currentTimeMillis()));
                }

                Map.Iterator<String, String> iter = dirs.iterator();

                while (iter.hasNext()) {
                    String relval = iter.getValue();
                    String relkey = iter.getKey();
                    if (relval != nilptr && relkey != nilptr) {
                        zs.createEntry(new ZipFile(relval, new FileInputStream(relkey), false, _system_.currentTimeMillis()));
                    }
                    iter.next();
                }

                String temp_proj = projpath.append(".temptelate");
                JsonObject new_proot = new JsonObject();
                new_proot.put("${ProjectName}", root);

                try {
                    FileOutputStream pfos = new FileOutputStream(temp_proj);
                    pfos.write(new_proot.toString(true).getBytes());
                    pfos.close();
                } catch(Exception e) {
                    return false;
                }

                zs.createEntry(new ZipFile("${ProjectName}.xprj", new FileInputStream(temp_proj), false, _system_.currentTimeMillis()));

                zs.close();

                JsonObject temproot = new JsonObject();
                temproot.put("name", templateName);
                temproot.put("uuid", newid);
                temproot.put("language", languageConf);
                temproot.put("icon", "config/xlang.png");
                temproot.put("platform", "用户自定义");
                temproot.put("details", descr);
                temproot.put("user", "project");

                String confFile = "./config/project_navigation.conf";
                byte []data ;

                try {
                    FileInputStream fiss = new FileInputStream(confFile);
                    data = fiss.read();
                    fiss.close();
                } catch(Exception e) {
                    return false;
                }

                String projections = new String(data);
                JsonObject pjroot = new JsonObject(projections);
                JsonObject Navigation = (JsonObject)pjroot.get("Navigation");

                if (Navigation == nilptr) {
                    Navigation = new JsonObject();
                    pjroot.put("Navigation", Navigation);
                }

                JsonObject project_class = (JsonObject)Navigation.get("project");

                if (project_class == nilptr) {
                    project_class = new JsonObject();
                    Navigation.put("project", project_class);
                }

                JsonArray language_class = (JsonArray)project_class.get(languageConf);
                if (language_class == nilptr) {
                    language_class = new JsonArray();
                    Navigation.put(languageConf, language_class);
                }

                language_class.put(temproot);

                try {
                    FileOutputStream foss = new FileOutputStream(confFile);
                    foss.write(pjroot.toString(true).getBytes());
                } catch(Exception e) {
                    return false;
                }
            }

            return true;
        } catch(Exception e) {

        }
        return false;
    }
    
    public bool saveAs(@NotNilptr String path)override
    {
        FileOutputStream fos = nilptr;
        try {
            fos = new FileOutputStream(path);
        } catch(Exception e) {

        }

        if (fos != nilptr) {
            byte []data = root.toString(true).getBytes();
            return fos.write(data) == data.length;
        }

        return false;
    }

    public String getSourcePath(int id)override
    {
        String path = getSourceItem(id);
        if (path != nilptr) {
            return getFullPath(path);
        }
        return path;
    }
    /*String getSourceFullPath(int id){
    	String source_path = getSource(id);
    	return getFullPath(source_path);
    }*/
    public @NotNilptr String generateFullPath(@NotNilptr String source_path)override
    {
        String fullpath = source_path.toAbsolutePath(getProjectDir());
        return String.formatPath(fullpath, false);
    }

    public @NotNilptr String getFullPath(@NotNilptr String source_path)override
    {
        String fullpath = String.formatPath(source_path.toAbsolutePath(getProjectDir()), false).replace("\\", "/");

        String finalpath;

        if (XPlatform.existsSystemFile(fullpath)) {
            finalpath = fullpath;
        } else {
            finalpath = source_path;
        }

        return String.formatPath(finalpath, false);
    }
    public @NotNilptr String getProjectDir()override
    {
        return projpath.findVolumePath();
    }

    public int getSourceFileCount()override
    {
        JsonArray sources = root.getArray("sources");
        if (sources != nilptr){
            return sources.length();
        }
        return 0;
    }

    public String getSourceItem(int id)override
    {
        JsonArray sources = root.getArray("sources");
        if (sources != nilptr){
            return sources.getString(id);
        }
        return "";
    }
    public void removeSource(int id)override
    {
        String szFile = getSourcePath(id);
        if (intelliSense != nilptr) {
            intelliSense.updateSource(szFile, nilptr);
        }
        try {
            JsonArray sources = root.getArray("sources");
            if (sources != nilptr){
                sources.remove(id);
            }
            bModified = true;
        } catch(Exception e) {

        }

    }

    public String rename(int sourceID,@NotNilptr  String newname)override
    {
        String path = getSourcePath(sourceID);
        
        if (path != nilptr && _system_.rename(path, newname)) {
            if (intelliSense != nilptr) {
                intelliSense.updateSource(path, newname);
            }
            String shortname =  replaceSource(sourceID, newname);
            if (shortname != nilptr) {
                XSourceEditor.updateDocumentTo(path, newname);
                return shortname;
            }
        }
        return nilptr;
    }

    public bool isPathSeted()override
    {
        return projpath != nilptr;
    }

    public String getPath(){
        return projpath;
    }
    public void setPath(String path)override
    {
        projpath = path;
    }

    public bool isModified()override
    {
        if (bModified == false) {
            Map.Iterator<String, Configure> iter = configures.iterator();
            while (iter.hasNext()) {
                Configure cfg = iter.getValue();
                if (cfg != nilptr && cfg.isModified()) {
                    return true;
                }
                iter.next();
            }
            return false;
        }
        return true;
    }

    public void debugRun(IBuilder builder)
    {
        XMemoryWnd.reset();
        MemoryLookupWnd.reset();
        _propinterface.debugRun(builder, this, currentConfig);
    }

    public void stopRun()
    {
        _propinterface.stopRun();
    }
    public void Run(IBuilder builder)
    {
        _propinterface.Run(builder, this, currentConfig);
    }
    public void updateXintelliSense()
    {
        if (intelliSense != nilptr){
            String content = intelliSense.getIntelliSenseMap();
            //_system_.consoleWrite(content);
            try {
                xintelliSenseMap = new JsonObject(content);
            } catch(Exception e) {
                xintelliSenseMap = nilptr;
            }
        }
    }

    public void extartReadMe(@NotNilptr ZipArchive zs)
    {
        ZipEntry entry = zs.findEntry("readme.md");
        if (entry != nilptr) {
            ZipFile zf = entry.getFile();
            if (zf.open()) {
                String text = "\n################################# README.MD #################################\n";
                byte [] data = new byte[1024];
                int rd = 0;
                while ((rd = zf.read(data, 0, 1024)) > 0) {
                    text = text + (new String(data, 0, rd));
                }
                text = text + "\n################################# README.END #################################\n\n\n";
                XWndOutput.Output(text, 0);
                zf.close();
            }
        }
    }


    public bool importPkg(@NotNilptr PackageManager.PackageInfo pi)
    {
        try {
            FileInputStream fis = new FileInputStream(pi.filepath);
            ZipArchive zs = new ZipArchive();
            if (zs.open(fis)) {

                extartReadMe(zs);

                bool isxl = false;
                
                ZipEntry entry = zs.findEntry("major.lix");
                if (entry == nilptr){
                    entry = zs.findEntry("major.xl");
                    isxl = true;
                }
                
                if (entry == nilptr){
                    XWndOutput.Output("注意:无效的包:" + pi.name + ".\n", 0);
                    zs.close();
                    fis.close();
                    return false;
                }
                String lixName = pi.name + "_" + pi.version + (isxl ? ".xl" : ".lix");

                String destpath = projDir.appendPath("libs");

                XPlatform.mkdir(destpath);

                String destlix = destpath.appendPath(lixName);

                XWndOutput.Output("生成引用库: " + destlix + " ....   ", 0);

                int rd = 0;
                ZipFile zfile = entry.getFile();
                if (zfile.open()) {
                    FileOutputStream fos = new FileOutputStream(destlix);

                    byte [] data = new byte[1024];
                    while ((rd = zfile.read(data, 0, 1024)) > 0) {
                        fos.write(data, 0, rd);
                    }

                    zfile.close();
                    fos.close();
                    XWndOutput.Output("成功.\n", 0);
                    if (currentConfig.importPkg(this, pi, zs, lixName, pi.name, pi.version)) {
                        XWndOutput.Output("注意:此包含有运行时文件, 项目目标程序运行位置发生改变时可能需要依赖.\n", 0);
                    }
                }
                zs.close();
            }

            fis.close();
            save();
            return true;
        } catch(Exception e) {

        }
        return false;
    }
    
    public ProjectPropInterface getPropInterface(){ return  _propinterface;}
    
    Object intellock = new Object();
    int intellsence_serial = 0;
    
    public void reinitIntelliSense()override{
        int k = 0;
        new Thread(){
            void run()override{
                IXIntelliSense _intellsence = nilptr;
                int current_intellsence_serial = 0;
                
                synchronized(intellock){
                    if (intelliSense != nilptr){
                        intelliSense.close();
                        intelliSense = nilptr;
                    }
                    intellsence_serial++;
                    current_intellsence_serial = intellsence_serial;
                    _intellsence = _propinterface.allocIntelliSense(Project.this, currentConfig);
                }
                
                if (_intellsence != nilptr){
                    bool succeed = _intellsence.initializ();
                    
                    if (succeed){
                        synchronized(intellock){
                            if (current_intellsence_serial == intellsence_serial){
                                intelliSense = _intellsence;
                                succeed = true;
                            }else{
                                succeed = false;
                            }
                        }
                        
                        if (succeed){
                            XWorkspace.workspace.XIntelliSense();
                        }
                    }
                    if (succeed == false){
                        _intellsence.close();
                    }
                }
            }
        }.start();
    }
    
    public IXPlugin getProjectPlugin(){
        return projectPlugin;
    }
};