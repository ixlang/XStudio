//xlang Source, Name:Setting.xcsm 
//Date: Wed Sep 16:29:18 2018 

class Setting : QDialog {
	static JsonObject _template_root;
    static QRect rect = nilptr;
    
    public bool onClose(){
        rect = new QRect(x(), y(), width(), height());
        return true;
    }
	public static class Preference{
		JsonObject root;

		public Preference(){
			loadPreference();
        }
        
		public @NotNilptr  String getSetting(String [] options,@NotNilptr String key){
			String val = root.getString(key);
            if (val == nilptr){
				val = "";
            }
            if (options != nilptr){
				for (int i = 0; i < options.length; i++){
					if (options[i].equals(val)){
						val = "" + i;
                        break;
                    }
                }
            }
            return val;
		}
		
		public bool setSetting(@NotNilptr String key,String val){
            if (val == nilptr){
                val = "";
            }
            while (root.has(key)){ 
                root.remove(key);
            }
			root.put(key, val);
			return true;
		}
        
        
        public String getPreferencePath(){
			String file = XPlatform.getAppDirectory();
			return file.appendPath("config").appendPath("preference.prop");
        }
        
        public void loadPreference(){

            String file = getPreferencePath();
            
            if (file != nilptr){
                FileInputStream fis = nilptr;
                try{
                    fis = new FileInputStream(file);
                }catch(Exception e){
                    _system_.consoleWrite("canot read file " + file);
                }
                
                if (fis != nilptr){
                    byte []data = fis.read();
                    String content = new String(data);
                    
                    try{
                        root = new JsonObject(content);
                    }catch(Exception e){
                        
                    }
                }
            
                if (root == nilptr){
                    root = new JsonObject();
                }
            }
        }
        
        public void apply(@NotNilptr JsonObject template){
        
			if (root != nilptr){
				JsonObject keys = (JsonObject)template.get("加速键");
                
                if (keys == nilptr){
                    return;
                }
                JsonObject skey = (JsonObject)keys.child();
               
                if (skey != nilptr){
                    Map<String, String> keyMap = new Map<String, String>();
                    bool bConflict = false;
                    
                    while ((skey = (JsonObject)skey.next()) != nilptr){
                        String name = skey.getName();
                        if (name != nilptr){
                            String []names = name.split(":");
                            
                            if (names.length == 2){
                                String keyname = names[1];
                                String shortkey = root.getString(names[1]);
                                
                                if (shortkey == nilptr){
                                    shortkey = "";
                                }
                                if (XMenuManager._menuMgr != nilptr && XMenuManager._menuMgr.mainwindow != nilptr){
                                    QAction action = (QAction)XMenuManager._menuMgr.mainwindow.findByName(keyname);
                                    if (action != nilptr){
                                        action.setShortcut(shortkey);
                                    }
                                }
                                if (shortkey.length() > 0){
                                    Map.Iterator<String,String> iter = keyMap.find(shortkey);
                                    if (iter != nilptr){
                                        String oldKey = iter.getValue();
                                        XWndOutput.outputWnd.Output("加速键 [" + names[0] + "] 与 [" + oldKey + "] 存在冲突:" + shortkey + "\n", 0);
                                        bConflict = true;
                                    }else{
                                        keyMap.put(shortkey, names[0]);
                                    }
                                }
                            }
                        }
                    }
                    
                    XStackInfor.setThreadOuputStatus(outputThreadStat());
                    XLogcatWnd.setMaxItems(getLogcatMaxitems());
                    if (bConflict){
                        QMessageBox.Critical("注意","加速键存在冲突, 可能不会生效.",QMessageBox.Ok,QMessageBox.Ok);
                    }
                }
            }
			
        }
        
        public void save(){
                   
            String file = getPreferencePath();
            if (file != nilptr){
                FileOutputStream fos = nilptr;
                try{
                    fos = new FileOutputStream(file);
                }catch(Exception e){
                    _system_.consoleWrite("canot read file " + file);
                }
                
                if (fos != nilptr){
                    String content = root.toString(true);
                    byte []data = content.getBytes();
                    try{
                        fos.write(data);
                    }catch(Exception e){
                        
                    }
                    fos.close();
                }
            }
        }
    };
    
    
    static bool bTemplateLoaded = loadTemplate();
    static Preference preference = new Preference();
    
    QPushButton btnClose;
    
    QTreeWidget _listview;
    
    QPropertyBrowser _propTable = new QPropertyBrowser();
    QScintilla             _sci = new QScintilla();
    
    class ItemRecord{
        public JsonObject obj;
        public IXPlugin plugin;
        
        
        public ItemRecord(JsonObject str, IXPlugin xp){
            obj = (JsonObject)str.clone();
            plugin = xp;
        }
        
        
    };
    
    class ItemValue{
        public ItemRecord ir;
        public String defaultText;
        
        public ItemValue(ItemRecord _ir, String ds){
            ir = _ir;
            defaultText = ds;
        }
        public ItemValue(ItemRecord _ir){
            ir = _ir;
        }
    };
    
    Vector<ItemRecord> _propItems = new Vector<ItemRecord>();
    
    Map<String, QPropertyBrowser.QtVariantProperty> currentProps = new Map<String, QPropertyBrowser.QtVariantProperty>();

	int current_sel_setting = 0;
    bool showSci = false;
    
    onTreeViewItemEvent listlistener = new onTreeViewItemEvent(){
        public void onItemClicked(@NotNilptr QTreeWidget list,long item, int column)override{
            current_sel_setting = list.getItemTag(item, 0);
            String seltext = _listview.getItemText(item,0);
            showSci = seltext.equals("文本编辑器配色");
            saveSetting();
			reloadProperty();
        }
    };
    

	public void reloadProperty(){
		_propTable.clear();
		currentProps.clear();
		if (current_sel_setting >=0 && current_sel_setting < _propItems.size()){
            ItemRecord jo = _propItems.get(current_sel_setting);
            if (jo != nilptr){
                loadFeature((JsonObject)jo.obj.child(), jo);
                
                int w = width(), h = height();
                
                if (showSci){
                    _sci.show();
                    // top = 40
                    _propTable.resize(w - 200, h - 290);
                    syntaxForXlang();
                    _sci.move(170,h - 230);
                    _sci.resize(w - 200,190);
                }else{
                    _sci.hide();
                    _propTable.resize(w - 200, h - 90);
                }
            }
            //在这里注意
		}
    }
    
    public static String readSlnPropFile(@NotNilptr String file){
        FileInputStream fis = nilptr;
        try{
            fis = new FileInputStream(file);
        }catch(Exception e){
            _system_.consoleWrite("canot read file " + file);
        }
        
        if (fis != nilptr){
            byte []data = fis.read();
            return new String(data);
        }
        
        return nilptr;
    }

    public static bool loadTemplate(){
    	String file = XPlatform.getAppDirectory();
        file = file.appendPath("config").appendPath("setting.prop");
        String content = readSlnPropFile(file);
        if (content != nilptr){
            try{
                _template_root = new JsonObject(content);
            }catch(Exception e){
                
            }
            return true;
        }
        return false;
    }
    
    public bool loadSetting(){
		if (_template_root == nilptr){
			loadTemplate();
        }
        
        
            
        bool noload = false;
		if (_template_root != nilptr){
			 loadProperites((JsonObject)_template_root.child(), nilptr, noload);
             noload = true;
        }
        
        loadPlugins(noload);
        

        return true;
    }
    
    bool oldbuildinsetting = false;
    public void onAttach(){
        //setWindowFlags(CustomizeWindowHint | WindowMinMaxButtonsHint | WindowCloseButtonHint  | Tool);
        _listview = (QTreeWidget)attachByName(new QTreeWidget(), "listProp");
        
        _propTable.create(this);
        _propTable.move(170, 40);
        _propTable.resize(500, 410);
        
     
        _propTable.setLables("项","值");
        _propTable.enableAdjust(true);
        _propTable.setHeaderWidths(200, 300);
        
        String [] columns = {"选项"};
        _listview.setColumns(columns);
        _listview.setOnTreeViewItemEvent(listlistener);
   
        _sci.create(this);
        _sci.move(170, 40);
        _sci.resize(500, 410);
        _sci.hide();
        _sci.setText("//xlang " +
                                "\npackage System{" +
                                "\n	public class out{" +
                                "\n		public static int println(String text){"	+
                                "\n			return _system_.consoleWrite(text + \"\\n\");" +
                                "\n		}"	+
                                "\n		public static int print(String text){"	+
                                "\n			return _system_.consoleWrite(text);" +
                                "\n		}"	+
                                "\n	};" +
                                "\n	"	+
                                "\n	public class Console{"	+
                                "\n		public Console(){"	+
                                "\n			_system_.createConsole();" +
                                "\n		}" +
                                "\n	};" +
                                "\n};" +
                                "\n\n" +
                                "\nusing { System; };"	+
                                "\n\n" +
                                "\nint main(String [] args){"	+
                                "\n\n	new Console();"	+
                                "\n\n	System.out.println(\"hello world\");" +
                                "\n\n	_system_.sleep(3000);"	+
                                "\n\n	return 0;"	+
                                "\n}\n");
        
        _sci.sendEditor(QScintilla.SCI_MARKERADD, 1, 8);
        _sci.sendEditor(QScintilla.SCI_MARKERADD, 2, 9);
        _sci.sendEditor(QScintilla.SCI_MARKERADD, 3, 12);
        _sci.sendEditor(QScintilla.SCI_MARKERADD, 4, 13);
        
        if (loadSetting() == false){
            close();
            return ;
        }
        
		btnClose = (QPushButton)attachByName(new QPushButton(), "btnClose");

        btnClose.setOnClickListener(
        new onClickListener(){
            public void onClick(QObject obj, bool checked)override{
                saveSetting();
                applySetting();
                //QApp.statusBar.showStatusMessage("部分设置需要在XStudio重新开启后生效.");
                if (oldbuildinsetting != isShowBuildin()){
					XWndClass.refresh();
				}
                close();
            }
        });
        
        setOnLayoutEventListener(new onLayoutEventListener(){
                public void onResize(QObject obj, int w, int h, int oldw, int oldh)override {
					_listview.resize(141, h - 50);
					btnClose.move(w - 100, h - 40);
					//_propTable.move(170, 40);
                    
                    if (showSci == false){
                        _propTable.resize(w - 200, h - 90);
                    }else{
                        _propTable.resize(w - 200, h - 290);
                        
                        _sci.move(170,h - 230);
                        _sci.resize(w - 200,190);
                    }
					
                }
        });
		
        setWindowTitle("设置");
        setWindowIcon("./res/toolbar/prop.png");
        if (rect != nilptr){
            move(rect.left,rect.top);
            resize(rect.right,rect.bottom);
        }
        setModal(true);
        show();
        oldbuildinsetting = isShowBuildin();//XWorkspace.workspace.XIntelliSense();
    }
    
    
    
    public void loadFeature(@NotNilptr JsonObject confi, ItemRecord xp){

        QPropertyBrowser.QtVariantPropertyManager variantManager = new QPropertyBrowser.QtVariantPropertyManager(_propTable);
        
        while(confi != nilptr){
            String cfgName = confi.getName();
            String type = confi.getString("type");
            if (cfgName != nilptr && type != nilptr){
                if (cfgName.split(':').length == 2){
                    if (type.equals("string")){
                        loadString(variantManager, cfgName, confi, xp);
                    }else
                    if (type.equals("stringlist")){
                        loadStringList(variantManager, cfgName, confi, xp);
                    }else
                    if (type.equals("keysequence")){
                        loadKeySequence(variantManager, cfgName, confi, xp);
                    }else
                    if (type.equals("color")){
                        loadColor(variantManager, cfgName, confi, xp);
                    }else
                    if (type.equals("options")){
                        loadOptions(variantManager, cfgName, confi, xp);
                    }else
                    if (type.equals("bool")){
                        loadBoolean(variantManager, cfgName, confi, xp);
                    }else
                    if (type.equals("text")){
                        loadTextItem(variantManager, cfgName, confi, xp);
                    }else
                    if (type.equals("params")){
                        loadTextparams(variantManager, cfgName, confi, xp);
                    }else
                    if (type.equals("fileout")){
                        loadSavePath(variantManager, cfgName, confi, xp);
                    }else
                    if (type.equals("filein")){
                        loadOpenPath(variantManager, cfgName, confi, xp);
                    }else
                    if (type.equals("folder")){
                        loadPath(variantManager, cfgName, confi, xp);
                    }
                }
            }
            confi = (JsonObject)confi.next();
        }
        _propTable.setFactoryForManager(variantManager, new QPropertyBrowser.QtVariantEditorFactory(_propTable));
        _propTable.setPropertiesWithoutValueMarked(true);
        _propTable.setRootIsDecorated(false);
    }
    
    
    public bool loadPlugins(bool noload)
    {
        Map.Iterator<String, XPluginShell> iter = PluginsController.plugins_list.iterator();
        while (iter.hasNext()) {
            XPluginShell splug = iter.getValue();
            if (splug != nilptr && (splug._plugin != nilptr) && (splug.inited)) {
                IXPlugin xp = splug._plugin;
                String strSetting = xp.getSetting();
                if (strSetting != nilptr){
                    try{
                        loadProperites((JsonObject)(new JsonObject(strSetting).child()), xp, noload);
                        noload = true;
                    }catch(Exception e){
                        
                    }
                }
            }
            iter.next();
        }
        return true;
    }
    
    public void loadProperites( @NotNilptr JsonObject root, IXPlugin xp, bool noload){
        bool loaded = noload;
        //new QPropertyBrowser.QtVariantPropertyManager()
		while(root != nilptr){
			String featName = root.getName();
			
			JsonObject confi = (JsonObject)root.child();
            
            if (confi != nilptr){
                long litem = _listview.addItem(nilptr, featName);
                _listview.setItemTag(litem, 0, _propItems.size());
                ItemRecord jo = new ItemRecord(root, xp);
                _propItems.add(jo);
                if (loaded == false){
                    loadFeature(confi, jo);
                    loaded = true;
                }
            }
            
			root = (JsonObject)root.next();
		}
    }
    
    public void loadOpenPath(@NotNilptr QPropertyBrowser.QtVariantPropertyManager manager, @NotNilptr String name, @NotNilptr JsonObject root, ItemRecord xp){
        String [] kv = name.split(':');
        QPropertyBrowser.QtVariantProperty item = (QPropertyBrowser.QtVariantProperty)manager.addEnumProperty(new QPropertyBrowser.QtVariantProperty(), kv[0]);
        String defaultValue = getSetting(nilptr, kv[1]);
        
        item.setTagObject(new ItemValue(xp));
        
        String [] options = new String[2];
        options[0] = defaultValue;
        options[1] = "<浏览...>";
        item.setAttributeEnumNames(options);
        
        manager.setPropertyEventListener(item,
        new QPropertyBrowser.PropertyManager.onPropertyEventListener(){
            void onVariantPropertyValueChanged(long prop, int dataType, String stringValue)override{
                if (stringValue != nilptr){
                    if (stringValue.parseInt() != 0){
                        item.setValue(defaultValue);
                        String newValue = QFileDialog.getOpenFileName("浏览 - " + kv[0], options[0],"*",Setting.this);
                        if (newValue != nilptr){
                            //_prop.setValue(_project,_curconfig, kv[1], newValue);
                            options[0] = newValue;
                            item.setAttributeEnumNames(options);
                        }
                        item.setValue("0");
                    }
                }
            }
        });
        _propTable.addProperty(item);
        currentProps.put(kv[1], item);
    }
    
    public void loadPath(@NotNilptr QPropertyBrowser.QtVariantPropertyManager manager,@NotNilptr  String name, @NotNilptr JsonObject root, ItemRecord xp){
        String [] kv = name.split(':');
        QPropertyBrowser.QtVariantProperty item = (QPropertyBrowser.QtVariantProperty)manager.addEnumProperty(new QPropertyBrowser.QtVariantProperty(), kv[0]);
        String defaultText = getSetting(nilptr, kv[1]);
        
        String [] options = new String[2];
        options[0] = defaultText;
        options[1] = "<浏览...>";
        item.setAttributeEnumNames(options);
        item.setTagObject(new ItemValue(xp));
        
        manager.setPropertyEventListener(item,
        new QPropertyBrowser.PropertyManager.onPropertyEventListener(){
            void onVariantPropertyValueChanged(long prop, int dataType, String stringValue)override{
                if (stringValue != nilptr){
                    if (stringValue.parseInt() != 0){
                        item.setValue("0");
                        String newValue = QFileDialog.getFolderPath("选择目录",options[0],nilptr,Setting.this);
                        if (newValue != nilptr){
                            options[0] = newValue;
                            item.setAttributeEnumNames(options);
                        }
                        item.setValue("0");
                    }
                }
            }
        });
        _propTable.addProperty(item);
        currentProps.put(kv[1], item);
    }
    
    public void loadSavePath(@NotNilptr QPropertyBrowser.QtVariantPropertyManager manager,@NotNilptr  String name,@NotNilptr  JsonObject root, ItemRecord xp){
        String [] kv = name.split(':');
        QPropertyBrowser.QtVariantProperty item = (QPropertyBrowser.QtVariantProperty)manager.addEnumProperty(new QPropertyBrowser.QtVariantProperty(), kv[0]);
        String defaultValue = getSetting(nilptr, kv[1]);
        
        String [] options = new String[2];
        options[0] = defaultValue;
        options[1] = "<浏览...>";
        item.setAttributeEnumNames(options);
        item.setTagObject(new ItemValue(xp));
        
        manager.setPropertyEventListener(item,
        new QPropertyBrowser.PropertyManager.onPropertyEventListener(){
            void onVariantPropertyValueChanged(long prop, int dataType, String stringValue)override{
                if (stringValue != nilptr){
                    if (stringValue.parseInt() != 0){
                        item.setValue(defaultValue);
                        String newValue = QFileDialog.getOpenFileName("浏览 - " + kv[0], options[0],"*",Setting.this);
                        if (newValue != nilptr){
                            //_prop.setValue(_project,_curconfig, kv[1], newValue);
                            options[0] = newValue;
                            item.setAttributeEnumNames(options);
                        }
                        item.setValue("0");
                    }
                }
            }
        });
        _propTable.addProperty(item);
        currentProps.put(kv[1], item);
    }
    
    public void loadTextparams(@NotNilptr QPropertyBrowser.QtVariantPropertyManager manager,@NotNilptr  String name, @NotNilptr JsonObject root, ItemRecord xp){
        String [] kv = name.split(':');
        
        QPropertyBrowser.QtVariantProperty item = (QPropertyBrowser.QtVariantProperty)manager.addEnumProperty(new QPropertyBrowser.QtVariantProperty(), kv[0]);
        
        item.setFlags(2);
        
        String defaultValue = getSetting(nilptr, kv[1]);
        ItemValue iv = new ItemValue(xp, defaultValue);

        item.setTagObject(iv);
        
        String simpleValue = "", detailValue = "";
        try{
            JsonArray jarv = new JsonArray(defaultValue);
            for (int i = 0, c = jarv.length(); i < c; i++){
                String value = jarv.getString(i);
                if (detailValue.length() > 0){
                    detailValue = detailValue + "\n" + value;
                    simpleValue = simpleValue + ";" + value;
                }else{
                    detailValue = value;
                    simpleValue = value;
                }
            }
        }catch(Exception e){
            
        }
        
        String [] options = new String[2];
        options[0] = simpleValue;
        options[1] = "<编辑...>";
        

        item.setAttributeEnumNames(options);
        
        manager.setPropertyEventListener(item,
        new QPropertyBrowser.PropertyManager.onPropertyEventListener(defaultValue){
            public onPropertyEventListener(String def){
                defText = def;
            }
            String defText = "";
            void onVariantPropertyValueChanged(long prop, int dataType, String stringValue)override{
                if (stringValue != nilptr){
                    if (stringValue.parseInt() != 0){
                    
                        TextDetail td = nilptr;
                        td = new TextDetail(new TextDetail.closeListener() {
                            void onClose(@NotNilptr String text, bool updated) {
                                if (updated){
                                    detailValue = text.trim(true);
                                    String [] newValue = detailValue.split('\n');
                                    JsonArray jset = new JsonArray();
                                    for (int i = 0; i < newValue.length; i++){
                                        jset.put(newValue[i]);
                                    }
                                    defText = jset.toString(true);
                                    iv.defaultText = defText;
                                    //_prop.setValue(_project,_curconfig, kv[1], defaultValue);
                                    simpleValue = text.trim(true).replace("\n", ";");
                                    options[0] = simpleValue;
                                    item.setAttributeEnumNames(options);
                                }
                                item.setValue("0");
                            }

                            void onCreate() { 
                                td.centerScreen();
                            }
                        });
                        td.create("编辑 - " + kv[0], detailValue, Setting.this, true);
                    }
                }
            }
        });
        _propTable.addProperty(item);
        currentProps.put(kv[1], item);
    }
    
    public void loadTextItem(@NotNilptr QPropertyBrowser.QtVariantPropertyManager manager,@NotNilptr  String name,@NotNilptr  JsonObject root, ItemRecord xp){
        String [] kv = name.split(':');
        QPropertyBrowser.QtVariantProperty item = (QPropertyBrowser.QtVariantProperty)manager.addEnumProperty(new QPropertyBrowser.QtVariantProperty(), kv[0]);
        String defaultValue = getSetting(nilptr, kv[1]);
        item.setTagObject(new ItemValue(xp));
        String [] options = new String[2];
        options[0] = defaultValue;
        options[1] = "<编辑...>";
        item.setAttributeEnumNames(options);
        
        manager.setPropertyEventListener(item,
        new QPropertyBrowser.PropertyManager.onPropertyEventListener(){
            void onVariantPropertyValueChanged(long prop, int dataType, String stringValue)override{
                if (stringValue != nilptr){
                    if (stringValue.parseInt() != 0){
                    
                        TextDetail td = nilptr;
                        td = new TextDetail(new TextDetail.closeListener() {
                            void onClose(@NotNilptr String text, bool updated) {
                                if (updated){
                                    String newValue = text.trim(true);
                                    //_prop.setValue(_project,_curconfig, kv[1], newValue);
                                    options[0] = newValue;
                                    item.setAttributeEnumNames(options);
                                }
                                item.setValue("0");
                            }

                            void onCreate() {
                                td.centerScreen();
                            }
                        });
                        
                        td.create("编辑 - " + kv[0], options[0], Setting.this, true);
                        
                    }
                }
            }
        });
        _propTable.addProperty(item);
        currentProps.put(kv[1], item);
    }
    
    public void loadString(@NotNilptr QPropertyBrowser.QtVariantPropertyManager manager,@NotNilptr  String name,@NotNilptr  JsonObject root, ItemRecord xp){
        String [] kv = name.split(':');
        QPropertyBrowser.QtVariantProperty item = (QPropertyBrowser.QtVariantProperty)manager.addProperty(new QPropertyBrowser.QtVariantProperty(),QVariant.String, kv[0]);
        
        item.setTagObject(new ItemValue(xp));
        
        _propTable.addProperty(item);
        item.setValue(getSetting(nilptr, kv[1]));
        currentProps.put(kv[1], item);
    
    }

    public void loadBoolean(@NotNilptr QPropertyBrowser.QtVariantPropertyManager manager,@NotNilptr  String name,@NotNilptr  JsonObject root, ItemRecord xp){
        String [] kv = name.split(':');
        QPropertyBrowser.QtVariantProperty item = (QPropertyBrowser.QtVariantProperty)manager.addEnumProperty(new QPropertyBrowser.QtVariantProperty(), kv[0]);
  
        item.setTagObject(new ItemValue(xp));
        item.setFlags(1);
        
        String selvalue = getSetting(nilptr , kv[1]);
        
        if (selvalue != nilptr){
            if (selvalue.equals("True")){
                selvalue = "1";
            }else{
                selvalue = "0";
            }
        }
    
        String [] options = {"否(False)", "是(True)"};

        
        item.setAttributeEnumNames(options);
        item.setValue(selvalue);
        _propTable.addProperty(item);
        currentProps.put(kv[1], item);
        
    }
    
    public void loadOptions(@NotNilptr QPropertyBrowser.QtVariantPropertyManager manager,@NotNilptr  String name,@NotNilptr  JsonObject root, ItemRecord xp){
        String [] kv = name.split(':');
        QPropertyBrowser.QtVariantProperty item = (QPropertyBrowser.QtVariantProperty)manager.addEnumProperty(new QPropertyBrowser.QtVariantProperty(), kv[0]);
        JsonArray list = root.getArray("list");
        
        if (list == nilptr){
            return ;
        }
        
        item.setTagObject(new ItemValue(xp));
        item.setFlags(1);
        
        String selvalue = getSetting(nilptr , kv[1]);
        
        if (selvalue != nilptr){
            int count = list.length();
            String addition = nilptr;
            
            if (selvalue.length() == 0 || selvalue.equals("Not Set") || selvalue.equals("未设置")){
                selvalue = "0";
            }else{
                bool bfound = false;
                String ends = "(" + selvalue + ")";
                for (int i = 0; i < list.length(); i++){
                    String szItem = list.getString(i);
                    if (szItem != nilptr){
                        if (szItem.endWith(ends) || szItem.equals(selvalue)){
                            selvalue = "" + i;
                            bfound = true;
                            break;
                        }
                    }
                }
                if (!bfound){
                    count++;
                    addition = ends;
                    selvalue = "" + list.length();
                }
            }
        
            String [] options = new String[count];
            for (int i = 0;i < list.length(); i++){
                options[i] = list.getString(i);
            }
            
            if (addition != nilptr){
                options[count - 1] = "未知" + addition;
            }
            
            item.setAttributeEnumNames(options);
            item.setValue(selvalue);
        }
        _propTable.addProperty(item);
        currentProps.put(kv[1], item);
    }
    
    public void loadKeySequence(@NotNilptr QPropertyBrowser.QtVariantPropertyManager manager,@NotNilptr  String name,@NotNilptr  JsonObject root, ItemRecord xp){
        String [] kv = name.split(':');
        QPropertyBrowser.QtVariantProperty item = (QPropertyBrowser.QtVariantProperty)manager.addProperty(new QPropertyBrowser.QtVariantProperty(),QVariant.KeySequence, kv[0]);

        item.setTagObject(new ItemValue(xp));
        
        _propTable.addProperty(item);
        item.setValue(getSetting(nilptr, kv[1]));
        currentProps.put(kv[1], item);
    
    }
    
    public static String splitColor(@NotNilptr String text){
        if (text.startWith("#")){
            if (text.length() == 7){
                return "ff" + text.substring(5,7) + text.substring(3,5) + text.substring(1,3);
            }
            if (text.length() == 9){
                return text.substring(1,3) + text.substring(7,9) + text.substring(5,7) + text.substring(3,5);
            }
            
        }else
        if (text.startWith("0x")){
            return text.substring(2,text.length());
        }
        return "ff000000";
    }
    
    public static String getColor(@NotNilptr String text,@NotNilptr  String prefix){
        if (text.startWith(prefix)){
            return text;
        }
        
        if (text.startWith("#")){
            if (prefix.equals("0x")){
                return prefix + splitColor(text);
            }
            return "0xff000000";
        }
        if (text.startWith("0x")){
            if (prefix.equals("#")){
                return prefix + splitColor(text.replace("0x", prefix));
            }
            return "#ff000000";
        }
        text = text.replace("[", "").replace("]", "").replace("(", ",").replace(")", "");
        String [] colors = text.split(',');
        if (colors.length == 4){
            for (int i = 0; i < 4; i++){
                colors[i] = String.format("%02X", colors[i].trim(true).parseInt());
            }
                
            String outcolor =  "";
            if (prefix.equals("0x")){
                outcolor = prefix + colors[3] + colors[2] + colors[1] + colors[0];
            }else{
                outcolor = prefix + colors[3] + colors[0] + colors[1] + colors[2];
            }
            
            return outcolor;
        }
        return prefix + "00000000";
    }
    
    public void loadColor(@NotNilptr QPropertyBrowser.QtVariantPropertyManager manager,@NotNilptr  String name, JsonObject root, ItemRecord xp){
        String [] kv = name.split(':');
        QPropertyBrowser.QtVariantProperty item = (QPropertyBrowser.QtVariantProperty)manager.addProperty(new QPropertyBrowser.QtVariantProperty(),QVariant.Color, kv[0]);
        
        item.setTagObject(new ItemValue(xp));
        
        QPropertyBrowser.QtBrowserItem pitem = _propTable.addProperty(item);
        
        _propTable.setItemExpand(pitem,false);
        
        String strvalue = getSetting(nilptr, kv[1]);
        
        item.setValue(getColor(strvalue, "#"));
        currentProps.put(kv[1], item);
        
        manager.setPropertyEventListener(item,
            new QPropertyBrowser.PropertyManager.onPropertyEventListener(){
                void onVariantPropertyValueChanged(long prop, int dataType, String stringValue)override{
                    if (stringValue != nilptr){
                        preference.setSetting(kv[1], stringValue);
                        syntaxForXlang();
                    }
                }
            });
    
    }

    
    public void loadStringList(@NotNilptr QPropertyBrowser.QtVariantPropertyManager manager, @NotNilptr String name, @NotNilptr JsonObject root, ItemRecord xp){
        String [] kv = name.split(':');
        QPropertyBrowser.QtVariantProperty item = (QPropertyBrowser.QtVariantProperty)manager.addEnumProperty(new QPropertyBrowser.QtVariantProperty(), kv[0]);
        JsonArray list = root.getArray("list");
        
        item.setTagObject(new ItemValue(xp));
        
        if (list != nilptr){
            String [] options = new String[list.length()];
            for (int i = 0;i < options.length; i++){
                options[i] = list.getString(i);
                if (options[i].startWith("$(")){
                    String svalue = options[i].substring(2,options[i].length() - 1);
                    options[i] = getSetting(nilptr, svalue);
                }
            }
        
            item.setAttributeEnumNames(options);
            String defaultValue = getSetting(options, kv[1]);
            item.setValue(defaultValue);
            _propTable.addProperty(item);
            currentProps.put(kv[1], item);
            onLoadList(manager,item, kv[1], defaultValue);
        
        }
    }
    
    public void onLoadList(@NotNilptr QPropertyBrowser.QtVariantPropertyManager manager,@NotNilptr QPropertyBrowser.QtVariantProperty item,@NotNilptr  String kv, String defaultValue){
        if (kv.equals("style_color")){
			manager.setPropertyEventListener(item,
            new QPropertyBrowser.PropertyManager.onPropertyEventListener(){
				void onVariantPropertyValueChanged(long prop, int dataType, String stringValue)override{
					if (stringValue != nilptr){
                        if (stringValue.parseInt() > 1){
							if (QMessageBox.Question("注意","加载选择的配色方案后,现有自定义配色设置将丢失?",QMessageBox.Yes,QMessageBox.No) == QMessageBox.Yes){
								if (loadColorSet(stringValue.parseInt()) == false){
									QMessageBox.Critical("注意","配色方案文件丢失,不能加载配色设置",QMessageBox.Ok,QMessageBox.Ok);
                                }
								reloadProperty();
								preference.setSetting("style_color", "自定义");
                            }else{
								item.setValue("1");
                            }
                        }
                    }
				}
            });
        }else
        if (kv.equals("shortkeystyle")){
			manager.setPropertyEventListener(item,
            new QPropertyBrowser.PropertyManager.onPropertyEventListener(){
				void onVariantPropertyValueChanged(long prop, int dataType, String stringValue)override{
					if (stringValue != nilptr){
                        if (stringValue.parseInt() != 0){
							if (QMessageBox.Question("注意","加载选择的键盘布局后,现有加速键设置将丢失?",QMessageBox.Yes,QMessageBox.No) == QMessageBox.Yes){
								if (loadKeyMap(stringValue.parseInt()) == false){
									QMessageBox.Critical("注意","加速键配置文件丢失,不能加载键盘布局",QMessageBox.Ok,QMessageBox.Ok);
                                }
								reloadProperty();
								preference.setSetting("shortkeystyle", "0");
                            }else{
								item.setValue("0");
                            }
                        }
                    }
				}
            });
        }else
        if (kv.equals("editorfont")){
			manager.setPropertyEventListener(item,
            new QPropertyBrowser.PropertyManager.onPropertyEventListener(){
				void onVariantPropertyValueChanged(long prop, int dataType, String stringValue)override{
					if (stringValue != nilptr){
                        if (stringValue.parseInt() != 0){
							item.setValue(defaultValue);
							flushSetting();
							String newFont = QFontDialog.getFontDialog("选择字体",getSetting(nilptr,"editorfont"),Setting.this);
                            
							if (newFont != nilptr){
								preference.setSetting("editorfont", newFont);
								reloadProperty();
                            }else{
								item.setValue("0");
                            }
                        }
                    }
				}
            });
        }else
        if (kv.equals("workspace")){
			manager.setPropertyEventListener(item,
            new QPropertyBrowser.PropertyManager.onPropertyEventListener(){
				void onVariantPropertyValueChanged(long prop, int dataType, String stringValue)override{
					if (stringValue != nilptr){
                        if (stringValue.parseInt() != 0){
							item.setValue(defaultValue);
							flushSetting();
							String newFont = QFileDialog.getFolderPath("选择默认工作空间",getSetting(nilptr,"workspace"),nilptr,Setting.this);
							if (newFont != nilptr){
								preference.setSetting("workspace", newFont);
								reloadProperty();
                            }else{
								item.setValue("0");
                            }
                        }
                    }
				}
            });
        }
    }
    
    
    bool loadColorSet(int id){
		switch(id){
            case 2:
				return loadKeyMapFromFile("./config/light.conf");
            break;
            case 3:
				return loadKeyMapFromFile("./config/dark.conf");
            break;
        }
        return false;
    }
    
    bool loadKeyMap(int id){
		switch(id){
			case 1:
				return loadKeyMapFromFile("./config/msvc.ks");
            break;
            case 2:
				return loadKeyMapFromFile("./config/eclipse.ks");
            break;
            case 3:
				return loadKeyMapFromFile("./config/xcode.ks");
            break;
        }
        return false;
    }
    
    public bool loadKeyMapFromFile(String file){
		String destFile = String.formatPath(_system_.getAppDirectory().appendPath(file), false);
		String content = readSlnPropFile(destFile);
		if (content != nilptr){
			try{
				JsonObject keymap = new JsonObject(content);
                
                keymap = (JsonObject)keymap.child();
                
                while (keymap != nilptr){
					String key = keymap.getName();
                    String value = keymap.getString();
                    if (key != nilptr && value != nilptr){
                        preference.setSetting(key, value);
                        keymap = (JsonObject)keymap.next();
                    }
                }
                
                return true;
			}catch(Exception e){
				
            }
		}
        return false;
    }
    
    int current_modify_mark, reserve_modify_mark;
    
    public static const int
        MARK_BREAKPOINT = 9,
        MARK_POINTER = 8,
        MARK_MODIFIED = 12,
        MARK_SAVED = 13;
        
    public static const int BREAKPOINT_INDEX = 0,
                 LINENUMBER_INDEX = 1,
                 DEBUGPOINT_INDEX = 2,
                 MARGIN_FOLD_INDEX = 3,
                 MODIFIMARK_INDEX = 4;
                 
    public String szKeywords1=
        "break case catch char class " +
        "const continue default do double else final finally cdecl for " +
        "if import interface stdcall fastcall pascal operator " +
        "new package include using require synchronized_read synchronized_write " +
        "return static super switch synchronized this throw " +
        "try void while @Declare override bool byte long char int long short String _system_ " +
        "Thread nilptr Exception Vector Map List Iterator Timer TimerTask true false enum finalize" ;

    public String szKeywords2 = "";
    
    public void syntaxForXlang() {
        _sci.sendEditor(QScintilla.SCI_CLEARDOCUMENTSTYLE, 0, 0);

        _sci.sendEditor(QScintilla.SCI_SETLEXER, QScintilla.SCLEX_CPP, 0);
        _sci.sendEditor(QScintilla.SCI_SETCODEPAGE, QScintilla.SC_CP_UTF8);
        _sci.sendEditor(QScintilla.SCI_STYLESETBACK, QScintilla.STYLE_DEFAULT, getColorRef("defaultbackcolor"));
        _sci.sendEditor(QScintilla.SCI_STYLESETFORE, QScintilla.STYLE_DEFAULT, getColorRef("defaultforecolor"));
        _sci.sendEditor(QScintilla.SCI_STYLESETFORE, 75, getColorRef("defaultforecolor"));
        //_sci.sendEditor(QScintilla.STYLE_LINENUMBER, 1, 0);
        //bool bmac = (_system_.getPlatformId() == 2);


        _sci.sendEditor(QScintilla.SCI_STYLESETFONT, QScintilla.STYLE_DEFAULT,Setting.getEditorFont());
        _sci.sendEditor(QScintilla.SCI_STYLESETSIZEFRACTIONAL, QScintilla.STYLE_DEFAULT,Setting.getEditorFontSize());


        _sci.sendEditor(QScintilla.SCI_STYLECLEARALL, 0, 0);

        _sci.sendEditor(QScintilla.SCI_SETSELBACK,1,getColorRef("selectedbackcolor"));
        _sci.sendEditor(QScintilla.SCI_SETSELFORE,0,getColorRef("selectedforecolor"));
        //C++语法解析
        _sci.sendEditor(QScintilla.SCI_SETLEXER, QScintilla.SCLEX_CPP, 0);
        _sci.sendEditor(QScintilla.SCI_SETKEYWORDS, 0, szKeywords1);//设置关键字
        _sci.sendEditor(QScintilla.SCI_SETKEYWORDS, 1, szKeywords2);//设置关键字
        // 下面设置各种语法元素风格
        _sci.sendEditor(QScintilla.SCI_SETEOLMODE, 1, 0);

        _sci.sendEditor(QScintilla.SCI_MARKERDEFINE, MARK_BREAKPOINT, 0);
        _sci.sendEditor(QScintilla.SCI_MARKERSETBACK, MARK_BREAKPOINT,getColorRef("breakpointbackcolor"));
        _sci.sendEditor(QScintilla.SCI_MARKERSETFORE, MARK_BREAKPOINT,getColorRef("breakpointforecolor"));

        _sci.sendEditor(QScintilla.SCI_MARKERDEFINE, MARK_POINTER,4);
        _sci.sendEditor(QScintilla.SCI_MARKERSETFORE, MARK_POINTER,getColorRef("markpointbackcolor"));
        _sci.sendEditor(QScintilla.SCI_MARKERSETBACK, MARK_POINTER,getColorRef("markpointforecolor"));

        _sci.sendEditor(QScintilla.SCI_MARKERDEFINE,MARK_MODIFIED,25);
        _sci.sendEditor(QScintilla.SCI_MARKERSETFORE,MARK_MODIFIED,getColorRef("modifiedmarkforecolor"));
        _sci.sendEditor(QScintilla.SCI_MARKERSETBACK,MARK_MODIFIED,getColorRef("modifiedmarkbackcolor"));

        _sci.sendEditor(QScintilla.SCI_MARKERDEFINE,MARK_SAVED,25);
        _sci.sendEditor(QScintilla.SCI_MARKERSETFORE,MARK_SAVED,getColorRef("savedmarkforecolor"));
        _sci.sendEditor(QScintilla.SCI_MARKERSETBACK,MARK_SAVED,getColorRef("savedmarkbackcolor"));

        current_modify_mark = MARK_MODIFIED;
        reserve_modify_mark = MARK_SAVED;

        _sci.sendEditor(QScintilla.SCI_SETMARGINWIDTHN,BREAKPOINT_INDEX, 15);
        _sci.sendEditor(QScintilla.SCI_SETMARGINSENSITIVEN,BREAKPOINT_INDEX, 1);

        if (Setting.isIndentGuide()) {
            _sci.sendEditor(QScintilla.SCI_STYLESETFORE, QScintilla.STYLE_INDENTGUIDE, getColorRef("indentguidecolor"));
            _sci.sendEditor(QScintilla.SCI_SETINDENTATIONGUIDES, QScintilla.SC_IV_LOOKBOTH);
        } else {
            _sci.sendEditor(QScintilla.SCI_SETINDENTATIONGUIDES, QScintilla.SC_IV_NONE);
        }

        if (Setting.isShowLineNumber()) {
            _sci.sendEditor(QScintilla.SCI_SETMARGINWIDTHN,LINENUMBER_INDEX, 40);
        } else {
            _sci.sendEditor(QScintilla.SCI_SETMARGINWIDTHN,LINENUMBER_INDEX, 0);
        }

        _sci.sendEditor(QScintilla.SCI_SETMARGINWIDTHN,DEBUGPOINT_INDEX, 15);
        _sci.sendEditor(QScintilla.SCI_SETMARGINWIDTHN,MODIFIMARK_INDEX, 3);
        //_sci.sendEditor(QScintilla.SCI_SETMARGINWIDTHN,4, 0);

        _sci.sendEditor(QScintilla.SCI_SETMARGINTYPEN, BREAKPOINT_INDEX, QScintilla.SC_MARGIN_SYMBOL);
        _sci.sendEditor(QScintilla.SCI_SETMARGINMASKN, BREAKPOINT_INDEX, 1 << MARK_BREAKPOINT);

        _sci.sendEditor(QScintilla.SCI_SETMARGINTYPEN, LINENUMBER_INDEX, QScintilla.SC_MARGIN_NUMBER);
        _sci.sendEditor(QScintilla.SCI_SETMARGINMASKN, LINENUMBER_INDEX, 0);

        _sci.sendEditor(QScintilla.SCI_SETMARGINTYPEN, DEBUGPOINT_INDEX, QScintilla.SC_MARGIN_SYMBOL);
        _sci.sendEditor(QScintilla.SCI_SETMARGINMASKN, DEBUGPOINT_INDEX, 1 << MARK_POINTER);

        _sci.sendEditor(QScintilla.SCI_SETMARGINTYPEN, MODIFIMARK_INDEX, QScintilla.SC_MARGIN_SYMBOL);
        _sci.sendEditor(QScintilla.SCI_SETMARGINMASKN, MODIFIMARK_INDEX, (1 << MARK_MODIFIED) | (1 << MARK_SAVED));


        _sci.sendEditor(QScintilla.SCI_STYLESETBACK, QScintilla.STYLE_LINENUMBER, getColorRef("linenumberbackcolor"));
        _sci.sendEditor(QScintilla.SCI_STYLESETFORE, QScintilla.STYLE_LINENUMBER, getColorRef("linenumberforecolor"));
        _sci.sendEditor(QScintilla.SCI_SETMARGINLEFT, 0, 0);

        _sci.sendEditor(QScintilla.SCI_STYLESETBOLD, QScintilla.STYLE_BRACELIGHT, 1);
        _sci.sendEditor(QScintilla.SCI_STYLESETFORE, QScintilla.STYLE_BRACELIGHT, getColorRef("matchedbraceforecolor"));
        _sci.sendEditor(QScintilla.SCI_STYLESETBACK, QScintilla.STYLE_BRACEBAD, getColorRef("matchedbracebackcolor"));

        _sci.sendEditor(QScintilla.SCI_STYLESETFORE, QScintilla.SCE_C_COMMENTDOCKEYWORD, getColorRef("doccommentkeyforecolor"));
        _sci.sendEditor(QScintilla.SCI_STYLESETFORE, QScintilla.SCE_C_COMMENTDOCKEYWORDERROR, getColorRef("doccommenterrforeforecolor"));
        _sci.sendEditor(QScintilla.SCI_STYLESETFORE, QScintilla.SCE_C_GLOBALCLASS, getColorRef("globalclassforecolor"));
        _sci.sendEditor(QScintilla.SCI_STYLESETFORE, QScintilla.SCE_C_OPERATOR, getColorRef("operatorforecolor"));
        _sci.sendEditor(QScintilla.SCI_STYLESETBACK, QScintilla.SCE_C_STRINGEOL, getColorRef("stringeolcolor"));
        _sci.sendEditor(QScintilla.SCI_STYLESETFORE, QScintilla.SCE_C_WORD, getColorRef("wordforecolor"));

        _sci.sendEditor(QScintilla.SCI_STYLESETFORE, QScintilla.SCE_C_WORD2, getColorRef("word2forecolor"));
        _sci.sendEditor(QScintilla.SCI_STYLESETBOLD, QScintilla.SCE_C_WORD2, 1);
        _sci.sendEditor(QScintilla.SCI_STYLESETBACK, QScintilla.SCE_C_WORD2, getColorRef("word2backcolor"));
        _sci.sendEditor(QScintilla.SCI_STYLESETFORE, QScintilla.SCE_C_STRING, getColorRef("stringforecolor"));
        _sci.sendEditor(QScintilla.SCI_STYLESETFORE, QScintilla.SCE_C_NUMBER, getColorRef("numberforecolor"));
        _sci.sendEditor(QScintilla.SCI_STYLESETFORE, QScintilla.SCE_C_CHARACTER, getColorRef("charforecolor"));
        _sci.sendEditor(QScintilla.SCI_STYLESETFORE, QScintilla.SCE_C_PREPROCESSOR, getColorRef("preprocessorforecolor"));
        _sci.sendEditor(QScintilla.SCI_STYLESETFORE, QScintilla.SCE_C_COMMENT, getColorRef("commentforecolor"));
        _sci.sendEditor(QScintilla.SCI_STYLESETFORE, QScintilla.SCE_C_COMMENTLINE, getColorRef("commentlineforecolor"));
        _sci.sendEditor(QScintilla.SCI_STYLESETFORE, QScintilla.SCE_C_COMMENTDOC, getColorRef("doccommentforecolor"));

        _sci.sendEditor(QScintilla.SCI_CALLTIPSETBACK, getColorRef("calltipsbackcolor"));
        _sci.sendEditor(QScintilla.SCI_CALLTIPSETFORE, getColorRef("calltipsforecolor"));

        //_sci.sendEditor(QScintilla.SCI_STYLESETFORE, QScintilla.SCE_C_COMMENTDOC, 0xff504f4f);

        _sci.sendEditor(QScintilla.SCI_SETCARETFORE,getColorRef("caretcolor"),0);

        _sci.sendEditor(QScintilla.SCI_SETCARETLINEVISIBLE, 1);
        _sci.sendEditor(QScintilla.SCI_SETCARETLINEBACK, getColorRef("caretlinebackcolor"));

        _sci.sendEditor(QScintilla.SCI_SETTABWIDTH, 4);
        _sci.sendEditor(QScintilla.SCI_SETEOLMODE, QScintilla.SC_EOL_LF, 0);

        _sci.setIndicForeColor(1, getColorRef("indicforecolor"));
        _sci.setIndicUnderColor(1, getColorRef("indicbackcolor"));


        _sci.sendEditor(QScintilla.SCI_SETPROPERTY,"fold","1");
        _sci.sendEditor(QScintilla.SCI_SETPROPERTY,"fold.comment","1");

        _sci.sendEditor(QScintilla.SCI_SETMARGINTYPEN, MARGIN_FOLD_INDEX, QScintilla.SC_MARGIN_SYMBOL);//页边类型
        _sci.sendEditor(QScintilla.SCI_SETMARGINMASKN, MARGIN_FOLD_INDEX, QScintilla.SC_MASK_FOLDERS); //页边掩码

        _sci.sendEditor(QScintilla.SCI_SETFOLDMARGINCOLOUR, 1, getColorRef("foldmargincolor"));
        _sci.sendEditor(QScintilla.SCI_SETFOLDMARGINHICOLOUR, 1, getColorRef("foldmarginhicolor"));

        _sci.sendEditor(QScintilla.SCI_SETMARGINWIDTHN, MARGIN_FOLD_INDEX, 11); //页边宽度
        _sci.sendEditor(QScintilla.SCI_SETMARGINSENSITIVEN, MARGIN_FOLD_INDEX, 1); //响应鼠标消息


        // 折叠标签样式 //折叠页边颜色
        _sci.sendEditor(QScintilla.SCI_MARKERDEFINE, QScintilla.SC_MARKNUM_FOLDER, QScintilla.SC_MARK_BOXPLUS);
        _sci.sendEditor(QScintilla.SCI_MARKERSETFORE,QScintilla.SC_MARKNUM_FOLDER,getColorRef("folderforecolor"));
        _sci.sendEditor(QScintilla.SCI_MARKERSETBACK,QScintilla.SC_MARKNUM_FOLDER,getColorRef("folderbackcolor"));

        _sci.sendEditor(QScintilla.SCI_MARKERDEFINE, QScintilla.SC_MARKNUM_FOLDEROPEN, QScintilla.SC_MARK_BOXMINUS);
        setMarginColor(QScintilla.SC_MARKNUM_FOLDEROPEN,getColorRef("folderopenforecolor"), getColorRef("folderopenbackcolor"));

        _sci.sendEditor(QScintilla.SCI_MARKERDEFINE, QScintilla.SC_MARKNUM_FOLDEREND,  QScintilla.SC_MARK_BOXPLUSCONNECTED);
        setMarginColor(QScintilla.SC_MARKNUM_FOLDEREND,getColorRef("folderendforecolor"), getColorRef("folderendbackcolor"));

        _sci.sendEditor(QScintilla.SCI_MARKERDEFINE, QScintilla.SC_MARKNUM_FOLDEROPENMID, QScintilla.SC_MARK_BOXMINUSCONNECTED);
        setMarginColor(QScintilla.SC_MARKNUM_FOLDEROPENMID,getColorRef("foldermidforecolor"), getColorRef("foldermidbackcolor"));

        _sci.sendEditor(QScintilla.SCI_MARKERDEFINE, QScintilla.SC_MARKNUM_FOLDERMIDTAIL, QScintilla.SC_MARK_TCORNER);
        setMarginColor(QScintilla.SC_MARKNUM_FOLDERMIDTAIL,getColorRef("foldermidtailforecolor"), getColorRef("foldermidtailbackcolor"));

        _sci.sendEditor(QScintilla.SCI_MARKERDEFINE, QScintilla.SC_MARKNUM_FOLDERSUB, QScintilla.SC_MARK_VLINE);
        setMarginColor(QScintilla.SC_MARKNUM_FOLDERSUB,getColorRef("foldersubforecolor"), getColorRef("foldersubbackcolor"));

        _sci.sendEditor(QScintilla.SCI_MARKERDEFINE, QScintilla.SC_MARKNUM_FOLDERTAIL, QScintilla.SC_MARK_LCORNER);
        setMarginColor(QScintilla.SC_MARKNUM_FOLDERTAIL,getColorRef("foldertailforecolor"), getColorRef("foldertailbackcolor"));

        // 折叠标签颜色
        
        _sci.setText(_sci.getText());
        _sci.sendEditor(QScintilla.SCI_MARKERADD, 1, 8);
        _sci.sendEditor(QScintilla.SCI_MARKERADD, 2, 9);
        _sci.sendEditor(QScintilla.SCI_MARKERADD, 3, 12);
        _sci.sendEditor(QScintilla.SCI_MARKERADD, 4, 13);
    }

    public void setMarginColor(int id, int fore, int back) {
        _sci.sendEditor(QScintilla.SCI_MARKERSETFORE, id, fore);
        _sci.sendEditor(QScintilla.SCI_MARKERSETBACK, id, back);
    }
    
    public static void applySetting(){
		editorFont = nilptr;
        if (_template_root != nilptr){
            preference.apply(_template_root);
        }
        XStudioApp._theApp.reconfig();
        applyPlugins();
    }
    
    public void flushSetting(){
        Map.Iterator<String, QPropertyBrowser.QtVariantProperty> iter = currentProps.iterator();
        for (; iter.hasNext(); iter.next()){
            String key = iter.getKey();
            
            if (key== nilptr){
                key = "unknow";
            }
            
            QPropertyBrowser.QtVariantProperty item = iter.getValue();
            
            if (item != nilptr){
                String value = item.getValue();
                if (value != nilptr){
                    if (item.getFlags() == 2){
                        try{
                            ItemValue ir = (ItemValue)item.getTagObject();
                            value = ir.defaultText;
                        }catch(Exception e){
                            
                        }
                    }else
                    if (item.getFlags() == 1){
                        if (value.equals("未设置") == false && value.equals("Not Set") == false){
                            int lp = value.indexOf('('), rp = value.lastIndexOf(')');
                            if (lp != -1 && rp != -1){
                                value = value.substring(lp + 1,rp);
                            }
                        }else{
                            value = "";
                        }
                    }
                    
                    if (false == setSetting(key, value)){
                        QMessageBox.Critical("错误", key + "字段更改失败.", QMessageBox.Ok, QMessageBox.Ok);
                    }
                }
            }
        }
    }
    
    public void saveSetting(){
		flushSetting();
        preference.save();
    }
    
    public @NotNilptr String getSetting(String [] options, @NotNilptr String key){
		return preference.getSetting(options, key);
    }
    
    public static bool setSetting(@NotNilptr String key, String val){
		return preference.setSetting(key, val);
    }
    
    public @NotNilptr static String get(@NotNilptr String key){
		return preference.getSetting(nilptr, key);
    }
    
    public static bool isDarkStyle(){
		return get("style").equals("深色");
    }
    
    public @NotNilptr static String getStyle(){
		return get("style");
    }
    public static bool getBoolean(String key){
		return get(key).equals("True");
    }
    public static bool isIntellisense(){
		return get("intelsence").equals("开启");
    }
    public static bool isOutputWrap(){
		return get("outputwrap").equals("开启");
    }
    public static bool isEditWrap(){
		return get("editwrap").equals("开启");
    }
    public static bool isAutoSave(){
		return get("autosave").equals("开启");
    }
    
    public static bool isSwitchToInfo(){
		return get("switchinfo").equals("开启");
    }
    public static bool isUnixPath(){
        return get("unixpath").equals("开启");
    }
    public static int getLogcatMaxitems(){
		return get("logcatmax").parseInt();
    }
    public static bool outputThreadStat(){
        return get("threadstat").equals("开启");
    }
    public static bool outputGCStat(){
        return get("gcstat").equals("开启");
    }
    public static bool repallconfirm(){
		return get("repallconfirm").equals("开启");
    }
    
    public static bool isMatchBrace(){
		return get("brace").equals("开启");
    }
    
    public static bool isAutoIdent(){
		return get("ident").equals("开启");
    }
    
    public static bool isRelocalStdout(){
		return get("stdoutrel").equals("开启");
    }
    
    public static bool isShowLineNumber(){
		return get("linenumber").equals("开启");
    }
    
    public static bool isShowFolding(){
		return get("showfolding").equals("开启");
    }
    
    public static bool isIndentGuide(){
		return get("indentguide").equals("开启");
    }
    public static bool welcomeOnStart(){
		return get("welcomeonstart").equals("开启") ;
    }
    public static bool welcomeOnClose(){
		return get("welcomeonclose").equals("开启") ;
    }
    
    public static bool isShowBuildin(){
		return get("showbuildin").equals("开启");
    }
    
    public static bool isUseTabstop(){
		return get("tabstop").equals("制表符");
    }
    
    public static bool isUseArgfile(){
		return get("argfile").equals("开启");
    }
    
    public static bool isCustomColor(){
		return (get("style_color").equals("自动") == false);
    }
    
    public static int getColorRef(@NotNilptr String key){
        String strvalue = get(key);
        String color = getColor(strvalue, "0x");
        if (color != nilptr){
            return color.parseHex();
        }
        return 0;
    }
    
    public static int getTabWidth(){
		int nw = get("tabwidth").parseInt();
        if (nw < 1){
			nw = 1;
        }
        return nw;
    }
    
    public static QFont editorFont;
    
    public static String getEditorFont(){
    
		String font = "";
    
    	if (editorFont == nilptr){
			String sfont = get("editorfont");
            if (sfont.length() > 0){
				editorFont = QFont.loadFromString(sfont); 
            }
		}
        
		if (editorFont != nilptr){
			font = editorFont.familyName();
        }

		if (font == nilptr || font.length() == 0){
			bool bmac = (_system_.getPlatformId() == 2);
			font = bmac ? "Monaco" : "Consolas";
		}
            
        return font;
    }
    
    public static int getEditorFontSize(){
    
		int font_size = 0;
        
		if (editorFont == nilptr){
			String font = get("editorfont");
            if (font.length() != 0){
				editorFont = QFont.loadFromString(font); 
            }
		}
        
        if (editorFont != nilptr){
			font_size = editorFont.pointSize() * 100;
        }
        
        if (font_size == 0){
			if (_system_.getPlatformId() == 2){
				font_size = 1150;
			}else{
				font_size = 1000;
			}
		}
            
        return font_size;
    }
    
    public static void save(){
		preference.save();
    }
    
    public static void applyPlugins()
    {
        Map.Iterator<String, XPluginShell> iter = PluginsController.plugins_list.iterator();
        while (iter.hasNext()) {
            XPluginShell splug = iter.getValue();
            if (splug != nilptr && (splug._plugin != nilptr) && (splug.inited)) {
                IXPlugin xp = splug._plugin;
                xp.settingFlushed();
            }
            iter.next();
        }
    }
};