//xlang Source, Name:MemoryLookupWnd.xcsm 
//Date: Tue Jul 16:39:20 2019 

class MemoryLookupWnd : QDockWidget{
	QLineEdit edtaddress;
    QPushButton btnLockup, dumpButton; 
	HexEditor memcontent;
    static MemoryLookupWnd memlookupWnd;
    
    public static class caRegMixMath {

		public static class Express{
			byte [] p;
			int start;
			int length;
			
            public Express(@NotNilptr String exp){
				p = exp.getBytes();
                start = 0;
                length = exp.length();
            }
            
			public Express(@NotNilptr byte [] _p,int _s,int _l){
				p = _p;
				start = _s;
				length = _l;
			}
			
			public Express(@NotNilptr Express p2) {
				p = p2.p;
				start = p2.start;
				length = p2.length;	
			}

			public char getChar(){
				return p[start];
			}
			public bool next(){
				if (start < length - 1){
					start++;
					return true;
				}
				return false;
			}
			public long atoi(){
				int n = start;
                bool bhex = false;
                if ((length - n) > 2 && p[n] == '0' && p[n + 1] == 'x'){
					bhex = true;
                    n += 2;
                    start += 2;
                }
				while ((p[n] >= '0' && p[n] <= '9') || (p[n] >= 'a' && p[n] <= 'z' && bhex)){
					n++;
					if (n >= length){
						break;
					}
				}
				if (n > start){
					if (bhex){
						return Math.parseLong(new String(p, start, n - start), 16);
                    }
					return Math.parseLong(new String(p, start, n - start), 10);
				}
				throw new IllegalArgumentException("not a number");
                return 0;
			}

			public bool complete() {
				return (length -1) == start;
			}
		};
        
        public static long calc(@NotNilptr String text){
			return mixcalc(new Express(text), true, false);
        }
        
		public static long mixcalc(@NotNilptr Express p,bool bmain, bool b) {
			long result = 1;

			while ( p.getChar() != '(' && false == (p.getChar() >= '0' && p.getChar() <= '9') && false == (p.getChar() >= 'a' && p.getChar() <= 'z')) {
                result *= (p.getChar() == '-' ? -1 : 1); 
                if (p.next() == false){
                    throw new IllegalArgumentException("not a number");
                    return 0;
                }
            }

			if (p.getChar() == '(') {
				p.next();
				result *= mixcalc(p, true, false);
				p.next();
			} else
				if (p.getChar() != 0) {
	
					result *= p.atoi();
					
					while (((p.getChar() >= '0' && p.getChar() <= '9') || (p.getChar() >= 'a' && p.getChar() <= 'z'))) { 
						if (p.next() == false){
							break;
						}
					}
				}

			if (p.complete() || b || (bmain == false && (p.getChar() == '+' || p.getChar() == '-'))) { return result; }

			do {
				char ch = p.getChar();
				switch (ch)
				{
					
					case '+':
						p.next();
						result += mixcalc(p,  false, false); break;
						
					case '-':
						p.next();
						result -= mixcalc(p,  false, false); break;
						
					case '*':
						p.next();
						result *= mixcalc(p,  false, true); break;
						
					case '/':
						p.next();
						result /= mixcalc(p,  false, true); break;
                        
					case ')':
					case '\0':
					default:
						return result; 
				}
				if (p.complete()){
					break;
				}
			} while (((p.getChar() == '*' || p.getChar() == '/') && (b == false)) || (bmain == true));
			return result;
		}
	};
    
    
    public String getRealAddress(@NotNilptr String text){
        String addrtext = edtaddress.getText().replace(" ", "");
        try{
            long address = caRegMixMath.calc(addrtext.lower());
            return String.format("%d",address);
        }catch(Exception e){
            
        }
        return text;
    }
    
    public void dump(){
		String addrtext = getRealAddress(edtaddress.getText());
		if (addrtext != nilptr && addrtext.length() > 0){
			XWorkspace.workspace.debuggee.lookupMemory(addrtext, 512);
		}
    }
    
    public void dumpFile(){
		String addrtext = getRealAddress(edtaddress.getText());
		if (addrtext != nilptr && addrtext.length() > 0){
            
            InputDialog.requestInput(new InputDialog.onInputListener() {
                static String filePath = "";
                bool onInputOk(@NotNilptr String text)override {
                    if (text.length() == 0 || text.isDigit() == false) {
                        QMessageBox.Critical("错误", "输入了不正确的长度", QMessageBox.Ok, QMessageBox.Ok);
                        return false;
                    }
                    int length = text.parseInt();
                    
                    if (length < 0){
                        QMessageBox.Critical("错误", "输入了不正确的长度", QMessageBox.Ok, QMessageBox.Ok);
                        return false;
                    }
                    
                    String file = QFileDialog.getSaveFileName("保存文件", filePath,  "All Files(*.* *)", MemoryLookupWnd.this);
                    if (file != nilptr && file.length() > 0) {
                        filePath = file;
                        dumpCore(file, addrtext, length);
                    }
                    return true;
                }
                bool onInputCancel()override {
                    return true;
                }
                String getTitle()override {
                    return "转储内存";
                }
                String getTips()override {
                    return "输入转存长度:";
                }
                String getDefault()override {
                    return "";
                }
            });
			XWorkspace.workspace.debuggee.lookupMemory(addrtext, 512);
		}
    }
    
    public void dumpCore(String localFile, String address, long length){
        JsonObject json = new JsonObject();
        json.put("file", localFile);
        json.put("address", "" + address);
        json.put("length", "" + length);
		XWorkspace.workspace.debuggee.dumpMemory(address, 512, json.toString(false));
    }
    
	public void onAttach(){
		memlookupWnd = this;
		edtaddress = (QLineEdit)attachByName(new QLineEdit(), "edtaddress");
        btnLockup = (QPushButton)attachByName(new QPushButton(), "btnLockup");
        dumpButton = (QPushButton)attachByName(new QPushButton(), "dumpButton");
        memcontent = (HexEditor)attachByName(new HexEditor(), "memcontent");
        
        btnLockup.setOnClickListener(new onClickListener(){
			void onClick(QObject obj, bool checked)override{
				dump();
			}
        });
        
        dumpButton.setOnClickListener(new onClickListener(){
			void onClick(QObject obj, bool checked)override{
				dumpFile();
			}
        });
        
        edtaddress.setOnKeyEventListener(new onKeyEventListener(){
			bool onKeyPress(QObject obj, int key, bool repeat, int count, String text, int scanCode, int virtualKey, int modifier)override{
				if (key == Constant.Key_Enter || key == Constant.Key_Return){
					dump();
                    return false;
                }
                return true;
			}
        });
        memcontent.init();
    }
    
    public static void SetData(@NotNilptr JsonObject json){
		memlookupWnd.runOnUi(new Runnable(){
			void run()override{
				memlookupWnd.setData(json);
            }
        });
    }
    
    public static void SetDumpData(@NotNilptr JsonObject json){
		memlookupWnd.runOnUi(new Runnable(){
			void run()override{
				memlookupWnd.setDumpData(json);
            }
        });
    }
    
    public static void reset(){
    	memlookupWnd.runOnUi(new Runnable(){
			void run()override{
				memlookupWnd.memcontent.setData(nilptr, 0, 0, 0);
            }
        });
    }
    
    public void setData(@NotNilptr JsonObject json){
		String dataCont = json.getString("content");
        String address =json.getString("address");
        int requestlen = json.getInt("request");
        int responselen = json.getInt("response");
        if (address == nilptr){
            address = "0";
        }
        long offset = address.parseLong();
        byte[] data = Base64.decodeString(dataCont);
        memcontent.setData(data, offset, requestlen, responselen);
    }
    
    long getJsonLong(@NotNilptr JsonObject jroot, String name){
        String str = jroot.getString(name);
        if (str != nilptr){
            return str.parseLong();
        }
        return 0;
    }
    
    public void setDumpData(@NotNilptr JsonObject json){
		String dataCont = json.getString("content");
        String address = json.getString("address");
        String param = json.getString("param");
        int requestlen = json.getInt("request");
        int responselen = json.getInt("response");
        
        if (address == nilptr){
            address = "0";
        }
        long offset = address.parseLong();
        
        
        byte[] data = Base64.decodeString(dataCont);
        FileOutputStream fos = nilptr;
        bool bContinue_req = false;
        bool dumpfailed = requestlen != responselen;
        String localFile = "";
        try{
            JsonObject localInfo = new JsonObject(param);
            localFile = localInfo.getString("file");
            long start = getJsonLong(localInfo, ("address"));
            long length = getJsonLong(localInfo, ("length"));
            long end_ofst = start + length;
            
            long req_endofst = offset + responselen;
            if (localFile != nilptr){
                fos = new FileOutputStream(localFile, true); 
                
                if (end_ofst < req_endofst){
                    fos.write(data, 0, end_ofst - offset);
                }else{
                    fos.write(data);
                }
                
                if (false == dumpfailed){
                    bContinue_req = (req_endofst < end_ofst);
                }
            }
            
        }catch(Exception e){
            
        }finally{
            if (fos != nilptr){
                fos.close();
            }
        }
        
        if (bContinue_req){
            XWorkspace.workspace.debuggee.dumpMemory(String.format("%d",offset + responselen), 512, param);
        }else{
            if (dumpfailed){
                XWndOutput.Output("转储内存文件:" + localFile + " 仅完成部分(错误:无法访问内存)\n", 1);
            }else{
                XWndOutput.Output("转储内存文件:" + localFile + " 已完成!\n", 1);
            }
        }
    }
    
    public void reconfig(){
		memcontent.setStyle(Setting.isDarkStyle());
    }
};