
class XWndInfor : QDockWidget
{
    QTreeWidget _listview;
    QPushButton btnError, btnWarning, btnTips;
    public XWorkspace _mdi_area;

    public static XWndInfor infoWnd;
    static const int COMPILE_INFO_NOTIFY = 2;
    int current_click_item = 0;
    int serial = 0;
    
    onTreeViewItemEvent listlistener = new onTreeViewItemEvent()
    {
        void onItemClicked(@NotNilptr QTreeWidget tree,long item, int column)override {
            synchronized(infoLock) {
                triggeInfo(tree, item);
            }
        }
    };

    Vector<long>infoItems = new Vector<long>();
    Vector<ICompileInfo> infoList = new Vector<ICompileInfo>();
    Object infoLock = new Object();

    void triggeInfo(@NotNilptr QTreeWidget tree,long item)
    {
        String file = tree.getItemText(item, 1);
        String line = tree.getItemText(item, 2);
        String row = tree.getItemText(item, 3);

        int tag = tree.getItemTag(item, 0);
        String infotips = nilptr;
        if (tag >= 0 && tag < infoList.size()) {
            infotips = "问题" + tag + ":\n";
            ICompileInfo cii = infoList.get(tag);
            if (cii != nilptr){
                infotips = infotips + cii.getTips();
            }
        }
        XSourceEditor.openForFileInfo(XWndInfor.this._mdi_area, file, line.parseInt(), row.parseInt(), infotips);
    }

    onClickListener buttonListener =
        new onClickListener()
    {
        void onClick(QObject obj, bool checked)override {
            loadInfo(nilptr);
        }
    };

    public void onAttach()
    {
        _listview = (QTreeWidget)attachByName(new QTreeWidget(), "infoList");

        btnError = (QPushButton)attachByName(new QPushButton(), "btnError");
        btnWarning = (QPushButton)attachByName(new QPushButton(), "btnWarning");
        btnTips = (QPushButton)attachByName(new QPushButton(), "btnTips");

        btnError.setOnClickListener(buttonListener);
        btnWarning.setOnClickListener(buttonListener);
        btnTips.setOnClickListener(buttonListener);
        /*
        改成layout之后就不需要resize了
        setOnLayoutEventListener(new onLayoutEventListener(){
        void onResize(QObject obj, int w, int h, int oldw, int oldh)override {
            if (_listview != nilptr){
                _listview.resize(w, h - 60);
                btnError.move(0, h - 55);
                btnWarning.move(80, h - 55);
                btnTips.move(160, h - 55);
            }else{
                _system_.consoleWrite("listview no prepared");
            }
        }
        });
        */
        String [] columns = {"类型", "文件/信息", "行", "字"};
        _listview.setColumns(columns);

        _listview.setColumnWidth(0, 100);
        _listview.setColumnWidth(1, 700);
        _listview.setColumnWidth(2, 50);
        _listview.setColumnWidth(3, 50);
        _listview.setOnTreeViewItemEvent(listlistener);
        infoWnd = this;
    }

    int []countsOfInfo = new int[3];

    public int getCountOfTips()
    {
        return countsOfInfo[ICompileInfo.TIPS];
    }

    public int getCountOfWarning()
    {
        return countsOfInfo[ICompileInfo.WARNING];
    }

    public int getCountOfError()
    {
        return countsOfInfo[ICompileInfo.ERROR];
    }

    public void nextInfo()
    {
        __nilptr_safe(_listview);
        synchronized(infoLock) {
            if (current_click_item < infoItems.size()) {
                long item = infoItems.get(current_click_item++);
                triggeInfo(_listview, item);
            } else {
                current_click_item = 0;
            }
        }
    }

    public void clear()
    {
        synchronized(infoLock) {
            _listview.clear();
            infoItems.clear();
            current_click_item = 0;
            infoList.clear();

            countsOfInfo = new int[3];
        }
    }
    public void showInfo(Vector<ICompileInfo> infos)
    {
        runOnUi(new Runnable(){
            void run()override{
                loadInfo(infos);
            }
        });
    }

    public void completeCompile(){
        runOnUi(new Runnable(){
            void run()override{
                onComplete();
            }
        });
    }
    
    public void loadInfo(Vector<ICompileInfo> infos)
    {
        String [] columns = {"提示", "警告", "错误"};
        String [] icons = {"res/toolbar/info.png", "res/toolbar/warning.png", "res/toolbar/errr.png"};
        //int []colors = {0xff00ff00, 0xffffff00, 0xffff0000};
        bool bFilter = false;
        
        synchronized(infoLock) {
            
            int start_index = infoList.size();
            
            if (infos == nilptr) {
                infos = infoList;
                bFilter = true;
                start_index = 0;
            }
            
            bool allTip = btnTips.getCheck();
            bool allWarning = btnWarning.getCheck();
            bool allError = btnError.getCheck();

            if (bFilter){
                infoItems.clear();
                _listview.clear();
            }
            
            bool [] allMap = {allTip, allWarning, allError};
            if (infos != nilptr){
                for (int i = 0, c = infos.size(); i < c; i++) {
                    ICompileInfo ci = infos.get(i);
                    if (ci != nilptr){
                        int type = ci.getType();
                        if (type >= 0 && type < 3) {
                            if (allMap[type]) {
                                long item = _listview.addItem(icons[type], columns[type]);

                                _listview.setItemTag(item, 0, start_index + i);
                                infoItems.add(item);
                                _listview.setItemText(item, 1, ci.getFile());
                                _listview.setItemText(item, 2, "" + ci.getLine());
                                _listview.setItemText(item, 3, "" + ci.getRow());
                                //_listview.setItemBackColor(item, 0, colors[type]);
                                countsOfInfo[type]++;
                            }
                        }
                        
                        if (bFilter == false){
                            infoList.add(ci);
                        }
                    }
                }
            }
        }
    }

    Map<String,int> getInfoDocuments(int type){
        Map<String,int> filemap = new Map<String,int>();
        synchronized(infoLock) {
            for (int i = 0; i < infoList.size(); i++){
                ICompileInfo ci = infoList[i];
                if (ci.getType() == type){
                    String f = ci.getFile();
                    filemap.put(String.formatPath(f,false), 1);
                }
            }
        }
        return filemap;
    }
    
    Vector<ICompileInfo> getDocumentPoint(String path, int type){
        Vector<ICompileInfo> ii = new Vector<ICompileInfo>();
        synchronized(infoLock) {
            for (int i = 0; i < infoList.size(); i++){
                ICompileInfo ci = infoList[i];
                if (ci.getType() == type){
                    String f = ci.getFile();
                    if (String.formatPath(f,false).equals(String.formatPath(path,false))){
                        ii.add(ci);
                    }
                }
            }
        }
        return ii;
    }
    
    public static int getSerial(){
        return infoWnd.serial;
    }
    
    public static Map<String,int> GetInfoDocuments(int type){
        return infoWnd.getInfoDocuments(type);
    }
    
    public static Vector<ICompileInfo> GetDocumentPoint(String path, int type){
        return infoWnd.getDocumentPoint(path, type);
    }
    
    public void onComplete()
    {
        if (Setting.isSwitchToInfo()) {
            raise();
        }
        XWndOutput.Output(String.format("\n (%d 建议, %d 警告, %d 错误.)\n", getCountOfTips(), getCountOfWarning(), getCountOfError()), 0);

        XWndOutput.Output("[" + String.formatDate("%c", _system_.currentTimeMillis()) + "] 编译完成.\n", 0);
        serial++;
        XWorkspace.workspace.updateAllDocumentErrorPoint();
        XWndSln._slnView.updateDocumentsStatus();
    }
};