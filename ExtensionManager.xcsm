//xlang Source, Name:ExtensionManager.xcsm 
//Date: Mon Dec 22:38:01 2019 

class ExtensionManager : QDialog{
    public XWorkspace _workspace;
    QTreeWidget extlist;
    QPushButton btnenable, btnuninst, btnclose;
    
    static JsonObject extobj = new JsonObject();
    
    public static void load(){
        String confFile = "./config/extstat.conf";
        FileInputStream fiss;
        try {
            fiss = new FileInputStream(confFile);
            byte [] data = fiss.read();
            fiss.close();
            String extcontent = new String(data);
            extobj = new JsonObject(extcontent);
        } catch(Exception e) {
            
        }finally{
            if (fiss != nilptr){
                fiss.close();
            }
        }
    }
    
    public static bool isEnabled(String name){
        if (extobj.has(name)){
            JsonObject plobj = (JsonObject)extobj.get(name);
            if (plobj != nilptr){
                String eab = plobj.getString("enabled");
                if (eab != nilptr){
                    return eab.parseInt() != 0;
                }
            }
        }
        return true;
    }
    
    public static void setEnabled(String name, bool eab){
        while  (extobj.has(name)){
            extobj.remove(name);
        }
        JsonObject plobj = new JsonObject();
        plobj.put("enabled", eab ? "1" : "0" );
        extobj.put(name,plobj);
        save();
    }
    
    public static void save(){
        FileOutputStream fos;
        
        try{
            String root = extobj.toString(false);
            
            fos = new FileOutputStream("./config/extstat.conf");
            fos.write(root.getBytes());
            fos.close();
        
        }catch(Exception e){
        
        }finally{
            if (fos != nilptr){
                fos.close();
            }
        }
    }
    
	public void onAttach() override {
		//TODO:	
        setWindowFlags(Constant.CustomizeWindowHint | Constant.WindowMinMaxButtonsHint | Constant.WindowCloseButtonHint);
        setWindowIcon("./res/toolbar/dynamic.png");
        
        extlist = (QTreeWidget)attachByName(new QTreeWidget(), "extlist");
        btnenable = (QPushButton)attachByName(new QPushButton(), "btnenable");
        btnuninst = (QPushButton)attachByName(new QPushButton(), "btnuninst");
        btnclose = (QPushButton)attachByName(new QPushButton(), "btnclose");
        
        btnenable.setOnClickListener(new onClickListener(){
            void onClick(QObject obj, bool checked) {
                long [] items = extlist.getSelectedItems();
                if (items != nilptr && items.length != 0){
                    for (int i = 0; i < items.length ; i ++){
                        String name = extlist.getItemText(items[i],0);
                        String eab = extlist.getItemText(items[i],1);
                        PluginsController.setPluginDisabled(name, eab.equals("启用"));
                    }
                    loadlist();
                    save();
                }
            }
        });
        
        btnuninst.setOnClickListener(new onClickListener(){
            void onClick(QObject obj, bool checked) {
                long [] items = extlist.getSelectedItems();
                if (items != nilptr && items.length != 0){
                    for (int i = 0; i < items.length ; i ++){
                        String name = extlist.getItemText(items[i],0);
                        PluginsController.uninstallPlugin(name);
                    }
                    loadlist();
                }
            }
        });
        
        btnclose.setOnClickListener(new onClickListener(){
            void onClick(QObject obj, bool checked) {
                close();
            }
        });
        
        String [] columns = {"名称","状态", "版本", "描述", "发布者"};
        
        extlist.setColumns(columns);

        extlist.setColumnWidth(0, 100);
        extlist.setColumnWidth(1, 100);
        extlist.setColumnWidth(2, 100);
        extlist.setColumnWidth(3, 250);
        
        extlist.setOnTreeViewItemEvent( new onTreeViewItemEvent(){
			void onItemClicked(@NotNilptr QTreeWidget tree,long item, int column){
				if (column == 4){
					String txt = tree.getItemText(item, column);
                    if (txt.upper().startsWith("HTTP")){
						if (QMessageBox.Question("提示","是否转到发布者网站: <b>" + txt + "</b> ?",QMessageBox.Ok | QMessageBox.No,QMessageBox.Ok) == QMessageBox.Ok){
							openUrl(txt);
                        }
                    }
                }
			}
        });
        
        setWindowTitle("扩展管理");
        setModal(true);
        show();
        loadlist();
	}
    
    
    public void loadlist(){
        extlist.clear();
        Map.Iterator<String, XPluginShell> iter = PluginsController.plugins_list.iterator();
        while (iter.hasNext()) {
            XPluginShell splug = iter.getValue();
            if (splug != nilptr ){
                IXPlugin _plugin = splug._plugin;
                if (_plugin != nilptr) {
                    String name = _plugin.getName();
                    long ver = _plugin.getVersion();
                    String description = _plugin.getDescrition();
                    String publisher = _plugin.publisher();
                    String icon = _plugin.getIcon();
                    long item = extlist.addItem(icon, name);
                    extlist.setItemText(item, 1, splug.disable ? "禁用" : "启用");
                    extlist.setItemText(item, 2,  Utils.convertVersion(ver));
                    extlist.setItemText(item, 3,  description);
                    extlist.setItemText(item, 4,  publisher);
                }
            }
            iter.next();
        }
    }
};