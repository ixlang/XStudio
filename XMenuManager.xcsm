
class XMenuManager
{
    public XStudioApp app ;
    public QMainWindow mainwindow;
    public static XMenuManager _menuMgr;
    QMenu [] mainMenus = new QMenu[7];
    
    public XMenuManager()
    {
        _menuMgr = this;
    }

    public static void setStatusSel(bool b)
    {
        enabledMenu("actioncut", b);
        enabledMenu("actionupper", b);
        enabledMenu("actionlower", b);
        //enabledMenu("actioncopy", b);
    }


    public static void setProjectLoaded(bool b)
    {
        String []names = {"actioncloseproject",
                          "actiongotodef",
                          "actionoverride",
                          "actionautocomplete",
                          "actioncompile_project",
                          "actionclean",
                          "actionprop",
                          "actionopenoutput",
                          "actiongenerateNativeSrc",
                          "actiongenmake",
                          "actiondeploy",
                          "actiondeployto",
                          "actiondebug",
                          "actionfile",
                          "actionclass",
                          "actioncomment",
                          "actionsaveastemp",
                          "actionrun",
                          "actionstepin",
                          "actionstepover",
                          "actionstepout",
                          "actionbreakpoint",
                          "actionupper",
                          "actionlower",
                          //"actionfunction",
                          "actionbreak",
                          "actionstoprun",
                          //"actiondata",
                          "actionsaveproject"
                         };
                         
        enabledMenus(names, b);
        
        String []names_ext = {
          "actionstepin",
          "actionstepover",
          "actionstepout",
          "actionbreak",
          "actionbreakpoint",
          "actionstoprun"
        };
        
        if (b){
            enabledMenus(names_ext, !b);
        }
    }

    public static void setProjectBuilding(bool b)
    {
        String []names = {"actioncloseproject",
                          "actioncompile_project",
                          "actionclean",
                          "actionprop",
                          "actiongenerateNativeSrc",
                          "actiongenmake",
                          "actiondeploy",
                          "actiondeployto",
                          "actiondebug",
                          "actionrun"
                         };
        String []namesr = {                
            "actionprocstop"
        };
        enabledMenus(names, !b);
        enabledMenus(namesr, b);
    }
    
    public static void refreshDebugMenu(bool bDebug)
    {
        String []enable_names = {
            "actionbreak",
            "actionstoprun"
        };

        String []disable_names = {"actiondebug",
                                  "actionrun",
                                  "actionstepin",
                                  "actionstepover",
                                  "actionstepout"
                                 };

        enabledMenus(enable_names, bDebug);
        enabledMenus(disable_names, !bDebug);
    }

    public static void refreshRunMenu(bool bRun)
    {
        if (bRun) {
            String []enable_names = {
                "actionstoprun"
            };

            String []disable_names = {"actiondebug",
                                      "actionrun",
                                      "actionbreak",
                                      "actionstepin",
                                      "actionstepover",
                                      "actionstepout"
                                     };

            enabledMenus(enable_names, true);
            enabledMenus(disable_names, false);
        } else {
            refreshDebugMenu(false);
        }
    }

   public  static void disableDebugMenu()
    {

        String []disable_names = {"actiondebug",
                                  "actionrun",
                                  "actionstepin",
                                  "actionstepover",
                                  "actionstepout",
                                  "actionbreak",
                                  "actionstoprun"
                                 };

        enabledMenus(disable_names, false);
    }

    public static void refreshDebugControl(bool bInterrupt)
    {
        String []enable_names = {
            "actiondebug",
            "actionstepin",
            "actionstepover",
            "actionstepout",
            "actionfunction"
        };

        String []disable_names = {"actionbreak"};
        enabledMenus(enable_names, bInterrupt);
        enabledMenus(disable_names, !bInterrupt);
    }
    public static void setDocumentOpened(bool b)
    {
        String []names = {"actionclose",
                          "actionundo",
                          "actionredo",
                          "actioncut",
                          "actioncopy",
                          "actioncurup",
                          "actioncurleft",
                          "actioncurright",
                          "actioncurdown",
                          "actionlinebegin",
                          "actionlineend",
                          "actionprepage",
                          "actionnextpage",
                          "actiontotop",
                          "actiontobottom",
                          "actionnewlineup",
                          "actionnewlinedown",
                          "actionbreakpoint",
                          "actionpaste",
                          "actiondelete",
                          "actiondelcurline",
                          //"actionfind",
                          "actiongoto",
                          //"actionreplace",
                          "actionfindagain",
                          "actionsave",
                          "actionmatchbrace",
                          "actionsaveas",
                          "actionprint",
                          "actioncodepage",
                          "actioncovcharset"
                         };
        enabledMenus(names, b);
    }

    public static void enabledMenus(@NotNilptr String []names, bool b)
    {
        for (int i =0; i < names.length; i++) {
            QAction action = ((QAction)_menuMgr.mainwindow.findByName(names[i]));
            if (action != nilptr) {
                action.setEnable(b);
            }
        }
    }

    public static void enabledMenu(String name, bool b)
    {
        QAction action = ((QAction)_menuMgr.mainwindow.findByName(name));
        if (action != nilptr) {
            action.setEnable(b);
        }
    }

    class TriggerEvent : onEventListener
    {
        public void onTrigger(@NotNilptr QObject obj)override
        {
            String name = obj.getName();
            
            switch(name){
                case ("actionOpen"): {
                    app._mdispace.doOpen();
                }
                break;
                case ("actiondebug"): {
                    app._mdispace.debugRun();
                }
                break;
                case ("actionremotedbg"): {
                    app._mdispace.remoteDebug();
                }
                break;
                case ("actionattachdbg"): {
                    app._mdispace.attachDebug();
                }
                break;
                case ("actionrun"): {
                    app._mdispace.Run();
                }
                break;
                case ("actionsave"): {
                    app._mdispace.saveFile();
                }
                break;
                case ("actionoverride"): {
                    app._mdispace.overrideFunction();
                }
                break;
                case ("actionsaveas"): {
                    app._mdispace.saveFileAs();
                }
                break;
                case ("actionsaveproject"): {
                    app._mdispace.saveProject();
                }
                break;
                case ("actionProject_P"): {
                    app._mdispace.createProject();
                }
                break;
                case ("actioncompile_project"): {
                    app._mdispace.build(nilptr);
                }
                break;
                case ("actionprocstop"): {
                    app._mdispace.buildStop();
                }
                break;
                case ("actionclean"): {
                    app._mdispace.cleanup();
                }
                break;
                case ("allwindows"): {
                    app._mdispace.showAllWindows();
                }
                break;
                case ("actiontoback"): {
                    app._mdispace.toback();
                }
                break;
                case ("actiontofront"): {
                    app._mdispace.tofront();
                }
                break;
                case ("actionexporttools"): {
                    ExportTool.Show();
                }
                break;
                case ("actionpackmgr"): {
                    PackageViewer.Show();
                }
                break;
                case ("actionsaveastemp"): {
                    app._mdispace.saveProjectAsTemplate();
                }
                break;
                case ("actionoverlapped"): {
                    app._mdispace.cascadeSubWindows();
                }
                break;
                case ("actionlocalProblem"): {
                    XWndInfor.infoWnd.nextInfo();
                }
                break;
                case ("sortwindows"): {
                    app._mdispace.tileSubWindows();
                }
                break;
                case ("actionundo"): {
                    app._mdispace.UnDo();
                }
                break;
                case ("actionredo"): {
                    app._mdispace.ReDo();
                }
                break;
                case ("actioncut"): {
                    app._mdispace.Cut();
                }
                break;
                case ("actionextmgr"): {
                    app._mdispace.openExtMgr();
                }
                break;
                case ("actioncopy"): {
                    app._mdispace.Copy();
                }
                break;
                case ("actioncodepage"): {
                    app._mdispace.UpdateCodepage();
                }
                break;
                case ("actioncovcharset"): {
                    app._mdispace.convertCharset();
                }
                break;
                case ("actionnewlineup"): {
                    app._mdispace.insertNewLine();
                }
                break;
                case ("actionnewlinedown"): {
                    app._mdispace.appendNewLine();
                }
                break;
                case ("actionupper"): {
                    app._mdispace.setUpper();
                }
                break;
                case ("actionlower"): {
                    app._mdispace.setLower();
                }
                break;
                case ("actionclose"): {
                    app._mdispace.closeCurrentDocument();
                }
                break;
                case ("actioncloseproject"): {
                    app._mdispace.closeProject();
                }
                break;
                case ("actionpaste"): {
                    app._mdispace.Paste();
                }
                break;
                case ("actiondelete"): {
                    app._mdispace.Delete();
                }
                break;
                case ("actiondelcurline"): {
                    app._mdispace.DeleteCurLine();
                }
                break;

                case ("actionsamples"): {
                    String url = _system_.getAppPath().findVolumePath().appendPath("examples");
                    QCore.openLocal(String.formatPath(url, false));
                }
                break;
                case ("actionhelp"): {
                    String url = _system_.getAppPath().findVolumePath().appendPath("./document/html/index.html");
                    QCore.openLocal(String.formatPath(url, false));
                }
                break;
                case ("actionsetting"): {
                    app._mdispace.showSetting();
                }
                break;
                case "actionreplace":
                case ("actionfind") : {
                    app._mdispace.FindReplace();
                }
                break;
                case ("actiongoto"): {
                    app._mdispace.gotoLine();
                }
                break;
                case ("actionfindagain"): {
                    app._mdispace.findAgain();
                }
                break;
                case ("actiongenerateNativeSrc"): {
                    app._mdispace.generateSource();
                }
                break;
                case ("actiongenmake"): {
                    app._mdispace.generateMake();
                }
                break;
                case ("actionopenoutput"): {
                    app._mdispace.openOutput();
                }
                break;
                case ("actiongotodef"): {
                    app._mdispace.gotoDef();
                }
                break;
                case ("actionstoprun"): {
                    app._mdispace.stopRun();
                }
                break;
                case ("actionprop"): {
                    app._mdispace.showProperites(nilptr);
                }
                break;
                case ("actionbreak"): {
                    app._mdispace.debuggee.setBreak(ThreadManager.currentThreadId);
                }
                break;
                case ("actionstartup"): {
                    app._mdispace.openIndexPage();
                }
                break;
                case ("actionmatchbrace"): {
                    app._mdispace.matchbrace();
                }
                break;

                case ("actiontest"): {
                    XWorkspace.workspace.test();
                }
                break;
                case ("actionstepin"): {
                    if (XWorkspace.isDebugging()){
                        refreshRunMenu(true);
                        app._mdispace.debuggee.stepin(ThreadManager.currentThreadId);
                    }
                }
                break;
                case ("actionstepover"): {
                    if (XWorkspace.isDebugging()){
                        refreshRunMenu(true);
                        app._mdispace.debuggee.stepover(ThreadManager.currentThreadId);
                    }
                }
                break;
                case ("actionstepout"): {
                    if (XWorkspace.isDebugging()){
                        app._mdispace.debuggee.stepout(ThreadManager.currentThreadId);
                    }
                }
                break;
                case ("actionQTCreator"): {
                    openDesigner();
                }
                break;
                case ("actionexit"): {
                    mainwindow.close();
                }
                break;
                case ("actionbreakpoint"): {
                    app._mdispace.toggleBreakpoint();
                }
                break;
                case ("actionfile"): {
                    app._mdispace.addObject(0);
                }
                break;
                case ("actionclass"): {
                    app._mdispace.addObject(1);
                }
                break;
                case ("actioncurup"): {
                    app._mdispace.CursorUp();
                }
                break;
                case ("actioncurleft"): {
                    app._mdispace.CursorLeft();
                }
                break;
                case ("actioncurright"): {
                    app._mdispace.CursorRight();
                }
                break;
                case ("actioncurdown"): {
                    app._mdispace.CursorDown();
                }
                break;
                case ("actionlinebegin"): {
                    app._mdispace.CursorLineBegin();
                }
                break;
                case ("actionlineend"): {
                    app._mdispace.CursorLineEnd();
                }
                break;
                case ("actionprepage"): {
                    app._mdispace.CursorPrevPage();
                }
                break;
                case ("actionnextpage"): {
                    app._mdispace.CursorNextPage();
                }
                break;
                case ("actiontotop"): {
                    app._mdispace.CursortoTop();
                }
                break;
                case ("actiontobottom"): {
                    app._mdispace.CursortoBottom();
                }
                break;
                case ("actionprint"): {
                    app._mdispace.doPrint();
                }
                break;
                case ("actiondeploy") :{
                    app._mdispace.deploy();
                }
                break;
                case ("actiondeployto"): {
                    app._mdispace.deployto();
                }
                break;
                case ("actioninstcext"): {
                    app._mdispace.installCompileExt();
                }
                break;
                case ("actioninstallplugin"): {
                    app._mdispace.installPlugin();
                }
                break;
                case ("actioncomment"): {
                    app._mdispace.showComment();
                }
                break;
                case ("actionsendfeedback"): {
                    app._mdispace.sendFeedback();
                }
                break;
                case ("actionabout"): {

                    String buildtime = String.formatDate("%Y年%m月%d日", _system_.getAppTimestamp());
                    app.mainWindow.About("关于",
                                         "<Strong>XStudio(Xlang 集成开发环境) Release " + Utils.getAppVersion() + " </Strong><br /><br />" +
                                         "开发语言: Xlang v3.3<br /><br />" +
                                         "编译时间: " + buildtime + "<br /><br />" +
                                         "<b>该软件使用xlang 3.3 开发, 软件全部源代码可在xlang的example中找到," +
                                         "native部分为C++与Xlang的XNL项目(同样在example代码中), native项目仅有软件使用的部分调用," +
                                         "如需要用于其它开发需要修改native项目增加接口.</b><br /><br />" +
                                         "该软件的使用不受任何限制,可用于任意用途的修改或者发布.<br /><br />" +
                                         "<em>需要注意该软件底层使用了第三方图形库Qt (Copyright The Qt Company Ltd), 二次发布和使用须遵守第三方授权协议.</em><br /><br />" +
                                         "<strong>xlang项目中使用了以下第三方项目:</strong><br />" +
                                         "<em>	curl-7.37.0</em><br />" +
                                         "<em>	iconv-1.11.1</em><br />" +
                                         "<em>	openssl-1.0.2e</em><br />" +
                                         "<em>	zlib-1.2.8</em><br />" +
                                         "<em>	pcre-8.37</em><br />" +
                                         "<em>	cJSON</em><br />" +
                                         "<em>	libffi</em><br />" +
                                         "<em>	libmicrohttpd</em><br />" +
                                         "<em>	rapidxml</em><br />" +
                                         "<em>	lzma</em><br /><br />" +
                                         "官方主页:<a href=\"http://xlang.link/\">http://xlang.link/</a><br />" +
                                         "官方博客:<a href=\"http://blog.xlang.link/\">http://blog.xlang.link/</a><br /><br />" +
                                         "github项目首页:<a href=\"https://ixlang.github.io/\">https://ixlang.github.io/</a><br />" +
                                         "github项目仓库:<a href=\"https://github.com/ixlang/XStudio\">https://github.com/ixlang/XStudio</a><br />" +
                                         "github代码示例仓库:<a href=\"https://github.com/ixlang/examples\">https://github.com/ixlang/examples</a><br /><br />" +
                                         "致谢名单:<a href=\"http://xlang.link/credits.html\">http://xlang.link/credits.html</a><br />" +
                                         "<em>(为所有对 xlang 以及 XStudio 的进步有推助作用的名录)</em><br /><br />" +
                                         "<p align=\"right\">建议可通过以下方式反馈</p>" +
                                         "<p align=\"right\">QQ: 3.vc@163.com</p>" +
                                         "<p align=\"right\">Cadaquz 2018-07-30</p>");
                }
                break;
            }
        }
    };

    TriggerEvent  _triggerEvent = new TriggerEvent();
    ExternMenuEvent _externListener = new ExternMenuEvent();

    class ExternMenuEvent : onEventListener
    {
        Map<String, IXPlugin> menu_plugin = new Map<String, IXPlugin>();

        public void onTrigger(@NotNilptr QObject obj)override
        {
            String name = obj.getName();
            if (name != nilptr) {
                try {
                    IXPlugin plugin = menu_plugin.get(name);
                    if (plugin != nilptr) {
                        plugin.onMenuTrigged(name);
                    }
                } catch(Exception e) {

                }
            }
        }

        public void addMenu(@NotNilptr QAction action, String name, IXPlugin plugin)
        {
            menu_plugin.put(name, plugin);
            action.setOnEventListener(_externListener);
        }

        public bool check(String name)
        {
            return menu_plugin.containsKey(name);
        }
    };

    public bool addMenu(int mainid, String name,@NotNilptr  String text, String icon, String shortcut, IXPlugin plugin)
    {
        bool bSeparator = text.equals("-");
        if (bSeparator == false && _externListener.check(name)) {
            return false;
        }


        if (mainid < 0 || mainid >= mainMenus.length) {
            return false;
        }

        QMenu menu = mainMenus[mainid];
        if (menu != nilptr){
            QAction action;

            if (icon != nilptr) {
                action = menu.addAction(icon, text);
            } else {
                action = menu.addAction(text);
            }
        
            if (action != nilptr){
                if (bSeparator){
                    action.setSeparator(true);
                }
                
                if (!bSeparator) {
                    action.setName(name);
                    if (shortcut != nilptr) {
                        action.setShortcut(shortcut);
                    }
                    _externListener.addMenu(action, name, plugin);
                    return true;
                }
            }
        }
        return false;
    }

    public void setupListener(String actname){
        //mainwindow.findByName(actname).setOnEventListener(_triggerEvent);
        
        QObject act = mainwindow.findByName(actname);
        if (act != nilptr){
            act.setOnEventListener(_triggerEvent);
        }else{
            _system_.output("actname is nilptr");
            QMessageBox.Critical("找不到控件","actname",QMessageBox.Ok,QMessageBox.Ok);
        }
        
    }
    
    public void init(@NotNilptr XStudioApp _app)
    {
        app = _app;
        mainwindow = _app.mainWindow;
        
        String [] actions = {
            "actionsetting","actionOpen","actionProject_P","actionsave","actionsaveas","actionsaveastemp","actionsaveproject","actionclose","actioncloseproject","actionexit",
            "actionfile","actionclass","actionpackmgr","menuaddition","actionundo","actionredo","actioncut","actioncopy","actionnewlineup",
            "actionnewlinedown","actionpaste","actiondelete","actiondelcurline","actiongotodef","actionfind","actiongoto","actionreplace","actionfindagain","actionoverride",
            "actionautocomplete","actionopenoutput","actioncompile_project","actionprocstop","actionclean","actiongenerateNativeSrc","actiongenmake","actionprop","actionfunction","actiondata",
            "actionlocalProblem","actionstartup","actionmatchbrace","actiondebug","actionremotedbg","actionattachdbg","actionrun","actionstepin","actionstepover","actionstepout","actionbreakpoint",
            "menunewbreakpoint","actionbreak","actionstoprun","actiontest","actioncomment","actionexporttools","actionQTCreator","actionhelp","actionextmgr","actionsendfeedback","actionsamples",
            "actionabout","sortwindows", "actionoverlapped","allwindows","actiontoback","actiontofront","actioninstcext","actioninstallplugin","actioncurup","actioncurleft",
            "actioncurright","actioncurdown","actionlinebegin","actionlineend","actionprepage","actionnextpage","actiontotop","actiontobottom","menukeyboard","actionupper",
            "actionlower","actionprint", "actiondeploy", "actiondeployto", "actioncodepage", "actioncovcharset"
        };

        for (int i = 0; i < actions.length; i++) {
            setupListener(actions[i]);
        }
        
        String [] mainMenuNames = {"menuFile", "menuEdit", "menuSln", "menuDebug", "menuTools", "menuWindow", "menuHelp"};

        for (int i = 0; i < mainMenuNames.length; i++) {
            mainMenus[i] = (QMenu)mainwindow.findByName(mainMenuNames[i]);
            mainMenus[i].setOnEventListener(_triggerEvent);
        }
    }

    public void openDesigner()
    {
        String degpath = String.formatPath(_system_.getAppPath().findVolumePath().appendPath("designer/designer"), false);

        if (_system_.getPlatformId() == 0) {
            degpath = degpath + ".exe";
        }
        
        String []args = new String[1];
        args[0] = degpath;

        Process designer = new Process(degpath, args);
        
        try {
            designer.create(Process.Visible);
        } catch(Exception e) {
            QMessageBox.Critical("error", e.getMessage(), QMessageBox.Ok, QMessageBox.Ok);
        }
    }
};