//xlang Source, Name:XIntelliSense.xcs 
//Date: Sun Aug 21:33:35 2018 
class XIntelliSense : IXIntelliSense{
	long handle;
	Project project;
    
	const int XIS_NAME = 0,
				XIS_TYPE  = 1,
				XIS_CLAS = 2,
				XIS_PROP = 3,
                XIS_BACL = 4,
                XIS_SRC = 5,
                XIS_LINE = 6,
                XIS_ROW = 7,
                XIS_VISIBILITY = 8;
                
                                
	public XIntelliSense(@NotNilptr Project proj,@NotNilptr  Configure configure){
    
		if (Setting.isIntellisense()){
			project = proj;
			handle = createXProject(proj.getProjectDir());
			
			if (handle != 0){

                JsonObject paths = (JsonObject)configure.root.get("path");
                
                if (paths != nilptr){
                    JsonArray libpath = (JsonArray)paths.get("libpath");
                    if (libpath != nilptr){
                        for (int i = 0, ct = libpath.length(); i < ct; i++){
                            String var = libpath.getString(i);
                            if (var != nilptr){
                                addLibPath(handle, XPlatform.converToPlatformCharSet(proj.MapVariable(var)));
                            }
                        }
                    }
                }
                
                JsonArray libs = (JsonArray)configure.root.get("libs");
                if (libs != nilptr){
                    for (int i = 0, ct = libs.length(); i < ct; i++){
                        String var = libs.getString(i);
                        if (var != nilptr){
                            addLib(handle, XPlatform.converToPlatformCharSet(proj.MapVariable(var)));
                        }
                    }
                }
                
                JsonArray links = (JsonArray)configure.root.get("links");
                if (links != nilptr){
                    for (int i = 0, ct = links.length(); i < ct; i++){
                        String var = links.getString(i);
                        if (var != nilptr){
                            addLink(handle, XPlatform.converToPlatformCharSet(proj.MapVariable(var)));
                        }
                    }
                }
            
				for (int i = 0, c = project.getSourceFileCount(); i < c; i++){ 
					String source = project.getSourcePath(i);
                    if (source != nilptr){
                        String ext = source.findExtension();
                        
                        if ((ext.equalsIgnoreCase(".x") || ext.equalsIgnoreCase(".xcs") || ext.equalsIgnoreCase(".xcsm") )){
                            addFile(handle, XPlatform.converToPlatformCharSet(proj.MapVariable(source)));
                        }
                    }
				}
				
			}
        }
	}
    
    
    public void setCommand(String , String){
        
    }
    
    public void appendLibpath(@NotNilptr String path){
		synchronized(this){
			if (handle != 0){
				addLibPath(handle, XPlatform.converToPlatformCharSet(path));
			}
        }
    }
    
    public void appendLib(@NotNilptr String path){
		synchronized(this){
			if (handle != 0){
				addLib(handle, XPlatform.converToPlatformCharSet(path));
			}
		}
    }
    
    public void appendLink(@NotNilptr String path){
		synchronized(this){
			if (handle != 0){
				addLink(handle, XPlatform.converToPlatformCharSet(path));
			}
		}
    }
    
    public void addSource(@NotNilptr String source){
		if (Setting.isIntellisense()){
			synchronized(this){
				if (handle != 0){
					addFile(handle, XPlatform.converToPlatformCharSet(source));
				}
			}
        }
    }
    

	public XIntelliResult [] getIntelliSenseL(@NotNilptr String source, String content, int line, int column){
		if (Setting.isIntellisense()){
			synchronized(this){
				if (handle != 0){
					IntelliSenseL(handle, XPlatform.converToPlatformCharSet(source), content, line);
				}
			}
        }
		return getResult();
	}
    
    public XIntelliResult [] getIntelliSenseObject(@NotNilptr String source,int line, int column, String name){
		if (Setting.isIntellisense()){
			synchronized(this){
				if (handle != 0){
					XISQueryObject(handle, XPlatform.converToPlatformCharSet(source), line, name);
				}
			}
        }
		return getResult();
	}
     
    public XIntelliResult [] getIntelliSenseObjectM(@NotNilptr String source,int line){
		if (Setting.isIntellisense()){
			synchronized(this){
				if (handle != 0){
					XISQueryObjectM(handle, XPlatform.converToPlatformCharSet(source), line);
                }
			}
        }
		return getResult();
	}
    
	public XIntelliResult [] getIntelliSense(@NotNilptr String source,String content, long pos, int line, int column){
		if (Setting.isIntellisense()){
			synchronized(this){
				if (handle != 0){
					IntelliSense(handle, XPlatform.converToPlatformCharSet(source), content, pos);
                }else{
					return nilptr;
                }
			}
		}
		return getResult();
	}
    
	public bool initializ()override{
        return true;
    }
    
	public String getIntelliSenseMap(){
		if (Setting.isIntellisense()){
			synchronized(this){
				if (handle != 0){
					genIntelliSense(handle);
					return XgetStructMap(handle, true);
                }
			}
		}
        return nilptr;
	}
	public void update(@NotNilptr String sourcePath, String content){
		if (Setting.isIntellisense()){
			synchronized(this){
				if (handle != 0){
					updateFile(handle, XPlatform.converToPlatformCharSet(sourcePath), content);
                }
			}
		}
	}
    public void updateSource(@NotNilptr String sourcePath, @NotNilptr String newFile){
		if (Setting.isIntellisense()){
			synchronized(this){
				if (handle != 0){
					updateSource(handle, XPlatform.converToPlatformCharSet(sourcePath), XPlatform.converToPlatformCharSet(newFile));
				}
			}
        }
    }
    
    public WordRecognizer getWordRecognizer(String filepath){
        return new WordRecognizer(){
            bool isWord(char c, bool first)override{
                return ((c =='_') || (c >= 'a' && c <='z') || (c >= 'A' && c <='Z') || ((first == false) && (c >= '0' && c <= '9')));
            }
            
            bool isTriggedChar(char c)override{
                return (c == '.');
            }
            
            bool isDocument(String ext)override{
                if (ext == nilptr){
                    return false;
                }
                return (ext.equalsIgnoreCase(".x") || ext.equalsIgnoreCase(".xcs") || ext.equalsIgnoreCase(".xcsm"));
            }
            
            String getFileFilter(String filepath, bool bopen){
                return nilptr;
            }
        };
    }
    
    
    public class XLangIntelliResult : XIntelliResult{
        public String name;
        public String type;
        public String visibility;
        public String prop;
        public XLangIntelliResult _class;
        public XLangIntelliResult[] params;
        public String source;
        public int line;
        public int row;
        
        @NotNilptr String get_name(){
            return name;
        }
        
        int get_type(){
            return type.parseInt();
        }
        
        int get_visibility(){
            return visibility.parseInt();
        }
        
        bool hasProp(char c){
            return -1 != prop.indexOf(c);
        }
        
        XIntelliResult get_class(){
            return _class;
        }
        
        XIntelliResult[] get_params(){
            return params;
        }
        
        String get_source(){
            return source;
        }
        
        int get_line(){
            return line;
        }
        
        int get_row(){
            return row;
        }
        
        void accept(){
            if (name.equals("try")){
                XSourceEditor editor = XWorkspace.CurrentSourceEditorView();
                if (editor != nilptr){
                    QScintilla sci = editor._sci;
                    int pos = sci.getCurrentPosition();
                    int curline = sci.positionToLine(pos);
                    int column = pos - sci.getPosition(curline);
                    int indent = column - name.length();
                    
                    String szindent = String.fill(' ', indent);
                    String append = "{\n$INDENT\t\n$INDENT}catch(Exception e){\n$INDENT\t\n$INDENT}\n".replace("$INDENT", szindent);
                    sci.insertText(pos, append);
                    sci.gotoPos(pos + indent + 3);
                }
            }else
            if (name.equals("if") || name.equals("while") || name.equals("synchronized") || name.equals("synchronized_read") || name.equals("synchronized_write")){
                XSourceEditor editor = XWorkspace.CurrentSourceEditorView();
                if (editor != nilptr){
                    QScintilla sci = editor._sci;
                    int pos = sci.getCurrentPosition();
                    int curline = sci.positionToLine(pos);
                    int column = pos - sci.getPosition(curline);
                    int indent = column - name.length();
                    
                    String szindent = String.fill(' ', indent);
                    String append = " () {\n$INDENT\t\n$INDENT}".replace("$INDENT", szindent);
                    sci.insertText(pos, append);
                    sci.gotoPos(pos + 2);
                }
            }else
            if (name.equals("finally") || name.equals("else")){
                XSourceEditor editor = XWorkspace.CurrentSourceEditorView();
                if (editor != nilptr){
                    QScintilla sci = editor._sci;
                    int pos = sci.getCurrentPosition();
                    int curline = sci.positionToLine(pos);
                    int column = pos - sci.getPosition(curline);
                    int indent = column - name.length();
                    
                    String szindent = String.fill(' ', indent);
                    String append = "{\n$INDENT\t\n$INDENT}".replace("$INDENT", szindent);
                    sci.insertText(pos, append);
                    sci.gotoPos(pos + indent + 3);
                }
            }else
            if (name.equals("switch")){
                XSourceEditor editor = XWorkspace.CurrentSourceEditorView();
                if (editor != nilptr){
                    QScintilla sci = editor._sci;
                    int pos = sci.getCurrentPosition();
                    int curline = sci.positionToLine(pos);
                    int column = pos - sci.getPosition(curline);
                    int indent = column - name.length();
                    
                    String szindent = String.fill(' ', indent);
                    String append = " () {\n$INDENT\tcase 0: /*TODO*/\n$INDENT\tbreak;\n$INDENT\tdefault:\n$INDENT\tbreak;\n$INDENT}".replace("$INDENT", szindent);
                    sci.insertText(pos, append);
                    sci.gotoPos(pos + 2);
                }
            }else
            if (name.equals("do")){
                XSourceEditor editor = XWorkspace.CurrentSourceEditorView();
                if (editor != nilptr){
                    QScintilla sci = editor._sci;
                    int pos = sci.getCurrentPosition();
                    int curline = sci.positionToLine(pos);
                    int column = pos - sci.getPosition(curline);
                    int indent = column - name.length();
                    
                    String szindent = String.fill(' ', indent);
                    String append = "{\n$INDENT\t\n$INDENT}while(true /*TODO*/);".replace("$INDENT", szindent);
                    sci.insertText(pos, append);
                    sci.gotoPos(pos + indent + 3);
                }
            }else
            if (name.equals("enum") || name.equals("interface") || name.equals("package")  || name.equals("class") || name.equals("import")){
                XSourceEditor editor = XWorkspace.CurrentSourceEditorView();
                if (editor != nilptr){
                    QScintilla sci = editor._sci;
                    int pos = sci.getCurrentPosition();
                    int curline = sci.positionToLine(pos);
                    int column = pos - sci.getPosition(curline);
                    int indent = column - name.length();
                    
                    String szindent = String.fill(' ', indent);
                    String append = " {\n$INDENT\t\n$INDENT};".replace("$INDENT", szindent);
                    sci.insertText(pos, append);
                    sci.gotoPos(pos + 1);
                }
            }
        }
        IXIntelliSense.InputDescription  inputsesc;
        
        InputDescription makeInputText(){
            if (get_type() != 23){
                return nilptr;
            }
            String descr ;
            int [][] current_idincs ;
            if (inputsesc == nilptr){
                //XIntelliSense.XIntelliResult [] params = get_params();
                if (params != nilptr && params.length > 0) {
                    current_idincs = new int[params.length][2];
                    descr = get_name() + "(";
                    
                    for (int x = 0; x < params.length; x ++) {
                        XIntelliSense.XIntelliResult param = params[x];
                        
                        if (param == nilptr){
                            continue;
                        }
                        
                        current_idincs[x][0] = descr.length();
                        
                        XIntelliSense.XIntelliResult pclass = param.get_class();
                        
                        if (pclass != nilptr){
                            descr = descr + pclass.get_name() + " " + param.get_name() + ":";
                        }else{
                            descr = descr + "? " + param.get_name() + ":";
                        }
                        
                        current_idincs[x][1] = descr.length();
                        
                        if (x + 1 < params.length) {
                            descr = descr + ",";
                        } else {
                            descr = descr;
                        }
                    }
                    descr = descr + ")";
                } else {
                    descr = get_name() + "()";
                }
                
                inputsesc = new IXIntelliSense.InputDescription(){
                    String finalInputText = descr;
                    int [][] scpoedescr = current_idincs;
                    
                    String getInsertText(){
                        return finalInputText;
                    }
                    
                    int [][] getTipsDescription(){
                        return scpoedescr;
                    }
                };
            }
            
            return inputsesc;
        }
    };
    
    int parseResultInt(String res){
        if (res == nilptr){
            return 0;
        }
        return res.parseInt();
    }
	public XIntelliResult [] getResult(){
		if (Setting.isIntellisense() == false){
			return nilptr;
		}
        XLangIntelliResult []  result  = nilptr;
        synchronized(this){
			if (handle == 0){
				return result;
            }
			int count = getXIntelliSenseCount(handle);
			if (count == 0){
				return nilptr;
			}	
			result = new XLangIntelliResult[count];
			
			for (int i = 0; i < count; i ++){
				result[i] = new XLangIntelliResult();
				result[i].name = getIntelliSenseItemInfo(handle, i, XIS_NAME);
				result[i].type = getIntelliSenseItemInfo(handle, i, XIS_TYPE);
                result[i].visibility = getIntelliSenseItemInfo(handle, i, XIS_VISIBILITY);
				result[i].prop = getIntelliSenseItemInfo(handle, i, XIS_PROP);
				result[i].source = getIntelliSenseItemInfo(handle, i, XIS_SRC);
				result[i].line = parseResultInt(getIntelliSenseItemInfo(handle, i, XIS_LINE));
				result[i].row = parseResultInt(getIntelliSenseItemInfo(handle, i, XIS_ROW));
				
				result[i]._class = new XLangIntelliResult();
				result[i]._class.name = getIntelliSenseItemInfo(handle, i, XIS_CLAS);
				result[i]._class.type = "31";

				if (result[i].type.equals("23")){
					int pc = getIntelliSenseFunctionParamCount(handle, i);
					result[i].params = new XLangIntelliResult[pc];
					for (int x =0; x < pc; x ++){
						result[i].params[x] = new XLangIntelliResult();
						result[i].params[x].name = getIntelliSenseFunctionParamInfo(handle, i, x, XIS_NAME);
						result[i].params[x].type = getIntelliSenseFunctionParamInfo(handle, i, x, XIS_TYPE);
						result[i].params[x].source = getIntelliSenseFunctionParamInfo(handle, i, x,XIS_SRC);
						result[i].params[x].line = parseResultInt(getIntelliSenseFunctionParamInfo(handle, i, x,XIS_LINE));
						result[i].params[x].row = parseResultInt(getIntelliSenseFunctionParamInfo(handle, i, x,XIS_ROW));
				
						result[i].params[x]._class = new XLangIntelliResult();
						result[i].params[x]._class.name = getIntelliSenseFunctionParamInfo(handle, i, x, XIS_CLAS);
						result[i].params[x]._class.type = "31";
					}
				}
			}
        }
		return result;
	}
    
    public void close(){
		synchronized(this){
			if (handle != 0){
				destroyXProject(handle);
                handle = 0;
				project = nilptr;
			}
		}
    }

	public void finalize(){
		close();
    }
    
	import "libXIntelliSense"{
		//long cdecl getMemoryInfo(int id); 
		long cdecl createXProject(String workdir); 
        void cdecl destroyXProject(long handle);
		bool cdecl addFile(long h, String file); 
		bool cdecl updateFile(long h, String file, String content); 
        bool cdecl updateSource(long h, String file, String content); 
		bool cdecl IntelliSense(long h, String file, String content, long position); 
        bool cdecl XISQueryObject(long _sc, String sourceFile, int line, String name);
        bool cdecl XISQueryObjectM(long _sc, String sourceFile, int line);
        bool cdecl IntelliSenseL(long h, String file, String content, int line); 
		int cdecl getXIntelliSenseCount(long h); 
		String cdecl getIntelliSenseItemInfo(long h, int id, int prop);
		int cdecl getIntelliSenseFunctionParamCount(long h, int id);
		String cdecl getIntelliSenseFunctionParamInfo(long h, int id, int param, int prop);
		bool cdecl addIncPath(long h, String path);
		bool cdecl addLibPath(long h, String path);
		bool cdecl addLib(long h, String path);
        bool cdecl addLink(long h, String path);
		String cdecl XgetStructMap(long h, bool bv);
		void cdecl genIntelliSense(long h);
        //void cdecl test(long h);
	};
};