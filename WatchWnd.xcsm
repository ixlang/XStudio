//xlang Source, Name:WatchWnd.xcsm 
//Date: Tue Sep 17:10:01 2018 

class WatchWnd : ListDockWidget{

	Map<String, long> watchs = new Map<String, long>();
    JsonNode saveState;
    
	long add_item = 0;
    public static WatchWnd watchesWnd;
    JsonObject root;
    Object rootLock = new Object();
    ContextMenu _contextMenu = new ContextMenu();
    public DebugValueParser __dvp = new DebugValueParser("watch");    
    

    
	public void onListItemClicked(QTreeWidget tree,long item, int column)override{
    
    }

	public void onListItemPressed(QTreeWidget tree,long item, int column)override{
		_contextMenu.actions[0].setEnable(item != add_item);
	}
    
	public void onListItemDoubleClicked(@NotNilptr QTreeWidget tree,long item, int column)override{
		if (item == add_item){
			return ;
        }
        long objectId = 0;
        
        if (column == 2){
			objectId = tree.getItemTag(item, 2);
        }
        
        String caption = tree.getItemText(item, 0);
        String sztype = tree.getItemText(item, 1);
        
        if (objectId != 0 && sztype.equals("String")){
			XWorkspace.workspace.debuggee.queryObject("detail:" + caption , "" + objectId, __dvp.getIdentifier(), 0, 0, nilptr);
        }else{
			String text = tree.getItemText(item, column);
            if (text.length() > 0){
				TextDetail td = new TextDetail();
				td.create(caption, text.replace(" ↩ ", "\n")
							.replace(" ↵ ", "\r")
							.replace(" ⇥ ", "\t")
                            .replace(" ⇤ ", "\b"), nilptr, false);
            }
        }
	}
    
    public void onListItemExpanded(@NotNilptr QTreeWidget tree,long item)override{
        __dvp.expandItem(tree, item, nilptr);
	}

    public void onListItemChanged(@NotNilptr QTreeWidget tree,long item, int column){
		if (item == add_item){
			add_item = 0;
            long new_add_item = 0;
            
			if (column == 0){
				String name = tree.getItemText(item, 0);
                if (name.equals("") || name.equals("<添加监视>")){
					tree.setItemText(item, 0, "<添加监视>");
                    new_add_item = item;
                }else{
					if (watchs.containsKey(name)){
						QMessageBox.Critical("提示", "该对象已在监视列表中", QMessageBox.Ok, QMessageBox.Ok);
						tree.setItemText(item, 0, "<添加监视>");
						new_add_item = item;
                    }else{
						watchs.put(name, item);
						tree.modifyItemFlags(item, 0, QTreeWidget.ItemIsEditable);
						new_add_item = tree.addItem(nilptr, "<添加监视>");
						if (new_add_item != 0){
							tree.modifyItemFlags(new_add_item, QTreeWidget.ItemIsEditable, 0);
						}
						updateWatch();
                    }
                }
            }else{
				tree.setItemText(item, column, "");
                new_add_item = add_item;
            }
            
            add_item = new_add_item;
        }
    }
    

    
    public static void UpdateWatch(){
		watchesWnd.updateWatch();
    }
    
    public void updateWatch(){
		Map.Iterator<String, long> iter = watchs.iterator();
        JsonArray array = new JsonArray();
        while (iter.hasNext()){
			array.put(iter.getKey());
            iter.next();
        }
		XWorkspace.workspace.debuggee.updateWatch(array, ThreadManager.currentThreadId,ThreadManager.currentFrameId, false);
    }
    
    public String getListName()override{
		return "watchlist";
    }
    
    public void onQueryObject(JsonObject object){
        runOnUi(new Runnable(){
            void run(){
                __dvp.sendCommand(new Object[]{DebugValueParser.COMMAND.CMD_LOADOBJECT, getList(), object});
            }
        });
    }
    
    public 
    void showInfo(JsonObject infos){
        runOnUi(new Runnable(){
            void run(){
                if (infos != nilptr){
                    parseWatchInfo(infos);
                }
            }
        });
    } 
    
    public 
    void parseWatchInfo(@NotNilptr JsonObject json){
		__dvp.sendCommand(new Object[]{DebugValueParser.COMMAND.CMD_PARSEWATCH, getList(), watchs, json});
    }
        
   public  String [] getColumn()override{
		String [] columns = {"名称", "类型", "值", "ID"};
        return columns;
    }
    
    public int [] getColumnWidths()override{ 
		int [] ws = {150, 150, 200, 100};
        return ws;
    }
    
    
    public void listReset(){
		QTreeWidget list = getList();
        //UI线程使用
		synchronized(__dvp){
            __dvp.sendCommand(new Object[]{DebugValueParser.COMMAND.CMD_CLEAR,list});
            watchs.clear();
		}
        add_item = list.addItem(nilptr, "<添加监视>");
        list.modifyItemFlags(add_item, QTreeWidget.ItemIsEditable, 0);
    }
    
    public void onCreate(){
		listReset();
        
        createContextMenu();
        watchesWnd = this;
    }
    
    
    
    public void createContextMenu(){
		QTreeWidget list = getList();
        
		onEventListener menuListener = new onEventListener(){
		   void onTrigger(QObject obj) override{
				if (obj == _contextMenu.actions[0]){
                
					synchronized(__dvp){//UI线程使用
						long [] items = list.getSelectedItems();
						
						JsonArray array = new JsonArray();
						if (items != nilptr){
                            for (int i = 0; i < items.length; i++){
                                String label = list.getItemText(items[i], 0);
                                Map.Iterator<String, long> iter = watchs.find(label);
                                if (iter != nilptr){
                                    list.removeItem(items[i]);
                                    watchs.remove(iter);
                                }
                                array.put(label);
                            }
                        }
						XWorkspace.workspace.debuggee.updateWatch(array,ThreadManager.currentThreadId,ThreadManager.currentFrameId, true);
                        __dvp.incserial();
                    }
                }
		   }
		}; 
		String []acts = {"删除"};
		_contextMenu.create(list, acts, menuListener, nilptr);
	}
};