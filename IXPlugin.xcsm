//xlang Source, Name:IXPlugin.xcsm
//Date: Fri Jun 11:02:11 2019

interface SyntaxHighlighting
{
    /** 编辑器默认背景色*/
    int getDefaultBackColor();

    /** 编辑器默认字体颜色*/
    int getDefaultForeColor();

    /** 选中字体背景颜色*/
    int getSelectedBackColor();

    /** 选中字体颜色*/
    int getSelectedForeColor();

    /** 能否设置断点*/
    bool canSetBreakPoint();

    /** 断点背景色*/
    int getBreakPointBackColor();

    /** 断点前景色*/
    int getBreakPointForeColor();

    /** 能否设置标记*/
    bool canSetMarkPoint();

    /** 标记背景色*/
    int getMarkPointBackColor();

    /** 标记前景色*/
    int getMarkPointForeColor();

    /** 修改标记背景色*/
    int getModifiedMarkBackColor();

    /** 修改标记前景色*/
    int getModifiedMarkForeColor();

    /** 保存标记背景色*/
    int getSavedMarkBackColor();

    /** 保存标记前景色*/
    int getSavedMarkForeColor();

    /** 缩进线颜色*/
    int getIndentGuideColor();

    /** 行号背景色*/
    int getLineNumberBackColor();

    /** 行号前景色*/
    int getLineNumberForeColor();

    /** 括号匹配背景色*/
    int getMatchedBraceBackColor();

    /** 括号匹配前景色*/
    int getMatchedBraceForeColor();

    /** 注释文档前景色*/
    int getDocCommentKeyForeColor();

    /** 注释文档错误字前景色*/
    int getDocCommentErrForeForeColor();

    /** 全局类前景色*/
    int getGlobalClassForeColor();

    /** 操作符字体色*/
    int getOperatorForeColor();

    /** 字符串错误色*/
    int getStringEOLColor();

    /** 关键字颜色*/
    int getWordForeColor();

    /** 关键字背景颜色*/
    int getWordBackColor();

    /** 动态关键字背景色*/
    int getWord2BackColor();

    /** 动态关键字色*/
    int getWord2ForeColor();

    /** 字符串颜色*/
    int getStringForeColor();

    /** 数字颜色*/
    int getNumberForeColor();

    /** 字符颜色*/
    int getCharForeColor();

    /** 预处理器颜色*/
    int getPreprocessorForeColor();

    /** 注释颜色*/
    int getCommentForeColor();

    /** 行注释眼色*/
    int getCommentLineForeColor();

    /** 文档注释颜色*/
    int getDocCommentForeColor();

    /** 提示信息字体色*/
    int getCallTipsForeColor();

    /** 提示信息背景色*/
    int getCallTipsBackColor();

    /** 光标颜色*/
    int getCaretColor();

    /** 光标所在行背景色*/
    int getCaretLineBackColor();

    /** 折叠边栏颜色*/
    int getFoldMarginColor();

    /** 折叠边高亮色*/
    int getFoldMarginHIColor();

    /** 折叠标记背景颜色*/
    int getFolderBackColor();

    /** 折叠标记颜色*/
    int getFolderForeColor();

    /** 折叠标记(未折叠状态)颜色*/
    int getFolderOpenBackColor();
    int getFolderOpenForeColor();

    /** 折叠标记(end状态)颜色*/
    int getFolderEndBackColor();
    int getFolderEndForeColor();

    /** 折叠标记(中段状态)颜色*/
    int getFolderMidBackColor();
    int getFolderMidForeColor();

    /** 折叠标记(中段末尾状态)颜色*/
    int getFolderMidTailBackColor();
    int getFolderMidTailForeColor();

    /** 折叠标记(子段)颜色*/
    int getFolderSubBackColor();
    int getFolderSubForeColor();

    /** 折叠标记(尾部)颜色*/
    int getFolderTailBackColor();
    int getFolderTailForeColor();

    /** 待输入标记前景色*/
    int getIndicForeColor();

    /** 待输入标记背景色*/
    int getIndicBackColor();

};


interface IProject
{
    bool cloneConfigure(String tempName, String newName);
    void removeConfigure(String tempName);
    bool detectSourcesModified();
    void updateSourceModified();
    bool setCurrentConfigure(String configName, bool btips);
    Configure getConfigure(String name);
    Configure getCurrentConfig();
    String getOutputDir();
    String getOutputTarget();
    String getOutputName();
    bool setOption(String key, String text);
    void deploy();
    void deployto(String path);
    String getOption(String key);
    String readSlnFile(String file);
    JsonArray getSources();
    String getComment();
    void setComment(String comment);
    String MapVariable(String text);
    @NotNilptr String getName();
    @NotNilptr String getLanguage();
    bool addSource(String filePath);
    String replaceSource(int index, String filePath);
    bool save();
    bool saveAs(String path);
    String getSourcePath(int id);
    String generateFullPath(String source_path);
    @NotNilptr String getFullPath(String source_path);
    @NotNilptr String getProjectDir();
    int getSourceFileCount();
    String getSourceItem(int id);
    void removeSource(int id);
    String rename(int sourceID, String newname);
    bool isPathSeted();
    void setPath(String path);
    bool isModified();
    void setTag(String key, Object obj);
    Object getTag(String key);
    bool importPackage(String packName, String ver);
    void reinitIntelliSense();
};

class BuildListener{
    public enum BuildState{
        BuildSuccess, 
        BuildFailed, 
        BuildSkip,
        BuildPending
    };
    
	public void onBuild(bool success);
};

interface WorkspaceController
{
    TextEditorController findTextEditor(String path, bool openIfNotFound);
    TextEditorController openTextEditor(String path);
    TextEditorController createTextEditor();
    TextEditorController currentTextEditor();
    void setModifyMonitorAutoLoad();
    void restoreModifyMonitorAutoLoad();
    bool saveFile(String path);
    bool toggleBreakpointAtLine(String path, long line, bool bSet);
    void output(String text, int id);
    void setStatus(String text);
    bool addMenu(int mainid, String name, String text, String icon, String shortcut, IXPlugin plugin);
    void RunOnUi(UIRunnable);
    bool createRemoteDebug(String ip, int port);
    bool run();
    bool stopRun();
    IProject getCurrentProject();
    BuildListener.BuildState buildCurrentProject(BuildListener lis);
    QMainWindow getMainWindow();
    bool installXep(String path);
    
    void showStatusMessage(String text);
    void showWaitProgress(String text);
    void showProgress(String text, int value);
    void updateProgress(String text, int value);
    void hideProgress(String text);
    int registryOutput(String icon);
    void createDownloadTask(String key, String url, String local, long totalsize, DownloadListener ls, Object tag);
    void cancelDownloadTask(String key);
    bool hasDownloadTask(String key);
    int getDownloadTaskProgress(String key);
    void requestReconfigureSystem();
    SourceContent getSourceContent(String sourcefile);
};

interface IXStudioController
{
    WorkspaceController getWorkspace();
};

interface SourceContent{
    String getContent();
    String getPath();
    bool isEditing();
    String getCharset();
    bool updateContent(String content);
};

interface TextEditorController
{
    String getPath();
    String getTitle();
    bool save();
    void reload(String asCharset);
    void postreload(String asCharset);
    bool gotoLine(long line, long column);
    bool gotoPos(long line);
    bool select(long start, long end);
    bool gotoAndSelect(long start, long end);
    bool setBreakOn(long line, long column, bool set, bool bActive);
    bool activeEditor();
    void clearBreakOn();
    bool toggleBreakpoint(long pos, bool bSet);
    bool toggleBreakpointAtLine(long line, bool bSet);
    String getText(long start, long end);
    String getText();
    long getCurrentPosition();
    long getCurrentLine();
    void stopFileWatch();
    void continueFileWatch();
    void triggeInteliSence();
};

class ActionIdent{
    public String name;
    public String id;
    public IXPlugin plugin;
    public bool enabled;
    public QAction _action;
    public int aid;
    public onEventListener _el;
    public ActionIdent(String _n, String _i, IXPlugin p, onEventListener el){
        name = _n;
        id = _i;
        plugin = p;
        enabled = true;
        _el = el;
    }
    
    public void setEnabled(bool be){
        if (enabled != be){
            enabled = be;
            QAction qa = _action;
            if (qa != nilptr){
                qa.setEnable(be);
            }
        }
    }
    
    public void setAction(QAction qa){
        _action = qa;
    }
    
};
    
interface TextEditorPlugin
{
    /** 获取关键字， 2个String*/
    String getKeyWords();
    /** 获取代码高亮颜色配置类 */
    SyntaxHighlighting getColorConfigure(String styleName);

    bool requestClose(TextEditorController editor);
    String getIconFile();
    void configEditor(Project project,  String path, QScintilla sci, bool darkStyle);
};

interface WizardLoader{
	IProject loadProject(String file);
	void openTextFile(String file);
};

interface IProjectPlugin{
    String getWizard(bool projectExist);
    bool createProject(WizardLoader loader, String projectName, String projectDir, String uuid, IProject ownProject, bool addToProject);
    bool onpreCompile(IProject project);
    void onpostCompile(IProject project);
    bool onpreRun(IProject project, bool debug);
    void onpostRun(IProject project, bool debug);
    String getTargetPath(IProject project);
    ActionIdent [] getSolutionContextActions();
    ActionIdent [] getClassViewContextActions();
    void updateSolutionActionState(String files);
    void updateClassViewActionState(String files, ClassViewInfo info);
};

interface ClassViewInfo{
    int getLine();
    int getColumn();
    JsonObject getObject();
    bool isExternal();
};

interface IXPlugin 
{
    String getName();
    void onTextEditorCreated(TextEditorController);
    void onTextEditorClosed(TextEditorController);
    bool initializPlusin(IXStudioController , bool enabled);
    TextEditorPlugin getTextEditorPlugin();
    IProject loadProject(JsonObject content, String lang);
    void onMenuTrigged(String id);
    IProjectPlugin getProjectPlugin();
    bool onExit();
    long getVersion();
    String getDescrition();
    String publisher();
    void uninstall(IXStudioController);
    String getIcon();
    String getSetting();
    void settingFlushed();
    void showDocks(bool restore);
    ActionIdent [] getSolutionContextActions();
    ActionIdent [] getClassViewContextActions();
    void updateSolutionActionState(String files);
    void updateClassViewActionState(String files, ClassViewInfo info);
};

interface UIRunnable
{
    void run();
};

interface IConfigure
{
    bool setOption(String key, String text);
    void save();
    bool isModified();
    void setLibs(String text);
    void setLinks(String text);
    String getLibs();
    String getLinks();
    void setLibsPath(String text);
    bool addLib(String lib, String xpname, String xpver);
    bool addLink(String lib, String xpname, String xpver);
    bool addPathToLibpath(String path);
    bool removeDepend(String xpname);
    String getDependsString();
    void setDependsString(String value);
    bool addDepends(String xpname, String version);
    int getArchId();
    String getLibsPath();
    String getIncsPath();
    void setIncsPath(String text);
    String getOption(String key);
    String getName();
};


static class XPluginShell
{
    public XPluginShell(IXPlugin _p)
    {
        _plugin = _p;
    }
    public IXPlugin _plugin;
    public bool inited = false;
    public bool disable = false;
};

enum DownloadStatus{
    DL_UNKNOW,
    DL_BEGIN,
    DL_INPROCESSING,
    DL_DONE,
    DL_CANCEL,
    DL_FAILED
};

interface DownloadListener{
    void onStatus(DownloadStatus status, int prog, Object tag);
};
    
class PluginsController
{
    public static Map<String, XPluginShell> plugins_list = new Map<String, XPluginShell>();
    public static void initPlugins(IXStudioController ic)
    {
        Map.Iterator<String, XPluginShell> iter = plugins_list.iterator();
        while (iter.hasNext()) {
            XPluginShell splug = iter.getValue();
            if (splug != nilptr && (splug._plugin != nilptr) && (splug.inited == false) && (splug.disable == false)) {
                splug.disable = !ExtensionManager.isEnabled(iter.getKey());
                try{
                    splug._plugin.initializPlusin(ic, !splug.disable);
                    splug.inited = true;
                }catch(Exception e){
                    
                }
            }
            iter.next();
        }
    }

    public static bool exitPlugins()
    {
        Map.Iterator<String, XPluginShell> iter = plugins_list.iterator();
        while (iter.hasNext()) {
            XPluginShell splug = iter.getValue();
            if (splug != nilptr && (splug._plugin != nilptr) && (splug.inited)) {
                if (false == splug._plugin.onExit()){
                    return false;
                }
            }
            iter.next();
        }
        return true;
    }
    
    public static bool showPluginsDocks(bool show)
    {
        Map.Iterator<String, XPluginShell> iter = plugins_list.iterator();
        while (iter.hasNext()) {
            XPluginShell splug = iter.getValue();
            if (splug != nilptr && splug._plugin != nilptr) {
                splug._plugin.showDocks(show);
            }
            iter.next();
        }
        return true;
    }
    
    public static IXPlugin getPlugin(String language)
    {
        Map.Iterator<String, XPluginShell> iter = plugins_list.find(language);
        
        if (iter != nilptr) {
            XPluginShell splug = iter.getValue();
            if (splug != nilptr && splug.disable == false){
                return splug._plugin;
            }
        }
        return nilptr;
    }


    public static bool callProjectPlugin(Project project, int step)
    {
        
        Map.Iterator<String, XPluginShell> iter = plugins_list.iterator();
        while (iter.hasNext()) {
            XPluginShell splug = iter.getValue();
            if (splug != nilptr && splug.disable == false){
                IProjectPlugin pplugin = splug._plugin.getProjectPlugin();
                if (pplugin != nilptr){
                    switch(step){
                        case 0:
                        if (pplugin.onpreCompile(project) == false){
                            return false;
                        }
                        break;
                        case 1:
                        pplugin.onpostCompile(project);
                        break;
                        case 2:
                        if (pplugin.onpreRun(project, false) == false){
                            return false;
                        }
                        break;
                        case 3:
                        pplugin.onpostRun(project, false);
                        break;
                        case 4:
                        if (pplugin.onpreRun(project, true) == false){
                            return false;
                        }
                        break;
                        case 5:
                        pplugin.onpostRun(project, true);
                        break;
                    }
                }
            }
            iter.next();
        }
        return true;
    }
    
    public static IProject openProject(String language, JsonObject content)
    {
        Map.Iterator<String, XPluginShell> iter = plugins_list.find(language);
        if (iter != nilptr) {
            XPluginShell splug = iter.getValue();
            if (splug != nilptr && splug._plugin != nilptr&& (splug.disable == false)) {
                return splug._plugin.loadProject(content, language);
            }
        }
        return nilptr;
    }
        
    public static List<IProjectPlugin> getProjectPluginList(){
        List<IProjectPlugin> list = new List<IProjectPlugin>();
        Map.Iterator<String, XPluginShell> iter = plugins_list.iterator();
        while (iter.hasNext()) {
            XPluginShell splug = iter.getValue();
            if (splug != nilptr && (splug.disable == false)){
                IXPlugin _plugin = splug._plugin;
                if (_plugin != nilptr) {
                    IProjectPlugin pplugin = _plugin.getProjectPlugin();
                    if (pplugin != nilptr){
                        list.add(pplugin);
                    }
                }
            }
            iter.next();
        }
        return list;
    }
    
    public static ActionIdent [] getSolutionContextActions(){
        Vector<ActionIdent > ais = new Vector<ActionIdent >();
        
        Map.Iterator<String, XPluginShell> iter = plugins_list.iterator();
        while (iter.hasNext()) {
            XPluginShell splug = iter.getValue();
            if (splug != nilptr && (splug.disable == false)){
                ActionIdent [] as = splug._plugin.getSolutionContextActions();
                if (as != nilptr){
                    ais.addAll(as);
                }
                IProjectPlugin pplugin = splug._plugin.getProjectPlugin();
                if (pplugin != nilptr){
                    as = pplugin.getSolutionContextActions();
                    if (as != nilptr){
                        ais.addAll(as);
                    }
                }
            }
            iter.next();
        }
        return ais.toArray(new ActionIdent[0]);
    }
    
    public static void updateSolutionActionState(String file){
        Vector<ActionIdent > ais = new Vector<ActionIdent >();
        
        Map.Iterator<String, XPluginShell> iter = plugins_list.iterator();
        while (iter.hasNext()) {
            XPluginShell splug = iter.getValue();
            if (splug != nilptr && (splug.disable == false)){
                splug._plugin.updateSolutionActionState(file);
            }
            iter.next();
        }
    }
    
    public static void updateClassViewActionState(Project project, String file, ClassViewInfo info){
        Vector<ActionIdent > ais = new Vector<ActionIdent >();
        
        Map.Iterator<String, XPluginShell> iter = plugins_list.iterator();
        while (iter.hasNext()) {
            XPluginShell splug = iter.getValue();
            if (splug != nilptr && (splug.disable == false)){
                splug._plugin.updateClassViewActionState(file, info);
            }
            iter.next();
        }
        
        if (project != nilptr){
            IXPlugin ixplugin = project.getProjectPlugin();
            if (ixplugin != nilptr){
                IProjectPlugin ipp = ixplugin.getProjectPlugin();
                if (ipp != nilptr){
                    ipp.updateClassViewActionState(file, info);
                }
            }
        }
    }

    public static ActionIdent [] getClassViewContextActions(){
        Vector<ActionIdent > ais = new Vector<ActionIdent >();
        
        Map.Iterator<String, XPluginShell> iter = plugins_list.iterator();
        while (iter.hasNext()) {
            XPluginShell splug = iter.getValue();
            if (splug != nilptr && (splug.disable == false)){
                ActionIdent [] as = splug._plugin.getClassViewContextActions();
                if (as != nilptr){
                    ais.addAll(as);
                }
                IProjectPlugin pplugin = splug._plugin.getProjectPlugin();
                if (pplugin != nilptr){
                    as = pplugin.getClassViewContextActions();
                    if (as != nilptr){
                        ais.addAll(as);
                    }
                }
            }
            iter.next();
        }
        return ais.toArray(new ActionIdent[0]);
    }
    
    public static String getProjectTargetPath(IProject project){
        String target;
        Map.Iterator<String, XPluginShell> iter = plugins_list.iterator();
        while (iter.hasNext()) {
            XPluginShell splug = iter.getValue();
            if (splug != nilptr && (splug.disable == false)){
                IProjectPlugin pplugin = splug._plugin.getProjectPlugin();
                if (pplugin != nilptr){
                    target = pplugin.getTargetPath(project);
                    if (target != nilptr){
                        break;
                    }
                }
            }
            iter.next();
        }
        return target;
    }
    
    public static bool setPluginDisabled(String plugins, bool disabled)
    {
        try{
            ExtensionManager.setEnabled(plugins, !disabled);
            XPluginShell xps = plugins_list.get(plugins);
            
            if (xps != nilptr){
                xps.disable = disabled;
            }
            return true;
        }catch(Exception e){
            
        }
        return false;
    }
    public static bool uninstallPlugin(String plugins)
    {
        try{
            XPluginShell xps = plugins_list.get(plugins);
            if (xps != nilptr){
                xps._plugin.uninstall(XStudioApp._theApp._xstudio_controller);
            }
            return true;
        }catch(Exception e){
            
        }
        return false;
    }
    
};

class PluginManager
{
    public static void registryPlugins(IXPlugin plugin)
    {
        if (plugin != nilptr) {
            PluginsController.plugins_list.put(plugin.getName(), new XPluginShell(plugin));
        }
    }
    public static void unregistryPlugins(String name)
    {
        if (name != nilptr) {
            try{
                PluginsController.plugins_list.remove(name);
            }catch(Exception e){
                
            }
        }
    }
};