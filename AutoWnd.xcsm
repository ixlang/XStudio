//xlang Source, Name:AutoWnd.xcsm 
//Date: Tue Sep 17:08:56 2018 

class AutoWnd : ListDockWidget{
	public static AutoWnd auto_wnd;
    Vector<JsonObject> queriedObjects = new Vector<JsonObject>();
    public DebugValueParser __dvp = new DebugValueParser("auto");
    
	public void onListItemClicked(QTreeWidget tree,long item, int column)override{
		
    }
    
	public void onListItemDoubleClicked(@NotNilptr QTreeWidget tree,long item, int column)override{
        long objectId = 0;
        
        if (column == 2){
			objectId = tree.getItemTag(item, 2);
        }
        
        String caption = tree.getItemText(item, 0);
        String sztype = tree.getItemText(item, 1);
        
        if (objectId != 0 && (sztype.equals("String") || sztype.equals("JsonObject") || sztype.equals("JsonArray"))){
			XWorkspace.workspace.debuggee.queryObject("detail:" + caption , "" + objectId, __dvp.getIdentifier(), 0, 0, nilptr);
        }else{
			String text = tree.getItemText(item, column);
            if (text.length() > 0){
				TextDetail td = new TextDetail();
				td.create(caption, text.replace(" ↩ ", "\n")
							.replace(" ↵ ", "\r")
							.replace(" ⇥ ", "\t")
                            .replace(" ⇤ ", "\b"), nilptr, false);
            }
        }
	}
    
    public void onListItemExpanded(@NotNilptr QTreeWidget tree,long item)override{
        __dvp.expandItem(tree, item, nilptr);
	}
    
    public void onQueryObject(JsonObject object){
        runOnUi(new Runnable(){
            void run(){
                __dvp.sendCommand(new Object[]{DebugValueParser.COMMAND.CMD_LOADOBJECT, getList(), object});
            }
        });
    }
    
    public String getListName()override{ return "autolist"; }
    
    public String [] getColumn()override{
 
		String [] columns = {"名称", "类型", "值", "ID"};
        return columns;
    }
    
    public int [] getColumnWidths()override{ 
		int [] ws = {150, 150, 200, 100};
        return ws;
    }
    
    public void onCreate(){
		auto_wnd = this;
    }
    
    public static void setFrameInfo(long tid, JsonObject json){
        auto_wnd.updateFrameInfo(tid, json);
    }
    
    void updateFrameInfo(long tid, JsonObject json){
        runOnUi(new Runnable(){
            void run(){
                __dvp.sendCommand(new Object[]{DebugValueParser.COMMAND.CMD_PARSEFRAME, getList(), tid, json});
            }
        });
    }
    
        
    public void __clear(){
        __dvp.sendCommand(new Object[]{DebugValueParser.COMMAND.CMD_CLEAR, getList()});
    }
        
    public static void clear(){
		synchronized(auto_wnd){
            auto_wnd.__clear();
		}
    }
};