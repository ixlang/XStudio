//xlang Source, Name:DownloadManager.xcsm 
//Date: Thu Dec 00:33:00 2019 

class DownloadManager : QDialog{
    QTreeWidget listtask;
    QPushButton btncancel, btnclose;
    QLabel lblstat;
    public static DownloadManager _dlmgrwin;
 
    
    public class ItemTask{
        public ItemTask(String k, String u, int p){
            name = k;
            url = u;
            progress = p;
        }
        
        public long item;
        public String name;
        public String url;
        public int progress;
        public bool deleted = false;
        
        public void update(int p){
            progress = p;
            deleted = false;
        }
    };
    
    Map<String, ItemTask> _tasklist = new Map<String, ItemTask>();
    
    public void onAttach() override {
        listtask = (QTreeWidget)attachByName(new QTreeWidget(), "listtask");
        btncancel = (QPushButton)attachByName(new QPushButton(), "btncancel");
        btnclose = (QPushButton)attachByName(new QPushButton(), "btnclose");
        lblstat = (QLabel)attachByName(new QLabel(), "lblstat");
        
        String [] columns = {"任务", "地址", "进度"};
        
        listtask.setColumns(columns);
        
        listtask.setColumnWidth(0, 150);
        listtask.setColumnWidth(1, 500);
        listtask.setColumnWidth(2, 50);
        
        btncancel.setOnClickListener(
        new onClickListener() {
            void onClick(QObject obj, bool checked)override {
                long item = listtask.getSelItem();
                if (item != 0){
                    String text = listtask.getItemText(item,0);
                    DownloadCenter.cancelDownloadTask(text);
                }
            }
        });
        
        btnclose.setOnClickListener(
        new onClickListener() {
            void onClick(QObject obj, bool checked)override {
                close();
            }
        });
        
        listtask.setOnTreeViewItemEvent( new onTreeViewItemEvent(){
			void onItemClicked(@NotNilptr QTreeWidget tree,long item, int column){
				if (column == 1){
					String txt = tree.getItemText(item, column);
                    if (txt.upper().startsWith("HTTP")){
						if (QMessageBox.Question("提示","是否在浏览器中打开: <b>" + txt + "</b> ?",QMessageBox.Ok | QMessageBox.No,QMessageBox.Ok) == QMessageBox.Ok){
							openUrl(txt);
                        }
                    }
                }
			}
        });
        
        setModal(true);
        show();
        _dlmgrwin = this;
    }
    
    
    public void setAllDelete(){
        Map.Iterator<String, ItemTask> iter = _tasklist.iterator();
        while (iter.hasNext()){
            ItemTask it = iter.getValue();
            if (it != nilptr){it.deleted = true;}
            iter.next();
        }
    }
    
    public bool onClose()override{
        _dlmgrwin = nilptr;
        return true;
    }
    
    public void loadTask(){
        setAllDelete();
        List<String> keys = DownloadCenter.getKeys();
        List.Iterator<String>  iter = keys.iterator();
        while (iter.hasNext()){
            String name = iter.next();
            DownloadCenter.Downloader dl = DownloadCenter.getTask(name);
            if (dl != nilptr){
                Map.Iterator<String, ItemTask> taskiter = _tasklist.find(name);
                if (taskiter == nilptr){
                    _tasklist.put(name, new ItemTask(name, dl.url, dl.progress));
                }else{
                    ItemTask it = taskiter.getValue();
                    if (it != nilptr){
                        it.update(dl.progress);
                    }
                }
            }
        }
        updateListView();
    }
    
    
    
    public void updateListView(){
        Map.Iterator<String, ItemTask> iter = _tasklist.iterator();
        try{
            while (iter.hasNext()){
                ItemTask it = iter.getValue();
                iter.next();
                if (it != nilptr){
                    if (it.deleted){
                        listtask.removeItem(it.item);
                        _tasklist.remove(it.name);
                    }else{
                        if (it.item == 0){
                            it.item = listtask.addItem("res/toolbar/task.png",it.name);
                        }
                        listtask.setItemText(it.item,1,it.url);
                        listtask.setItemText(it.item,2,"" + it.progress + "%");
                    }
                }
            }
        }catch(Exception e){
            
        }
        
    }
    
    public static void updateProgress(){
        if (_dlmgrwin != nilptr){
            _dlmgrwin.loadTask();
        }
    }
};