//xlang Source, Name:Utils.xcsm 
//Date: Thu Nov 09:02:46 2018 


class XKernel32 : Library {

    static bool loaded = false;

    public static bool load() {
        if (loaded == false) {
            try {
                loadLibrary("kernel32.dll");
                loaded = true;
            } catch(Exception e) {

            }
        }
        return loaded;
    }

    public static String getWindowsDir() {
        if (load()) {
            byte [] dir = new byte[320];
            int pathlen = GetWindowsDirectoryA(dir, 320);
            return new String(dir, 0, pathlen);
        }
        return nilptr;
    }

    import{
        int stdcall GetWindowsDirectoryA(
            ObjectPtr lpBuffer,
            int  uSize
        );
    };
};


class XEnvironment{
    public @NotNilptr  static String MapVariable(Project object, Configure configure,@NotNilptr  String text) {
        String str_original;
        int loop = 0;
        do{
            str_original = text;
            if (object != nilptr){
                ProjectPropInterface ppi = object.getPropInterface();
                if (ppi != nilptr && configure != nilptr){
                    text = ppi.map_variable(object, configure, text);
                }
                text = object.getVariables().map_variable(text);
            }else{
                text = Variables.MapVariable(text);
            }
            loop++;
            if (loop > 20){
                XWndOutput.Output("字符串中环境变量引用过于复杂:" + text,0);
                break;
            }
        }while (str_original.equals(text) == false);
        
        return text;
    }
};

class Utils{    
    public static void readForProcess(@NotNilptr IBuilder builder,@NotNilptr Process _process){
        int rd = 0;
        byte [] buffer = new byte[1024];
        int pos = 0;
            
		try{

			while ((rd = _process.read(buffer, pos, buffer.length - pos)) > 0){
				try{
					pos += rd;
					String oustr = "";
					if (_system_.getPlatformId() == 0){
						oustr = new String(buffer, 0, pos, "CP936");
					}else{
						oustr = new String(buffer, 0, pos);
					}
					pos = 0;
					builder.OutputText(oustr, 0);
				}catch(Exception e){
					byte [] newbuf = new byte[buffer.length + 1024];
					_system_.arrayCopy(buffer, 0, newbuf, 0, pos);
					buffer = newbuf;
				}
			}
		}catch(Exception e){
		
		}   
        
        if (pos != 0){
            if (_system_.getPlatformId() == 0){
                try{
                   builder.OutputText(new String(buffer, 0, pos, "CP936"), 0);
                }catch(Exception e){
                   builder.OutputText(new String(buffer, 0, pos), 0);
                }
            }else{
                builder.OutputText(new String(buffer, 0, pos), 0);
            }
        }
    }
    public static String getWindowsDir(){
        return XKernel32.getWindowsDir();
    }
    public static void chechUpdate(int opid){
		String fburl = String.format("http://112.124.120.113:8080/dcbinterface/api/checkupdate?osid=%d&version=%d&opid=%d&arch=%d", _system_.getPlatformId(), _system_.getAppVersion() , opid, _system_.getOSBit());
		 
		new Thread(){
			void run()override{
				HttpRequest req = new HttpRequest();
				if (req.get(fburl, 10000, false)){
					byte [] data = new byte[1024];
					String content = "";

					if (req.getResponseCode() >= 200){
						while (req.available(true) > 0){
							int len = req.readData(data, 0, 1024);
							String _txt = new String(data, 0, len);
							content = content + _txt;
						}
						parseUpdate(content);
					}
                }
			}
		}.start();
    }
    
    public static void parseUpdate(String text){
		try{
			JsonObject root = new JsonObject(text);
            String err = root.getString("error");
            if (err != nilptr){
				if (err.equals("0")){
					JsonArray data = (JsonArray)root.get("data");
                    if (data != nilptr && data.length() > 0){
						JsonObject verObj = (JsonObject)data.get(0);
                        if (verObj != nilptr ){
							String newverstr = verObj.getString("version");
                            if (newverstr != nilptr ){
								if (newverstr.parseLong() > _system_.getAppVersion()){
									XWorkspace.workspace.runOnUi(new Runnable(){
										void run(){
                                            String dlsize = verObj.getString("size");
                                            long nsize = (dlsize != nilptr) ? dlsize.parseLong() : 0;
											showNewVersion(verObj.getString("version"), verObj.getString("url"), verObj.getString("detailurl"), verObj.getString("descr"), nsize);
                                        }
                                    });
                                }
                            }
                        }
                    }
                }
            }
		}catch(Exception e){
        
        }
    }
    
    public static void showError(String errinfo){
		XWorkspace.workspace.runOnUi(new Runnable(){
			void run(){
				QMessageBox.Critical("错误", errinfo, QMessageBox.Ok , QMessageBox.Ok);
			}
		});
    }
    
    public static void showNewVersion(String version,String url,  String detailUrl,  String descr, long packsize){
    
        if (version != nilptr && url != nilptr && detailUrl != nilptr && descr != nilptr){
            if (packsize > 0){
                int res = QMessageBox.Question("新版本" + version, 
                    "<Strong>可用于 XStudio 的更新版本" + version + " 已发布</Strong><br /><br />" + 
                    descr + "<br />" + 
                     "<a href=\"" + detailUrl + "\">详情点击</a><br />" + 
                    "<a href=\"" + url + "\">手动下载更新</a><br />" + 
                    "是否立即进行自动更新?", QMessageBox.Yes | QMessageBox.No, QMessageBox.Yes);
                    
                if (res == QMessageBox.Yes){
                    update(version, url, packsize);
                }
            }
        }
	}    
    
    
    public static void update(@NotNilptr String ver,@NotNilptr  String url, long size){
		String appdir = _system_.getAppDirectory().appendPath("update");
        
        _system_.mkdir(appdir);
        appdir = appdir.appendPath(ver + ".zip");
        ProgressView pv = ProgressView.showWait(-1);
        
        if (pv == nilptr){
            return ;
        }
        pv.centerScreen();
        pv.setTitleText("正在下载...");
        
        try{
			if (XPlatform.existsSystemFile(appdir) && XPlatform.SystemFileSize(appdir) == size){
            
            	new Thread(){
					void run()override{
						applyUpdate(appdir, url, ver);
                    }
                }.start();
                
                pv.setTitleText("准备安装更新...");
                pv.dismissAfter(1000);
            }else{
				FileOutputStream fos = new FileOutputStream(appdir);
				
				new Thread(){
					void run()override{
						HttpRequest req = new HttpRequest();
                        _system_.output("download url:" + url + "\n");
						if (req.get(url, 100000, false)){
							byte [] data = new byte[1024];

							long downloadSize = 0;
							pv.EnableProgress(true, 0);
							if (req.getResponseCode() >= 200){
								while (req.available(true) > 0){
									int len = req.readData(data, 0, 1024);
									downloadSize += len;
									double fp = Math.min(1.f, (double)downloadSize / (double)size);
									pv.EnableProgress(true, fp);
									pv.setTitleText("正在下载..." + String.format("%.1f%%", fp * 100));
									fos.write(data, 0 ,len);
								}
								fos.close();
								
								if (size == downloadSize){
									applyUpdate(appdir, url, ver);
								}else{
									_system_.deleteFile(appdir);
									showError("下载更新失败, 数据校验错误, 请尝试<a href=\"" + url + "\">手动下载</a>.");
									pv.showResult(true, false);
									pv.dismissAfter(1000);
									return ;
								}
							}
						}
						
						pv.setTitleText("准备安装更新...");
						pv.dismissAfter(1000);
					}
				}.start();
            }
        }catch(Exception e){
			pv.showResult(true, false);
            pv.dismissAfter(1000);
			_system_.deleteFile(appdir);
            
			showError("下载更新失败,无法打开文件 " +appdir + "请尝试<a href=\"" + url + "\">手动下载</a>.");
        }
    }
    
    public static void applyUpdate(@NotNilptr String zipFile, String url, String version){
    
		FileInputStream fis ;
    
		try{
			fis = new FileInputStream(zipFile);
		}catch(Exception e){
			_system_.deleteFile(zipFile);
			showError("下载更新失败,无法打开文件" + zipFile + "请尝试<a href=\"" + url + "\">手动下载</a>.");
			return ;
		}
		
		ZipArchive zs = new ZipArchive();
        
        bool applyer_setupd = false;

		if (zs.open(fis)){
			int c = zs.getEntriesCount();
			 for (int i = 0; i < c; i ++){
				ZipEntry entry = zs.getEntry(i);
				if (entry != nilptr &&  entry.isDirectory() == false){                                        
                    String apply_exe;
                    
					if (entry.getName().startsWith("xupgrade_apply")){

                        apply_exe = _system_.getAppDirectory().appendPath(entry.getName());

						ZipFile file = entry.getFile();
                        
                        byte []buf = new byte[1024];
                        
                        if (file.open()){                            
                            try{
								FileOutputStream fos = new FileOutputStream(apply_exe);
								int rd = 0;
                                
								while ((rd = file.read(buf, 0, 1024)) != 0){
									fos.write(buf, 0, rd);
								}
                                
								fos.close();
                                
								XPlatform.chmodSystemFile(apply_exe, 0777);
                                applyer_setupd = true;
                            }catch(Exception e){
                            
                            }
                            file.close();
                        }
                    }
                }
             }
             
             zs.close();
        }
        
        fis.close();
        
		 if (applyer_setupd){
			//启动安装器
            String ext ="";
            if (_system_.getPlatformId() == 0){
				ext = ".exe";
            }
			runUpdate(_system_.getAppDirectory().appendPath("xupgrade_apply" + ext), zipFile, version);
		 }else{
			_system_.deleteFile(zipFile);
			showError("下载更新失败,请尝试<a href=\"" + url + "\">手动下载</a>.");
			return ;
		}
    }
    
    public static void runUpdate(String updater, String updatefile, String version){
        String []args = new String[2];
        args[0] = updater;
		args[1] = version;
        
		Process designer = new Process(updater, args);
        try{
			if (designer.create(Process.Visible) == false){
				showError("无法应用更新,请尝试手动解压 " + updatefile + ", 覆盖旧版本文件");
			}
        }catch(Exception e){
			showError("无法应用更新:" + e.getMessage() + ",请尝试手动解压 " + updatefile + ", 覆盖旧版本文件");
        }
    }
    
    
    public static String getAppVersion(){
		long vv = _system_.getAppVersion();
		String vs = "v";
		for (int i = 0; i < 4; i ++){
			vs = vs + ((vv >> ((4 - (i + 1)) << 4)) & 0xffff);
			if (i != 3){
				vs = vs + ".";
			}
		}    
        return vs;
    }
    
    public static String convertVersion(long vv){
		String vs = "v";
		for (int i = 0; i < 4; i ++){
			vs = vs + ((vv >> ((4 - (i + 1)) << 4)) & 0xffff);
			if (i != 3){
				vs = vs + ".";
			}
		}    
        return vs;
    }
    
    public static String getVersion(){
		long vv = _system_.getAppVersion();
		String vs = "v";
		for (int i = 0; i < 3; i ++){
			vs = vs + ((vv >> ((4 - (i + 1)) << 4)) & 0xffff);
			if (i != 3){
				vs = vs + ".";
			}
		}    
        return vs;
    }
    
    // 主版本
    public static String getAppMajorVersion(){
		long vv = _system_.getAppVersion();
		String vs = "v";
		for (int i = 0; i < 2; i ++){
			vs = vs + ((vv >> ((4 - (i + 1)) << 4)) & 0xffff);
			if (i != 1){
				vs = vs + ".";
			}
		}    
        return vs;
    }
    
    //次要版本
    public static int getAppMinorVersion(){
		long vv = _system_.getAppVersion();
        return ((vv >> 16) & 0xffff);
    }
    
    //build版本
    public static int getAppBuildVersion(){
		return _system_.getAppVersion() & 0xffff;
    }
    
    public static long getVersionValue(String version){
        if (version == nilptr){
            return 0;
        }
		String [] bs = version.split('.');
        
        long ov = 0;
        
		for (int i = 0; i < 4; i ++){
			if (i < bs.length){
				ov <<= 16;
				ov |= bs[bs.length - (i + 1)].parseInt();
			}
		}
        
        return ov;
    }
};