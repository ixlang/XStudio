
class XWndSln : QDockWidget
{
    QTreeWidget _treesln;
    public XWorkspace workspace;
    public static XWndSln _slnView;
    ContextMenu _contextMenu = new ContextMenu();
    QLineEdit editSearch;
    ProjectSource current_ps;
    Project currentProject;
    Map<long, ProjectSource> sourceItem = new Map<long, ProjectSource>();

    public static class ProjectSource
    {
        Project project;
        int sourceID;
        public long item;
        public String sourceName;

        public ProjectSource(@NotNilptr Project proj, long _item, int sid)
        {
            item = _item;
            project = proj;
            sourceID = sid;
            sourceName = proj.getSourceItem(sid);
        }
        public String getSourcePath()
        {
            return project.getSourcePath(sourceID);
        }
        public void remove()
        {
            project.removeSource(sourceID);
        }
        public String rename(@NotNilptr String newname)
        {
            return project.rename(sourceID, newname);
        }
    };

    public void enableFileOp(bool b){
        int [] indexs = {2, 3, 4, 11};
        _contextMenu.enableAction(indexs, b);
    }

    public void enableDesigner(bool b){
        int [] indexs = {12};
        _contextMenu.enableAction(indexs, b);
    }

    public void enableProjOp(bool b){
        int [] indexs = {0, 6, 7, 9, 10};
        _contextMenu.enableAction(indexs, b);
    }
    
    public onEventListener menuListener = new onEventListener()
    {
        void onTrigger(QObject obj) override {

            if (obj == XWndSln.this._contextMenu.actions[0]) {
                workspace.build(nilptr);
                return ;
            }
            if (obj == XWndSln.this._contextMenu.actions[10]) {
                workspace.showProperites(nilptr);
                return ;
            }
            if (obj == XWndSln.this._contextMenu.actions[6]) {
                workspace.createProject();
                return ;
            }
            if (obj == XWndSln.this._contextMenu.actions[7]) {
                workspace.addObject(0);
                return ;
            }

            if (obj == XWndSln.this._contextMenu.actions[11]) {
                if (current_ps != nilptr) {
                    String file = current_ps.getSourcePath();
                    if (file != nilptr){
                        QCore.openLocal(String.formatPath(file.findVolumePath(), false));
                    }
                }
                return ;
            }
            if (obj == XWndSln.this._contextMenu.actions[12]) {
                if (current_ps != nilptr) {
                    String file = current_ps.getSourcePath();
                    if (file != nilptr){
                        String ext = file.findExtension();
                        if (ext.upper().equals(".UI")) {
                            openWithDesigner(file);
                        }
                    }
                }
                return ;
            }
            if (obj == XWndSln.this._contextMenu.actions[9]) {
                workspace.debugRun();
                return ;
            }
            if (obj == XWndSln.this._contextMenu.actions[2]) {

                if (current_ps != nilptr) {
                    if (QMessageBox.Yes == QMessageBox.Question("注意", "确定仅将项 " + current_ps.getSourcePath() + " 从项目中移除而<strong style=\"color:#0000ff\">不删除硬盘上的文件</strong>吗?.", QMessageBox.Yes | QMessageBox.No, QMessageBox.No)) {
                        if (false == workspace.closeFor(current_ps.getSourcePath())) {
                            workspace.closeFor(current_ps.getSourcePath());
                        }
                        current_ps.remove();
                        reload();
                    }
                }
                return ;
            }
            if (obj == XWndSln.this._contextMenu.actions[3]) {

                if (current_ps != nilptr) {
                    if (QMessageBox.Yes == QMessageBox.Question("注意", "确定将项 " + current_ps.getSourcePath() + " 从项目中移除并<strong style=\"color:#ff0000\">删除硬盘上的文件</strong>吗?<br /><br /><b>注意:此操作不可撤销!</b>", QMessageBox.Yes | QMessageBox.No, QMessageBox.No)) {
                        if (false == workspace.closeFor(current_ps.getSourcePath())) {
                            workspace.closeFor(current_ps.getSourcePath());
                        }
                        bool fileDeleted = false;
                        String file = current_ps.getSourcePath();
                        if (file != nilptr && XPlatform.existsSystemFile(file)) {
                            fileDeleted = XPlatform.deleteFile(file);
                        }
                        if (fileDeleted == false) {
                            QMessageBox.Question("注意", "无法从硬盘上删除文件: " + current_ps.getSourcePath() + " 文件已不存在或者正被占用.", QMessageBox.Yes,QMessageBox.Yes);
                        }
                        current_ps.remove();
                        reload();
                    }
                }
                return ;
            }
            if (obj == XWndSln.this._contextMenu.actions[4]) {
                if (current_ps != nilptr) {
                    renameItem(current_ps);
                }
                return ;
            }
        }
    };

    public onTreeViewItemEvent listlistener = new onTreeViewItemEvent()
    {
        void onItemClicked(QTreeWidget tree,long item, int column)override {
            try {
                ProjectSource ps = sourceItem.get(item);
                if (ps != nilptr) {
                    String source = ps.getSourcePath();
                    if (source != nilptr){
                        if (XPlatform.existsSystemFile(source) == false) {
                            QMessageBox.Critical("文件不存在", "找不到文件:" + ps.getSourcePath() + "该位置的文件已不存在.", QMessageBox.Ok, QMessageBox.Ok);
                        } else {
                            workspace.openTextFile(source);
                        }
                    }
                }
            } catch(Exception e) {

            }
        }
        void onItemPressed(QTreeWidget, long item, int column)override {
            try {
                ProjectSource ps = sourceItem.get(item);

                current_ps = ps;
            } catch(Exception e) {
                current_ps = nilptr;
            }

            
            
            enableFileOp(current_ps != nilptr);
            enableProjOp(workspace.isCurrentProjectEmpty() == false);

            bool designer_enable = false;

            if (current_ps != nilptr) {
                String file = current_ps.getSourcePath();
                PluginsController.updateSolutionActionState(file);
                if (file != nilptr){
                    String ext = file.findExtension();
                    if (ext.upper().equals(".UI")) {
                        designer_enable = true;
                    }
                }
            }else{
                PluginsController.updateSolutionActionState(nilptr);
            }

            enableDesigner(designer_enable);
        }
    };

    public String quotePath(@NotNilptr String arg)
    {
        if (_system_.getPlatformId() == 0) {
            if (arg.indexOf(' ') != -1) {
                return "\"" + arg + "\"";
            }
        }
        return arg;
    }

    Vector<long> errlist = new Vector<long>();
    
    public void updateDocumentsStatus(){
        resetDocumentsStatus();
        
        Map<long,int> parents = new Map<long,int>();
        Map<String,int> filelist = XWndInfor.GetInfoDocuments(ICompileInfo.ERROR);
        for (Map.Iterator<long, ProjectSource> iter = sourceItem.iterator(); iter.hasNext(); iter.next()){
            if (filelist.containsKey(iter.getValue().getSourcePath())){
                long pitem = iter.getKey();
                _treesln.setItemIcon(pitem,0,"res/toolbar/source_err.png");
                errlist.add(iter.getKey());
                
                while ((pitem = _treesln.getParentItem(pitem)) != 0){
                    parents.put(pitem,1);
                }
            }
        }
        Project _pro = currentProject;
        for (Map.Iterator<long,int> iter = parents.iterator(); iter.hasNext(); iter.next()){
            long item = iter.getKey();
            if (item == _pro.viewItem){
                _treesln.setItemIcon(item,0,"res/toolbar/project_err.png");
            }else{
                _treesln.setItemIcon(item,0,"res/toolbar/sources_err.png");
            }
        }
        parents.clear();
    }
    
    public void resetDocumentsStatus(){
        Map<long,int> parents = new Map<long,int>();
        Project _pro = currentProject;
        for (int i = 0 ; i < errlist.size(); i++){
            long item = errlist[i];
            
            _treesln.setItemIcon(item,0,"res/toolbar/source.png");
            
            while ((item = _treesln.getParentItem(item)) != 0){
                parents.put(item,1);
            }
        }
        
        for (Map.Iterator<long,int> iter = parents.iterator(); iter.hasNext(); iter.next()){
            long item = iter.getKey();
            if (item == _pro.viewItem){
                _treesln.setItemIcon(item,0,"res/toolbar/project.png");
            }else{
                _treesln.setItemIcon(item,0,"res/toolbar/sources.png");
            }
        }
        errlist.clear();
        parents.clear();
    }
    
    public String generateArgs (@NotNilptr String arg)
    {
        if (_system_.getPlatformId() == 0) {
            try {
                arg = new String(arg.getBytes("GB18030//IGNORE"));
            } catch(Exception e) {

            }
        }
        return quotePath(arg);
    }

    public void openWithDesigner(@NotNilptr String path)
    {
        String degpath = String.formatPath(_system_.getAppPath().findVolumePath().appendPath("designer/designer"), false);
        if (_system_.getPlatformId() == 0) {
            degpath = degpath + ".exe";
        }
        String []args = new String[2];
        args[0] = quotePath(degpath);
        args[1] = generateArgs(path);
        Process designer = new Process(degpath, args);

        try {
            designer.create(Process.Visible);
        } catch(Exception e) {
            QMessageBox.Critical("Error", e.getMessage(), QMessageBox.Ok, QMessageBox.Ok);
        }
    }

    public void renameItem(@NotNilptr ProjectSource ps)
    {
        InputDialog.requestInput(new InputDialog.onInputListener() {
            String oldname = ps.getSourcePath();
            bool onInputOk(@NotNilptr String text)override {
                if (text.length() == 0) {
                    QMessageBox.Critical("错误", "输入了不正确的文件名", QMessageBox.Ok, QMessageBox.Ok);
                    return false;
                }
                String newname = oldname.findVolumePath().appendPath(text);
                newname = ps.rename(String.formatPath(newname, false));
                if (newname == nilptr) {
                    QMessageBox.Critical("错误", "重命名失败,文件可能正被其他程序使用.", QMessageBox.Ok, QMessageBox.Ok);
                    return true;
                }
                //_treesln.setItemText(ps.item, 0, newname);
                reload();
                return true;
            }
            bool onInputCancel()override {
                return true;
            }
            String getTitle()override {
                return "重命名文件";
            }
            String getTips()override {
                return "输入新文件名:";
            }
            String getDefault()override {
                return oldname.findFilenameAndExtension();
            }
        });
    }
    public void onAttach()
    {
        editSearch =  (QLineEdit)attachByName(new QLineEdit(), "editSearch");
        _treesln = (QTreeWidget)attachByName(new QTreeWidget(), "tree_sln");
        /*
        改成layout之后就不需要resize了
        setOnLayoutEventListener(new onLayoutEventListener(){
                void onResize(QObject obj, int w, int h, int oldw, int oldh)override {
                    if (_treesln != nilptr){
                        editSearch.move(3, 1);
                        editSearch.resize(w - 6, 20);
                        _treesln.move(0, 25);
                        _treesln.resize(w, h - 50);
                    }
                }
        });
        */
        _treesln.setOnTreeViewItemEvent(listlistener);
        _slnView = this;

        editSearch.setOnKeyEventListener(new onKeyEventListener() {
            bool onKeyPress(QObject obj,int key,bool repeat,int count,String text,int scanCode,int virtualKey,int modifier)override {
                if (key == Constant.Key_Escape) {
                    editSearch.setText("");
                }
                return true;
            }
        });

        editSearch.setOnEditEventListener(new onEditEventListener() {
            void onTextChanged(QObject,@NotNilptr  String text)override {
                updateFilter(text);
            }
        });

    }
    
    public void updateFilter(String text){
        String key = text.upper();
        Map.Iterator<long, ProjectSource> iter = sourceItem.iterator();
        while (iter.hasNext()) {
            ProjectSource ps = iter.getValue();
            if (ps != nilptr && ps.item != 0) {
                try {
                    if (Pattern.test(ps.sourceName.upper(), key, 0, false)) {
                        _treesln.setItemVisible(ps.item, true);
                    } else {
                        _treesln.setItemVisible(ps.item, false);
                    }
                } catch(Exception e) {
                    //表达式错误
                }
            }
            iter.next();
        }
    }

    public void createContextMenu()
    {
        ActionIdent [] ais = PluginsController.getSolutionContextActions();
        
        String []acts = {"构建项目\tF7", "-", "移除文件(&R)", "删除文件(&D)","重命名(&R)","-", "添加新项", "添加已有项","-","运行\tF5", "项目属性(&P)", "打开所在目录(&F)", "UI设计器中打开(&U)"};
        __nilptr_safe(_treesln);
        _contextMenu.create(_treesln, acts, menuListener, ais);
        
    }

    public long addItem(long item, String icon, String name)
    {
        name = String.formatPath(name,false);

        name = name.replace("\\","/");
        if (name.startWith("./")) {
            name = name.substring(2,name.length());
        }
        String [] namesp = name.split('/');

        long myitem = item;
        for (int i =0; i < namesp.length; i++) {
            if (i + 1 == namesp.length) {
                myitem = addItemex(myitem, icon, namesp[i]);
            } else {
                myitem = addItemex(myitem, "res/toolbar/sources.png", namesp[i]);
            }
        }
        return myitem;
    }

    public long addItemex(long item, String icon, String name)
    {
        long [] items;
        if (item == 0) {
            items = _treesln.getTopItems();
        } else {
            items = _treesln.getItemChildren(item);
        }

        if (items != nilptr) {
            for (int i =0 ; i < items.length; i++) {
                String lab = _treesln.getItemText(items[i], 0);
                if (lab.equals(name)) {
                    return items[i];
                }
            }
        }

        if (item != 0) {
            return _treesln.insertItem(item, icon, name);
        }
        return _treesln.addItem(icon, name);
    }

    public void loadProject(@NotNilptr Project project)
    {
        String name = project.getName();
        project.viewItem = _treesln.addItem("res/toolbar/project.png", name);
        project.sourcesRoot = _treesln.insertItem(project.viewItem, "res/toolbar/sources.png", "源文件");

        JsonArray sources = project.getSources();
        if (sources != nilptr){
            for (int i = 0, c = sources.length(); i < c; i++) {
                String pathfile = sources.getString(i);
                
                if (pathfile != nilptr){
                    if (pathfile.startWith("./") || pathfile.startWith(".\\")) {
                        pathfile = pathfile.substring(2,pathfile.length());
                    }

                    String iconFile = "res/toolbar/source.png";
                    long item = addItem(project.sourcesRoot, iconFile, pathfile);
                    sourceItem.put(item, new ProjectSource(project,item, i));
                }
            }
        }
        _treesln.setExpand(project.viewItem, true);
        _treesln.setExpand(project.sourcesRoot, true);
        currentProject = project;
    }

    public void clear()
    {
        current_ps = nilptr;
        errlist.clear();
        _treesln.clear();
        sourceItem.clear();
    }

    public void reload()
    {
        Project _pro = currentProject;
        currentProject = nilptr;
        clear();
        if (_pro != nilptr) {
            loadProject(_pro);
            updateFilter(editSearch.getText());
        }
    }
    public void updateAppendSource(@NotNilptr Project project, int size)
    {
        if (project.sourcesRoot != 0) {
            JsonArray sources = project.getSources();
            if (sources != nilptr){
                for (int i = 0; i < size; i ++) {
                    int id = sources.length() - (i + 1);
                    long item = addItem(project.sourcesRoot, "res/toolbar/source.png", sources.getString(id));
                    sourceItem.put(item, new ProjectSource(project,item, id));
                }
            }
        }
    }
};