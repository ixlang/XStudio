//xlang Source, Name:BreakPointWnd.xcsm 
//Date: Tue Sep 17:10:41 2018 

class BreakPointWnd : ListDockWidget{
	public static BreakPointWnd bpWnd;
	public static class BreakPointRequest{
		public String file;
        public int reqline;
        public int realine;
        public bool set;
        public int error;
        public BreakPointRequest(String f, int ql, int rl, bool s, int e){
			file = f;
            reqline = ql;
            realine = rl;
            set = s;
            error = e;
        }
    };
    
    
    ContextMenu _contextMenu = new ContextMenu();
    
    public static Vector<BreakPointRequest> requestlist = new Vector<BreakPointRequest>();
    
	public static Map<String,Map<int,BreakPointRequest>> breakPoints = new Map<String,Map<int,BreakPointRequest>>();
    
    public static void toggleBreakPoint(@NotNilptr XSourceEditor editor, String file, int line, bool add){
		bpWnd.toggleBreakPoint(editor, new BreakPointRequest(file, line, line, add, 0));
    }
     
    public void toggleBreakPoint(@NotNilptr XSourceEditor editor,@NotNilptr  BreakPointRequest brp){
		Map<int,BreakPointRequest> lineMap = nilptr;
        
        try{
			lineMap = breakPoints.get(brp.file);
        }catch(Exception e){
        
        }
        
        if (brp.set){
			if (lineMap != nilptr){
				lineMap.put(brp.reqline, brp);
			}else{
				lineMap = new Map<int,BreakPointRequest>();
				lineMap.put(brp.reqline, brp);
				breakPoints.put(brp.file, lineMap);
			}
		}else{
			if (lineMap != nilptr){
				lineMap.remove(brp.reqline);
			}
        }
        
        if (XWorkspace.workspace.debuggee.isDebuging()){
			XWorkspace.workspace.debuggee.toggleBreakpoint(brp.file, brp.reqline, brp.set);
        }else{
			editor.toggleBreakPoint(brp.reqline, brp.set);
            refreshBreakPoints();
        }
    }

	public static void SendBreakPoint(){
		bpWnd.sendBreakPoint();
    }
    
	public void sendBreakPoint(){
		Map.Iterator<String,Map<int,BreakPointRequest>> iter = breakPoints.iterator();
		while (iter.hasNext()){
            Map<int,BreakPointRequest> brp = iter.getValue();
            if (brp != nilptr){
                applyBreakpoint(brp);
            }
			iter.next();
		}
    }
    
    public void applyBreakpoint(@NotNilptr Map<int,BreakPointRequest> itemmap){
        Map.Iterator<int,BreakPointRequest> iter = itemmap.iterator();
        while (iter.hasNext()){
            BreakPointRequest bpr = iter.getValue();
            if (bpr != nilptr){
                XWorkspace.workspace.debuggee.toggleBreakpoint(bpr.file, bpr.reqline, bpr.set);
            }
            iter.next();
        }
    }
    
    public void refreshBreakPoints(){
		QTreeWidget list = getList();
        
        list.clear();
        
		Map.Iterator<String,Map<int,BreakPointRequest>> iter =  breakPoints.iterator();
        
        while (iter.hasNext()){
			Map<int,BreakPointRequest> mbp = iter.getValue();
            addToList(list, iter.getKey(), mbp);
            iter.next();
        }
    }
    
    public void addToList(@NotNilptr QTreeWidget list , String file,@NotNilptr  Map<int,BreakPointRequest> mbp){
    	Map.Iterator<int,BreakPointRequest> iter =  mbp.iterator();
        while (iter.hasNext()){
			BreakPointRequest brp =  iter.getValue();
            
            if (brp != nilptr){
                long item = list.addItem("res/toolbar/bps.png", "常规断点");
                list.setItemText(item, 1, "-");
                list.setItemText(item, 2, brp.file );
                
                if (brp.realine != brp.reqline){
                    list.setItemText(item, 3, "" + (brp.reqline + 1) + " -> " + (brp.realine + 1));
                }else{
                    list.setItemText(item, 3, "" + (brp.reqline + 1));
                }
            }
            iter.next();
        }
    }
    
	public void onListItemClicked(@NotNilptr QTreeWidget tree,long item, int column)override{
		String sfile = tree.getItemText(item, 2);
		String sline = tree.getItemText(item, 3);
        
        XSourceEditor.openForFileInfo(XWorkspace.workspace, sfile, sline.parseInt(), 1, nilptr);
    }
        
        
    public void deleteBreakPoint(@NotNilptr long [] items){
		QTreeWidget list = getList();
        
		for (int i = 0;i < items.length; i++){
			String sfile = list.getItemText(items[i], 2);
			String sline = list.getItemText(items[i], 3);
            try{            
				Map<int,BreakPointRequest> smap =  breakPoints.get(sfile);
                
                if (smap != nilptr){
					smap.remove(sline.parseInt());
                    int repos = sline.indexOf("-> ");
                    if (repos != -1){
						XSourceEditor.toggleBreakPointOnFile(XWorkspace.workspace, sfile, sline.substring(repos + 3, sline.length()).parseInt(), false);
                    }
                    XSourceEditor.toggleBreakPointOnFile(XWorkspace.workspace, sfile, sline.parseInt(), false);
                }
                
            }catch(Exception e){
            
            }
        }
        
        refreshBreakPoints();
    }
    public void onCreate(){
		bpWnd = this;
        createContextMenu();
    }
    
    public String getListName()override{
		return "bplist";
    }
    
    public String [] getColumn()override{
		String [] columns = {"类型", "地址", "位置", "行"};
        return columns;
    }
    
    public int [] getColumnWidths()override{
		int [] ws = {100, 50, 300, 50};
        return ws;
    }
    

	public void onNotification(long id){
		 synchronized(requestlist){
			for (int i = 0, c = requestlist.size(); i < c; i++){
				BreakPointRequest bpr = requestlist.get(i);
                if (bpr != nilptr){
                    parseBreakPoint(bpr);
                }
            }
            refreshBreakPoints();
            requestlist.clear();
		 }
	}
    
    
    public void setBreakPointEnable(@NotNilptr BreakPointRequest bpr, bool enabled){
		QTreeWidget list = getList();
        
        int count = list.getTopLevelCount();
		for (int i = 0;i < count; i++){
			long item = list.getTopItem(i);
			String sfile = list.getItemText(item, 2);
			String sline = list.getItemText(item, 3);
            if (sfile.equals(bpr.file) && sline.parseInt() == bpr.reqline){
				list.setItemIcon(item, 0, enabled ? "res/toolbar/bps.png" : "res/toolbar/bpsd.png");
            }
        }
    }
    
    public void invalidAllBreakpoint(){
		QTreeWidget list = getList();
        
        int count = list.getTopLevelCount();
		for (int i = 0;i < count; i++){
			long item = list.getTopItem(i);
			list.setItemIcon(item, 0, "res/toolbar/bpsd.png");
        }
    }
    
    public void parseBreakPoint(@NotNilptr BreakPointRequest bpr){
		//QTreeWidget list = getList();
		runOnUi( new Runnable(){
			void run(){
				setBreakPointEnable(bpr, bpr.error == 0);
			}
		});
        
		if (bpr.error != 0){
			//XWndOutput.outputWnd.output("无法在此位置切换断点:" + bpr.file + " 行:" + bpr.reqline + "\n");
            return ;
        }
        
        Map<int,BreakPointRequest> lineMap = nilptr;
        
        try{
			lineMap = breakPoints.get(bpr.file);
        }catch(Exception e){
        
        }
        
        if (bpr.set){
			if (lineMap != nilptr){
				lineMap.put(bpr.reqline, bpr);
			}else{
				lineMap = new Map<int,BreakPointRequest>();
				lineMap.put(bpr.reqline, bpr);
				breakPoints.put(bpr.file, lineMap);
			}
        }else{
			if (lineMap != nilptr){
				lineMap.remove(bpr.realine);
			}
        }
        
        XSourceEditor.toggleBreakPointOnFile(XWorkspace.workspace, bpr.file, bpr.realine, bpr.set);
    }
    

 
    
    public void createContextMenu(){
		QTreeWidget list = getList();
        
		onEventListener menuListener = new onEventListener(){
		   void onTrigger(QObject obj) override{
				if (obj == _contextMenu.actions[0]){
				
					long []items = list.getSelectedItems();
					if (items != nilptr ){
						deleteBreakPoint(items);
                    }
                }
		   }
		};
        
		String []acts = {"删除"};
		_contextMenu.create(list, acts, menuListener, nilptr);
	}
    
    public static void setBreakPoint(String file, int reqline, int realine, bool set, int error){
		synchronized(requestlist){
			requestlist.add(new BreakPointRequest(file, reqline, realine, set, error));
            bpWnd.Notify(0);
        }
    }
};